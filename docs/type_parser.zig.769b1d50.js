var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ParseTypeTestCase = struct {"},
{"lineNum":"   39","line":"    code: []const u8,"},
{"lineNum":"   40","line":"    check: fn (res: ParseResult) anyerror!void,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn run(self: ParseTypeTestCase) !void {","class":"lineCov","hits":"3","order":"2355","possible_hits":"3",},
{"lineNum":"   43","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2356","possible_hits":"1",},
{"lineNum":"   44","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"2370","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"2357","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"2358","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const res = parser.parseType();","class":"lineCov","hits":"1","order":"2359","possible_hits":"1",},
{"lineNum":"   51","line":"        try self.check(res);","class":"linePartCov","hits":"1","order":"2362","possible_hits":"2",},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"fn parseTypeName(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1981","possible_hits":"1",},
{"lineNum":"   56","line":"    switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"1982","possible_hits":"1",},
{"lineNum":"   57","line":"        .Ident => {"},
{"lineNum":"   58","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"1986","possible_hits":"1",},
{"lineNum":"   59","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"1983","possible_hits":"1",},
{"lineNum":"   60","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"1984","possible_hits":"1",},
{"lineNum":"   61","line":"                NodeType.TypeName,"},
{"lineNum":"   62","line":"                psr.lexer.token.data,","class":"lineCov","hits":"1","order":"1985","possible_hits":"1",},
{"lineNum":"   63","line":"            );"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1987","possible_hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1988","possible_hits":"1",},
{"lineNum":"   68","line":"        },"},
{"lineNum":"   69","line":"        .Void => {"},
{"lineNum":"   70","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"2376","possible_hits":"1",},
{"lineNum":"   71","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2374","possible_hits":"1",},
{"lineNum":"   72","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2375","possible_hits":"1",},
{"lineNum":"   73","line":"                NodeType.TypeName,"},
{"lineNum":"   74","line":"                \"void\","},
{"lineNum":"   75","line":"            );"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2377","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2378","possible_hits":"1",},
{"lineNum":"   80","line":"        },"},
{"lineNum":"   81","line":"        .LParen => {"},
{"lineNum":"   82","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2445","possible_hits":"1",},
{"lineNum":"   83","line":"            const res = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"2446","possible_hits":"1",},
{"lineNum":"   84","line":"            if (!res.isSuccess())","class":"lineCov","hits":"2","order":"2447","possible_hits":"2",},
{"lineNum":"   85","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"            if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2448","possible_hits":"2",},
{"lineNum":"   87","line":"                return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2449","possible_hits":"1",},
{"lineNum":"   89","line":"            return res;","class":"lineCov","hits":"1","order":"2450","possible_hits":"1",},
{"lineNum":"   90","line":"        },"},
{"lineNum":"   91","line":"        else => return ParseResult.noMatch(null),","class":"lineCov","hits":"1","order":"2466","possible_hits":"1",},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":"}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"test \"can parse type names\" {","class":"lineCov","hits":"2","order":"2353","possible_hits":"2",},
{"lineNum":"   96","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2371","possible_hits":"1",},
{"lineNum":"   97","line":"        .code = \" ATypeName \","},
{"lineNum":"   98","line":"        .check = (struct {"},
{"lineNum":"   99","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2363","possible_hits":"2",},
{"lineNum":"  100","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2364","possible_hits":"1",},
{"lineNum":"  101","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"2365","possible_hits":"2",},
{"lineNum":"  102","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"2366","possible_hits":"2",},
{"lineNum":"  103","line":"                try expectEqualStrings(\"ATypeName\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"2369","possible_hits":"2",},
{"lineNum":"  104","line":"            }"},
{"lineNum":"  105","line":"        }).check,"},
{"lineNum":"  106","line":"    }).run();","class":"lineCov","hits":"1","order":"2354","possible_hits":"1",},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"test \"can parse void type\" {","class":"lineCov","hits":"2","order":"2372","possible_hits":"2",},
{"lineNum":"  110","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2384","possible_hits":"1",},
{"lineNum":"  111","line":"        .code = \" void \","},
{"lineNum":"  112","line":"        .check = (struct {"},
{"lineNum":"  113","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2379","possible_hits":"2",},
{"lineNum":"  114","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2380","possible_hits":"1",},
{"lineNum":"  115","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"2381","possible_hits":"2",},
{"lineNum":"  116","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"2382","possible_hits":"2",},
{"lineNum":"  117","line":"                try expectEqualStrings(\"void\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"2383","possible_hits":"2",},
{"lineNum":"  118","line":"            }"},
{"lineNum":"  119","line":"        }).check,"},
{"lineNum":"  120","line":"    }).run();","class":"lineCov","hits":"1","order":"2373","possible_hits":"1",},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"fn parseArrayType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1979","possible_hits":"1",},
{"lineNum":"  124","line":"    var res = parseTypeName(psr);","class":"lineCov","hits":"1","order":"1980","possible_hits":"1",},
{"lineNum":"  125","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"1989","possible_hits":"2",},
{"lineNum":"  126","line":"        return res;","class":"lineCov","hits":"1","order":"2467","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    while (psr.lexer.token.ty == .LBrack) {","class":"lineCov","hits":"2","order":"1990","possible_hits":"2",},
{"lineNum":"  129","line":"        const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"2387","possible_hits":"1",},
{"lineNum":"  130","line":"        if (next.ty != .RBrack)","class":"lineCov","hits":"2","order":"2388","possible_hits":"2",},
{"lineNum":"  131","line":"            return ParseResult.expected(TokenType.RBrack, next);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2389","possible_hits":"1",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        res = ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2393","possible_hits":"1",},
{"lineNum":"  136","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"2390","possible_hits":"1",},
{"lineNum":"  137","line":"            res.Success.csr,","class":"linePartCov","hits":"2","order":"2391","possible_hits":"3",},
{"lineNum":"  138","line":"            NodeType.ArrayType,"},
{"lineNum":"  139","line":"            res.Success,","class":"linePartCov","hits":"2","order":"2392","possible_hits":"3",},
{"lineNum":"  140","line":"        ));"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    return res;","class":"lineCov","hits":"1","order":"1991","possible_hits":"1",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"test \"can parse array type\" {","class":"lineCov","hits":"2","order":"2385","possible_hits":"2",},
{"lineNum":"  147","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2401","possible_hits":"1",},
{"lineNum":"  148","line":"        .code = \" number[] \","},
{"lineNum":"  149","line":"        .check = (struct {"},
{"lineNum":"  150","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2394","possible_hits":"2",},
{"lineNum":"  151","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2395","possible_hits":"1",},
{"lineNum":"  152","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"2396","possible_hits":"2",},
{"lineNum":"  153","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"2397","possible_hits":"2",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"                const subtype = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"2398","possible_hits":"3",},
{"lineNum":"  156","line":"                try expectEqual(NodeType.TypeName, subtype.getType());","class":"linePartCov","hits":"1","order":"2399","possible_hits":"2",},
{"lineNum":"  157","line":"                try expectEqualStrings(\"number\", subtype.data.TypeName);","class":"lineCov","hits":"2","order":"2400","possible_hits":"2",},
{"lineNum":"  158","line":"            }"},
{"lineNum":"  159","line":"        }).check,"},
{"lineNum":"  160","line":"    }).run();","class":"lineCov","hits":"1","order":"2386","possible_hits":"1",},
{"lineNum":"  161","line":"}"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"test \"can parse multidimensional array type\" {","class":"lineCov","hits":"2","order":"2402","possible_hits":"2",},
{"lineNum":"  164","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2413","possible_hits":"1",},
{"lineNum":"  165","line":"        .code = \" string[][] \","},
{"lineNum":"  166","line":"        .check = (struct {"},
{"lineNum":"  167","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2404","possible_hits":"2",},
{"lineNum":"  168","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2405","possible_hits":"1",},
{"lineNum":"  169","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"2406","possible_hits":"2",},
{"lineNum":"  170","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"2407","possible_hits":"2",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"                const subtype1 = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"2408","possible_hits":"3",},
{"lineNum":"  173","line":"                try expectEqual(NodeType.ArrayType, subtype1.getType());","class":"linePartCov","hits":"1","order":"2409","possible_hits":"2",},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"                const subtype2 = subtype1.data.ArrayType;","class":"linePartCov","hits":"2","order":"2410","possible_hits":"3",},
{"lineNum":"  176","line":"                try expectEqual(NodeType.TypeName, subtype2.getType());","class":"linePartCov","hits":"1","order":"2411","possible_hits":"2",},
{"lineNum":"  177","line":"                try expectEqualStrings(\"string\", subtype2.data.TypeName);","class":"lineCov","hits":"2","order":"2412","possible_hits":"2",},
{"lineNum":"  178","line":"            }"},
{"lineNum":"  179","line":"        }).check,"},
{"lineNum":"  180","line":"    }).run();","class":"lineCov","hits":"1","order":"2403","possible_hits":"1",},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"fn parseUnionType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1977","possible_hits":"1",},
{"lineNum":"  184","line":"    const res = parseArrayType(psr);","class":"lineCov","hits":"1","order":"1978","possible_hits":"1",},
{"lineNum":"  185","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .BitOr)","class":"lineCov","hits":"2","order":"1992","possible_hits":"2",},
{"lineNum":"  186","line":"        return res;","class":"lineCov","hits":"1","order":"1993","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"2416","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    const un = makeNode(","class":"lineCov","hits":"1","order":"2418","possible_hits":"1",},
{"lineNum":"  191","line":"        alloc,"},
{"lineNum":"  192","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2417","possible_hits":"1",},
{"lineNum":"  193","line":"        NodeType.UnionType,"},
{"lineNum":"  194","line":"        node.NodeList{},"},
{"lineNum":"  195","line":"    );"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"2419","possible_hits":"3",},
{"lineNum":"  198","line":"        alloc,"},
{"lineNum":"  199","line":"        res.Success,","class":"linePartCov","hits":"2","order":"2420","possible_hits":"3",},
{"lineNum":"  200","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2421","possible_hits":"2",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    while (psr.lexer.token.ty == .BitOr) {","class":"lineCov","hits":"2","order":"2422","possible_hits":"2",},
{"lineNum":"  203","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2423","possible_hits":"1",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        const right = parseArrayType(psr);","class":"lineCov","hits":"1","order":"2424","possible_hits":"1",},
{"lineNum":"  206","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"2425","possible_hits":"2",},
{"lineNum":"  207","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"        un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"2426","possible_hits":"3",},
{"lineNum":"  210","line":"            alloc,"},
{"lineNum":"  211","line":"            right.Success,","class":"linePartCov","hits":"2","order":"2427","possible_hits":"3",},
{"lineNum":"  212","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2428","possible_hits":"2",},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    return ParseResult.success(un);","class":"lineCov","hits":"1","order":"2429","possible_hits":"1",},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"test \"can parse union types\" {","class":"lineCov","hits":"2","order":"2414","possible_hits":"2",},
{"lineNum":"  219","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2442","possible_hits":"1",},
{"lineNum":"  220","line":"        .code = \" number | string | boolean \","},
{"lineNum":"  221","line":"        .check = (struct {"},
{"lineNum":"  222","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2430","possible_hits":"2",},
{"lineNum":"  223","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2431","possible_hits":"1",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"                const un = res.Success;","class":"linePartCov","hits":"2","order":"2432","possible_hits":"3",},
{"lineNum":"  226","line":"                try expectEqual(NodeType.UnionType, un.getType());","class":"linePartCov","hits":"1","order":"2433","possible_hits":"2",},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"                const tys = un.data.UnionType.items;","class":"linePartCov","hits":"2","order":"2434","possible_hits":"3",},
{"lineNum":"  229","line":"                try expectEqual(@intCast(usize, 3), tys.len);","class":"linePartCov","hits":"1","order":"2435","possible_hits":"2",},
{"lineNum":"  230","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"2436","possible_hits":"2",},
{"lineNum":"  231","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"2437","possible_hits":"2",},
{"lineNum":"  232","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"2438","possible_hits":"2",},
{"lineNum":"  233","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"2439","possible_hits":"2",},
{"lineNum":"  234","line":"                try expectEqual(NodeType.TypeName, tys[2].getType());","class":"linePartCov","hits":"1","order":"2440","possible_hits":"2",},
{"lineNum":"  235","line":"                try expectEqualStrings(\"boolean\", tys[2].data.TypeName);","class":"linePartCov","hits":"1","order":"2441","possible_hits":"2",},
{"lineNum":"  236","line":"            }"},
{"lineNum":"  237","line":"        }).check,"},
{"lineNum":"  238","line":"    }).run();","class":"lineCov","hits":"1","order":"2415","possible_hits":"1",},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"fn parseTypeInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1975","possible_hits":"1",},
{"lineNum":"  242","line":"    return parseUnionType(psr);","class":"lineCov","hits":"1","order":"1976","possible_hits":"1",},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"pub fn parseType(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"1973","possible_hits":"1",},
{"lineNum":"  246","line":"    return parseTypeInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"1974","possible_hits":"1",},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"test \"can parse nested types\" {","class":"lineCov","hits":"2","order":"2443","possible_hits":"2",},
{"lineNum":"  250","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2463","possible_hits":"1",},
{"lineNum":"  251","line":"        .code = \" (number|string)[] \","},
{"lineNum":"  252","line":"        .check = (struct {"},
{"lineNum":"  253","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2451","possible_hits":"2",},
{"lineNum":"  254","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"2452","possible_hits":"1",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"2453","possible_hits":"3",},
{"lineNum":"  257","line":"                try expectEqual(NodeType.ArrayType, ty.getType());","class":"linePartCov","hits":"1","order":"2454","possible_hits":"2",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"                const sub = ty.data.ArrayType;","class":"linePartCov","hits":"2","order":"2455","possible_hits":"3",},
{"lineNum":"  260","line":"                try expectEqual(NodeType.UnionType, sub.getType());","class":"linePartCov","hits":"1","order":"2456","possible_hits":"2",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"                const tys = sub.data.UnionType.items;","class":"linePartCov","hits":"2","order":"2457","possible_hits":"3",},
{"lineNum":"  263","line":"                try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"2458","possible_hits":"2",},
{"lineNum":"  264","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"2459","possible_hits":"2",},
{"lineNum":"  265","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"2460","possible_hits":"2",},
{"lineNum":"  266","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"2461","possible_hits":"2",},
{"lineNum":"  267","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"2462","possible_hits":"2",},
{"lineNum":"  268","line":"            }"},
{"lineNum":"  269","line":"        }).check,"},
{"lineNum":"  270","line":"    }).run();","class":"lineCov","hits":"1","order":"2444","possible_hits":"1",},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"test \"invalid types return NoMatch\" {","class":"lineCov","hits":"2","order":"2464","possible_hits":"2",},
{"lineNum":"  274","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"2470","possible_hits":"1",},
{"lineNum":"  275","line":"        .code = \" 3 \","},
{"lineNum":"  276","line":"        .check = (struct {"},
{"lineNum":"  277","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"2468","possible_hits":"2",},
{"lineNum":"  278","line":"                try expectEqual(ParseResult.Type.NoMatch, res.getType());","class":"lineCov","hits":"1","order":"2469","possible_hits":"1",},
{"lineNum":"  279","line":"            }"},
{"lineNum":"  280","line":"        }).check,"},
{"lineNum":"  281","line":"    }).run();","class":"lineCov","hits":"1","order":"2465","possible_hits":"1",},
{"lineNum":"  282","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 12:25:10", "instrumented" : 139, "covered" : 135,};
var merged_data = [];
