var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ParseTypeTestCase = struct {"},
{"lineNum":"   39","line":"    code: []const u8,"},
{"lineNum":"   40","line":"    check: fn (res: ParseResult) anyerror!void,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn run(self: ParseTypeTestCase) !void {","class":"lineCov","hits":"3","order":"4050","possible_hits":"3",},
{"lineNum":"   43","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"4051","possible_hits":"1",},
{"lineNum":"   44","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"4076","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"4052","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"4053","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const res = parser.parseType();","class":"lineCov","hits":"1","order":"4054","possible_hits":"1",},
{"lineNum":"   51","line":"        try self.check(res);","class":"linePartCov","hits":"1","order":"4059","possible_hits":"2",},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"pub fn parseInlineInterfaceType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3253","possible_hits":"1",},
{"lineNum":"   56","line":"    std.debug.assert(psr.lexer.token.ty == .LBrace);","class":"lineCov","hits":"1","order":"3254","possible_hits":"1",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3255","possible_hits":"1",},
{"lineNum":"   59","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3256","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3257","possible_hits":"1",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    var res = node.InterfaceTypeMemberList{};","class":"lineCov","hits":"1","order":"3258","possible_hits":"1",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    while (true) {","class":"lineCov","hits":"1","order":"3259","possible_hits":"1",},
{"lineNum":"   66","line":"        // TODO: Should strings be valid here as well as identifiers?"},
{"lineNum":"   67","line":"        if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"3260","possible_hits":"2",},
{"lineNum":"   68","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"                \"name for interface member\","},
{"lineNum":"   70","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"            );"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3261","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        if (psr.lexer.next().ty != .Colon)","class":"lineCov","hits":"2","order":"3262","possible_hits":"2",},
{"lineNum":"   76","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3264","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        const ty = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3265","possible_hits":"1",},
{"lineNum":"   81","line":"        if (!ty.isSuccess())","class":"lineCov","hits":"2","order":"3266","possible_hits":"2",},
{"lineNum":"   82","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                \"type for interface member\","},
{"lineNum":"   84","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            );"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        res.append(","class":"lineCov","hits":"1","order":"3268","possible_hits":"1",},
{"lineNum":"   88","line":"            alloc,"},
{"lineNum":"   89","line":"            node.InterfaceTypeMember.new(name, ty.Success),","class":"linePartCov","hits":"2","order":"3267","possible_hits":"3",},
{"lineNum":"   90","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3269","possible_hits":"2",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"3270","possible_hits":"1",},
{"lineNum":"   93","line":"            .Comma, .Semi => {"},
{"lineNum":"   94","line":"                if (psr.lexer.next().ty == .RBrace) {","class":"lineCov","hits":"1","order":"3271","possible_hits":"1",},
{"lineNum":"   95","line":"                    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3279","possible_hits":"1",},
{"lineNum":"   96","line":"                    break;","class":"lineCov","hits":"1","order":"3280","possible_hits":"1",},
{"lineNum":"   97","line":"                } else {"},
{"lineNum":"   98","line":"                    continue;","class":"lineCov","hits":"1","order":"3272","possible_hits":"1",},
{"lineNum":"   99","line":"                }"},
{"lineNum":"  100","line":"            },"},
{"lineNum":"  101","line":"            .RBrace => {"},
{"lineNum":"  102","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4058","possible_hits":"1",},
{"lineNum":"  103","line":"                break;"},
{"lineNum":"  104","line":"            },"},
{"lineNum":"  105","line":"            else => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                \"comma or left brace\","},
{"lineNum":"  107","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"            ),"},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3283","possible_hits":"1",},
{"lineNum":"  113","line":"        alloc,"},
{"lineNum":"  114","line":"        csr,"},
{"lineNum":"  115","line":"        .InterfaceType,"},
{"lineNum":"  116","line":"        node.InterfaceType{"},
{"lineNum":"  117","line":"            .name = null,","class":"lineCov","hits":"1","order":"3282","possible_hits":"1",},
{"lineNum":"  118","line":"            .members = res,","class":"lineCov","hits":"1","order":"3281","possible_hits":"1",},
{"lineNum":"  119","line":"        },"},
{"lineNum":"  120","line":"    ));"},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"test \"can parse inline interface types\" {","class":"lineCov","hits":"2","order":"4048","possible_hits":"2",},
{"lineNum":"  124","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4077","possible_hits":"1",},
{"lineNum":"  125","line":"        .code = \" { a: number, b: string } \","},
{"lineNum":"  126","line":"        .check = (struct {"},
{"lineNum":"  127","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4060","possible_hits":"2",},
{"lineNum":"  128","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4061","possible_hits":"1",},
{"lineNum":"  129","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4062","possible_hits":"2",},
{"lineNum":"  130","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"4066","possible_hits":"2",},
{"lineNum":"  131","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  132","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"4063","possible_hits":"3",},
{"lineNum":"  133","line":"                );"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"                try expect(res.Success.data.InterfaceType.name == null);","class":"lineCov","hits":"2","order":"4067","possible_hits":"2",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"                const members = res.Success.data.InterfaceType.members.items;","class":"linePartCov","hits":"2","order":"4068","possible_hits":"3",},
{"lineNum":"  138","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"4069","possible_hits":"2",},
{"lineNum":"  139","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"4070","possible_hits":"2",},
{"lineNum":"  140","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"4071","possible_hits":"2",},
{"lineNum":"  141","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"4072","possible_hits":"2",},
{"lineNum":"  142","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"4073","possible_hits":"2",},
{"lineNum":"  143","line":"                try expectEqual(NodeType.TypeName, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"4074","possible_hits":"2",},
{"lineNum":"  144","line":"                try expectEqualStrings(\"string\", members[1].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"4075","possible_hits":"2",},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":"        }).check,"},
{"lineNum":"  147","line":"    }).run();","class":"lineCov","hits":"1","order":"4049","possible_hits":"1",},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"test \"can parse inline interface types with semicolons and trailing comma\" {","class":"lineCov","hits":"2","order":"4078","possible_hits":"2",},
{"lineNum":"  151","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4094","possible_hits":"1",},
{"lineNum":"  152","line":"        .code = \" { a: number; b: string, } \","},
{"lineNum":"  153","line":"        .check = (struct {"},
{"lineNum":"  154","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4080","possible_hits":"2",},
{"lineNum":"  155","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4081","possible_hits":"1",},
{"lineNum":"  156","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4082","possible_hits":"2",},
{"lineNum":"  157","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"4084","possible_hits":"2",},
{"lineNum":"  158","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  159","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"4083","possible_hits":"3",},
{"lineNum":"  160","line":"                );"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"                try expect(res.Success.data.InterfaceType.name == null);","class":"lineCov","hits":"2","order":"4085","possible_hits":"2",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"                const members = res.Success.data.InterfaceType.members.items;","class":"linePartCov","hits":"2","order":"4086","possible_hits":"3",},
{"lineNum":"  165","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"4087","possible_hits":"2",},
{"lineNum":"  166","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"4088","possible_hits":"2",},
{"lineNum":"  167","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"4089","possible_hits":"2",},
{"lineNum":"  168","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"4090","possible_hits":"2",},
{"lineNum":"  169","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"4091","possible_hits":"2",},
{"lineNum":"  170","line":"                try expectEqual(NodeType.TypeName, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"4092","possible_hits":"2",},
{"lineNum":"  171","line":"                try expectEqualStrings(\"string\", members[1].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"4093","possible_hits":"2",},
{"lineNum":"  172","line":"            }"},
{"lineNum":"  173","line":"        }).check,"},
{"lineNum":"  174","line":"    }).run();","class":"lineCov","hits":"1","order":"4079","possible_hits":"1",},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"fn parseTypeOf(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4098","possible_hits":"1",},
{"lineNum":"  178","line":"    std.debug.assert(psr.lexer.token.ty == .TypeOf);","class":"lineCov","hits":"1","order":"4099","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4100","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4101","possible_hits":"1",},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"4102","possible_hits":"2",},
{"lineNum":"  185","line":"        return ParseResult.errMessage(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"            psr.lexer.token.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"            \"\'typeof\' may only be applied to identifiers or their properties (in this context)\","},
{"lineNum":"  188","line":"        );"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    var nd = makeNode(","class":"lineCov","hits":"1","order":"4105","possible_hits":"1",},
{"lineNum":"  191","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4103","possible_hits":"1",},
{"lineNum":"  192","line":"        csr,"},
{"lineNum":"  193","line":"        .Ident,"},
{"lineNum":"  194","line":"        psr.lexer.token.data,","class":"lineCov","hits":"1","order":"4104","possible_hits":"1",},
{"lineNum":"  195","line":"    );"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4106","possible_hits":"1",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    while (true) {","class":"lineCov","hits":"2","order":"4107","possible_hits":"2",},
{"lineNum":"  200","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"2","order":"4108","possible_hits":"2",},
{"lineNum":"  201","line":"            .Dot => {"},
{"lineNum":"  202","line":"                const ident = psr.lexer.next();","class":"lineCov","hits":"1","order":"4109","possible_hits":"1",},
{"lineNum":"  203","line":"                if (ident.ty != .Ident)","class":"lineCov","hits":"2","order":"4110","possible_hits":"2",},
{"lineNum":"  204","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"                        TokenType.Ident,"},
{"lineNum":"  206","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"                    );"},
{"lineNum":"  208","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"4114","possible_hits":"1",},
{"lineNum":"  209","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"4111","possible_hits":"1",},
{"lineNum":"  210","line":"                    psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"4112","possible_hits":"1",},
{"lineNum":"  211","line":"                    .Dot,"},
{"lineNum":"  212","line":"                    node.Dot{ .expr = nd, .ident = ident.data },","class":"lineCov","hits":"1","order":"4113","possible_hits":"1",},
{"lineNum":"  213","line":"                );"},
{"lineNum":"  214","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4115","possible_hits":"1",},
{"lineNum":"  215","line":"            },"},
{"lineNum":"  216","line":"            .LBrack => {"},
{"lineNum":"  217","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4116","possible_hits":"1",},
{"lineNum":"  218","line":"                const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"4117","possible_hits":"1",},
{"lineNum":"  219","line":"                switch (expr) {","class":"linePartCov","hits":"2","order":"4118","possible_hits":"3",},
{"lineNum":"  220","line":"                    .Success => |e| {","class":"lineCov","hits":"1","order":"4119","possible_hits":"1",},
{"lineNum":"  221","line":"                        nd = makeNode(","class":"lineCov","hits":"1","order":"4123","possible_hits":"1",},
{"lineNum":"  222","line":"                            psr.getAllocator(),","class":"lineCov","hits":"1","order":"4120","possible_hits":"1",},
{"lineNum":"  223","line":"                            psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"4121","possible_hits":"1",},
{"lineNum":"  224","line":"                            .ArrayAccess,"},
{"lineNum":"  225","line":"                            node.ArrayAccess{ .expr = nd, .index = e },","class":"lineCov","hits":"1","order":"4122","possible_hits":"1",},
{"lineNum":"  226","line":"                        );"},
{"lineNum":"  227","line":"                        if (psr.lexer.token.ty != .RBrack)","class":"lineCov","hits":"2","order":"4124","possible_hits":"2",},
{"lineNum":"  228","line":"                            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"                                TokenType.RBrack,"},
{"lineNum":"  230","line":"                                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"                            );"},
{"lineNum":"  232","line":"                        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4125","possible_hits":"1",},
{"lineNum":"  233","line":"                    },"},
{"lineNum":"  234","line":"                    .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"                    .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"                        \"object property access in \'typeof\' expression\","},
{"lineNum":"  237","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"                    ),"},
{"lineNum":"  239","line":"                }"},
{"lineNum":"  240","line":"            },"},
{"lineNum":"  241","line":"            else => break,","class":"lineCov","hits":"1","order":"4126","possible_hits":"1",},
{"lineNum":"  242","line":"        }"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4129","possible_hits":"1",},
{"lineNum":"  246","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4127","possible_hits":"1",},
{"lineNum":"  247","line":"        csr,"},
{"lineNum":"  248","line":"        NodeType.TypeOf,"},
{"lineNum":"  249","line":"        nd,","class":"lineCov","hits":"1","order":"4128","possible_hits":"1",},
{"lineNum":"  250","line":"    ));"},
{"lineNum":"  251","line":"}"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"test \"can parse typeof (in a type context)\" {","class":"lineCov","hits":"2","order":"4095","possible_hits":"2",},
{"lineNum":"  254","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4144","possible_hits":"1",},
{"lineNum":"  255","line":"        .code = \" typeof a.b[\'c\'] \","},
{"lineNum":"  256","line":"        .check = (struct {"},
{"lineNum":"  257","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4130","possible_hits":"2",},
{"lineNum":"  258","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4131","possible_hits":"1",},
{"lineNum":"  259","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4132","possible_hits":"2",},
{"lineNum":"  260","line":"                try expectEqual(NodeType.TypeOf, res.Success.data.getType());","class":"lineCov","hits":"2","order":"4133","possible_hits":"2",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"                const expr = res.Success.data.TypeOf;","class":"linePartCov","hits":"2","order":"4134","possible_hits":"3",},
{"lineNum":"  263","line":"                try expectEqual(NodeType.ArrayAccess, expr.getType());","class":"linePartCov","hits":"1","order":"4135","possible_hits":"2",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"                const access = expr.data.ArrayAccess;","class":"linePartCov","hits":"2","order":"4136","possible_hits":"3",},
{"lineNum":"  266","line":"                try expectEqual(NodeType.Dot, access.expr.getType());","class":"linePartCov","hits":"1","order":"4137","possible_hits":"2",},
{"lineNum":"  267","line":"                try expectEqual(NodeType.String, access.index.getType());","class":"lineCov","hits":"1","order":"4138","possible_hits":"1",},
{"lineNum":"  268","line":"                try expectEqualStrings(\"\'c\'\", access.index.data.String);","class":"lineCov","hits":"2","order":"4139","possible_hits":"2",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"                const dot = access.expr.data.Dot;","class":"linePartCov","hits":"2","order":"4140","possible_hits":"3",},
{"lineNum":"  271","line":"                try expectEqual(NodeType.Ident, dot.expr.getType());","class":"linePartCov","hits":"1","order":"4141","possible_hits":"2",},
{"lineNum":"  272","line":"                try expectEqualStrings(\"a\", dot.expr.data.Ident);","class":"lineCov","hits":"2","order":"4142","possible_hits":"2",},
{"lineNum":"  273","line":"                try expectEqualStrings(\"b\", dot.ident);","class":"lineCov","hits":"1","order":"4143","possible_hits":"1",},
{"lineNum":"  274","line":"            }"},
{"lineNum":"  275","line":"        }).check,"},
{"lineNum":"  276","line":"    }).run();","class":"lineCov","hits":"1","order":"4096","possible_hits":"1",},
{"lineNum":"  277","line":"}"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"fn parseTypeName(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2987","possible_hits":"1",},
{"lineNum":"  280","line":"    switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"2988","possible_hits":"1",},
{"lineNum":"  281","line":"        .Ident => {"},
{"lineNum":"  282","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"2994","possible_hits":"1",},
{"lineNum":"  283","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2989","possible_hits":"1",},
{"lineNum":"  284","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2992","possible_hits":"1",},
{"lineNum":"  285","line":"                NodeType.TypeName,"},
{"lineNum":"  286","line":"                psr.lexer.token.data,","class":"lineCov","hits":"1","order":"2993","possible_hits":"1",},
{"lineNum":"  287","line":"            );"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2995","possible_hits":"1",},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2996","possible_hits":"1",},
{"lineNum":"  292","line":"        },"},
{"lineNum":"  293","line":"        .Void => {"},
{"lineNum":"  294","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"4157","possible_hits":"1",},
{"lineNum":"  295","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"4155","possible_hits":"1",},
{"lineNum":"  296","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"4156","possible_hits":"1",},
{"lineNum":"  297","line":"                NodeType.TypeName,"},
{"lineNum":"  298","line":"                \"void\","},
{"lineNum":"  299","line":"            );"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4158","possible_hits":"1",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"4159","possible_hits":"1",},
{"lineNum":"  304","line":"        },"},
{"lineNum":"  305","line":"        .Null => {"},
{"lineNum":"  306","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3275","possible_hits":"1",},
{"lineNum":"  307","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3273","possible_hits":"1",},
{"lineNum":"  308","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3274","possible_hits":"1",},
{"lineNum":"  309","line":"                NodeType.TypeName,"},
{"lineNum":"  310","line":"                \"null\","},
{"lineNum":"  311","line":"            );"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3276","possible_hits":"1",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3277","possible_hits":"1",},
{"lineNum":"  316","line":"        },"},
{"lineNum":"  317","line":"        .Undefined => {"},
{"lineNum":"  318","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"4178","possible_hits":"1",},
{"lineNum":"  319","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"4176","possible_hits":"1",},
{"lineNum":"  320","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"4177","possible_hits":"1",},
{"lineNum":"  321","line":"                NodeType.TypeName,"},
{"lineNum":"  322","line":"                \"undefined\","},
{"lineNum":"  323","line":"            );"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4179","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"4180","possible_hits":"1",},
{"lineNum":"  328","line":"        },"},
{"lineNum":"  329","line":"        .LParen => {"},
{"lineNum":"  330","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4233","possible_hits":"1",},
{"lineNum":"  331","line":"            const res = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"4234","possible_hits":"1",},
{"lineNum":"  332","line":"            if (!res.isSuccess())","class":"lineCov","hits":"2","order":"4235","possible_hits":"2",},
{"lineNum":"  333","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"            if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4236","possible_hits":"2",},
{"lineNum":"  335","line":"                return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4237","possible_hits":"1",},
{"lineNum":"  337","line":"            return res;","class":"lineCov","hits":"1","order":"4238","possible_hits":"1",},
{"lineNum":"  338","line":"        },"},
{"lineNum":"  339","line":"        .LBrace => return parseInlineInterfaceType(psr),","class":"lineCov","hits":"1","order":"4057","possible_hits":"1",},
{"lineNum":"  340","line":"        .TypeOf => return parseTypeOf(psr),","class":"lineCov","hits":"1","order":"4097","possible_hits":"1",},
{"lineNum":"  341","line":"        else => return ParseResult.noMatch(null),","class":"lineCov","hits":"1","order":"4254","possible_hits":"1",},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":"}"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"test \"can parse type names\" {","class":"lineCov","hits":"2","order":"4145","possible_hits":"2",},
{"lineNum":"  346","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4152","possible_hits":"1",},
{"lineNum":"  347","line":"        .code = \" ATypeName \","},
{"lineNum":"  348","line":"        .check = (struct {"},
{"lineNum":"  349","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4147","possible_hits":"2",},
{"lineNum":"  350","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4148","possible_hits":"1",},
{"lineNum":"  351","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4149","possible_hits":"2",},
{"lineNum":"  352","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"4150","possible_hits":"2",},
{"lineNum":"  353","line":"                try expectEqualStrings(\"ATypeName\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"4151","possible_hits":"2",},
{"lineNum":"  354","line":"            }"},
{"lineNum":"  355","line":"        }).check,"},
{"lineNum":"  356","line":"    }).run();","class":"lineCov","hits":"1","order":"4146","possible_hits":"1",},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"test \"can parse void type\" {","class":"lineCov","hits":"2","order":"4153","possible_hits":"2",},
{"lineNum":"  360","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4165","possible_hits":"1",},
{"lineNum":"  361","line":"        .code = \" void \","},
{"lineNum":"  362","line":"        .check = (struct {"},
{"lineNum":"  363","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4160","possible_hits":"2",},
{"lineNum":"  364","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4161","possible_hits":"1",},
{"lineNum":"  365","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4162","possible_hits":"2",},
{"lineNum":"  366","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"4163","possible_hits":"2",},
{"lineNum":"  367","line":"                try expectEqualStrings(\"void\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"4164","possible_hits":"2",},
{"lineNum":"  368","line":"            }"},
{"lineNum":"  369","line":"        }).check,"},
{"lineNum":"  370","line":"    }).run();","class":"lineCov","hits":"1","order":"4154","possible_hits":"1",},
{"lineNum":"  371","line":"}"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"test \"can parse null type\" {","class":"lineCov","hits":"2","order":"4166","possible_hits":"2",},
{"lineNum":"  374","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4173","possible_hits":"1",},
{"lineNum":"  375","line":"        .code = \" null \","},
{"lineNum":"  376","line":"        .check = (struct {"},
{"lineNum":"  377","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4168","possible_hits":"2",},
{"lineNum":"  378","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4169","possible_hits":"1",},
{"lineNum":"  379","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4170","possible_hits":"2",},
{"lineNum":"  380","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"4171","possible_hits":"2",},
{"lineNum":"  381","line":"                try expectEqualStrings(\"null\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"4172","possible_hits":"2",},
{"lineNum":"  382","line":"            }"},
{"lineNum":"  383","line":"        }).check,"},
{"lineNum":"  384","line":"    }).run();","class":"lineCov","hits":"1","order":"4167","possible_hits":"1",},
{"lineNum":"  385","line":"}"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"test \"can parse undefined type\" {","class":"lineCov","hits":"2","order":"4174","possible_hits":"2",},
{"lineNum":"  388","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4186","possible_hits":"1",},
{"lineNum":"  389","line":"        .code = \" undefined \","},
{"lineNum":"  390","line":"        .check = (struct {"},
{"lineNum":"  391","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4181","possible_hits":"2",},
{"lineNum":"  392","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4182","possible_hits":"1",},
{"lineNum":"  393","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4183","possible_hits":"2",},
{"lineNum":"  394","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"4184","possible_hits":"2",},
{"lineNum":"  395","line":"                try expectEqualStrings(\"undefined\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"4185","possible_hits":"2",},
{"lineNum":"  396","line":"            }"},
{"lineNum":"  397","line":"        }).check,"},
{"lineNum":"  398","line":"    }).run();","class":"lineCov","hits":"1","order":"4175","possible_hits":"1",},
{"lineNum":"  399","line":"}"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"fn parseArrayType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2985","possible_hits":"1",},
{"lineNum":"  402","line":"    var res = parseTypeName(psr);","class":"lineCov","hits":"1","order":"2986","possible_hits":"1",},
{"lineNum":"  403","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"2997","possible_hits":"2",},
{"lineNum":"  404","line":"        return res;","class":"lineCov","hits":"1","order":"4255","possible_hits":"1",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"    while (psr.lexer.token.ty == .LBrack) {","class":"lineCov","hits":"2","order":"2998","possible_hits":"2",},
{"lineNum":"  407","line":"        const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"4189","possible_hits":"1",},
{"lineNum":"  408","line":"        if (next.ty != .RBrack)","class":"lineCov","hits":"2","order":"4190","possible_hits":"2",},
{"lineNum":"  409","line":"            return ParseResult.expected(TokenType.RBrack, next);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4191","possible_hits":"1",},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"        res = ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4195","possible_hits":"1",},
{"lineNum":"  414","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"4192","possible_hits":"1",},
{"lineNum":"  415","line":"            res.Success.csr,","class":"linePartCov","hits":"2","order":"4193","possible_hits":"3",},
{"lineNum":"  416","line":"            NodeType.ArrayType,"},
{"lineNum":"  417","line":"            res.Success,","class":"linePartCov","hits":"2","order":"4194","possible_hits":"3",},
{"lineNum":"  418","line":"        ));"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"    return res;","class":"lineCov","hits":"1","order":"2999","possible_hits":"1",},
{"lineNum":"  422","line":"}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"test \"can parse array type\" {","class":"lineCov","hits":"2","order":"4187","possible_hits":"2",},
{"lineNum":"  425","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4203","possible_hits":"1",},
{"lineNum":"  426","line":"        .code = \" number[] \","},
{"lineNum":"  427","line":"        .check = (struct {"},
{"lineNum":"  428","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4196","possible_hits":"2",},
{"lineNum":"  429","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4197","possible_hits":"1",},
{"lineNum":"  430","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4198","possible_hits":"2",},
{"lineNum":"  431","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"4199","possible_hits":"2",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"                const subtype = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"4200","possible_hits":"3",},
{"lineNum":"  434","line":"                try expectEqual(NodeType.TypeName, subtype.getType());","class":"linePartCov","hits":"1","order":"4201","possible_hits":"2",},
{"lineNum":"  435","line":"                try expectEqualStrings(\"number\", subtype.data.TypeName);","class":"lineCov","hits":"2","order":"4202","possible_hits":"2",},
{"lineNum":"  436","line":"            }"},
{"lineNum":"  437","line":"        }).check,"},
{"lineNum":"  438","line":"    }).run();","class":"lineCov","hits":"1","order":"4188","possible_hits":"1",},
{"lineNum":"  439","line":"}"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"test \"can parse multidimensional array type\" {","class":"lineCov","hits":"2","order":"4204","possible_hits":"2",},
{"lineNum":"  442","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4215","possible_hits":"1",},
{"lineNum":"  443","line":"        .code = \" string[][] \","},
{"lineNum":"  444","line":"        .check = (struct {"},
{"lineNum":"  445","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4206","possible_hits":"2",},
{"lineNum":"  446","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4207","possible_hits":"1",},
{"lineNum":"  447","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"4208","possible_hits":"2",},
{"lineNum":"  448","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"4209","possible_hits":"2",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"                const subtype1 = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"4210","possible_hits":"3",},
{"lineNum":"  451","line":"                try expectEqual(NodeType.ArrayType, subtype1.getType());","class":"linePartCov","hits":"1","order":"4211","possible_hits":"2",},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"                const subtype2 = subtype1.data.ArrayType;","class":"linePartCov","hits":"2","order":"4212","possible_hits":"3",},
{"lineNum":"  454","line":"                try expectEqual(NodeType.TypeName, subtype2.getType());","class":"linePartCov","hits":"1","order":"4213","possible_hits":"2",},
{"lineNum":"  455","line":"                try expectEqualStrings(\"string\", subtype2.data.TypeName);","class":"lineCov","hits":"2","order":"4214","possible_hits":"2",},
{"lineNum":"  456","line":"            }"},
{"lineNum":"  457","line":"        }).check,"},
{"lineNum":"  458","line":"    }).run();","class":"lineCov","hits":"1","order":"4205","possible_hits":"1",},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"fn parseUnionType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2983","possible_hits":"1",},
{"lineNum":"  462","line":"    const res = parseArrayType(psr);","class":"lineCov","hits":"1","order":"2984","possible_hits":"1",},
{"lineNum":"  463","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .BitOr)","class":"lineCov","hits":"2","order":"3000","possible_hits":"2",},
{"lineNum":"  464","line":"        return res;","class":"lineCov","hits":"1","order":"3132","possible_hits":"1",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3001","possible_hits":"1",},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"    const un = makeNode(","class":"lineCov","hits":"1","order":"3003","possible_hits":"1",},
{"lineNum":"  469","line":"        alloc,"},
{"lineNum":"  470","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3002","possible_hits":"1",},
{"lineNum":"  471","line":"        NodeType.UnionType,"},
{"lineNum":"  472","line":"        node.NodeList{},"},
{"lineNum":"  473","line":"    );"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3004","possible_hits":"3",},
{"lineNum":"  476","line":"        alloc,"},
{"lineNum":"  477","line":"        res.Success,","class":"linePartCov","hits":"2","order":"3005","possible_hits":"3",},
{"lineNum":"  478","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3006","possible_hits":"2",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    while (psr.lexer.token.ty == .BitOr) {","class":"lineCov","hits":"2","order":"3007","possible_hits":"2",},
{"lineNum":"  481","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3008","possible_hits":"1",},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"        const right = parseArrayType(psr);","class":"lineCov","hits":"1","order":"3009","possible_hits":"1",},
{"lineNum":"  484","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"3010","possible_hits":"2",},
{"lineNum":"  485","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"        un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3011","possible_hits":"3",},
{"lineNum":"  488","line":"            alloc,"},
{"lineNum":"  489","line":"            right.Success,","class":"linePartCov","hits":"2","order":"3012","possible_hits":"3",},
{"lineNum":"  490","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3013","possible_hits":"2",},
{"lineNum":"  491","line":"    }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"    return ParseResult.success(un);","class":"lineCov","hits":"1","order":"3014","possible_hits":"1",},
{"lineNum":"  494","line":"}"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"test \"can parse union types\" {","class":"lineCov","hits":"2","order":"4216","possible_hits":"2",},
{"lineNum":"  497","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4230","possible_hits":"1",},
{"lineNum":"  498","line":"        .code = \" number | string | boolean \","},
{"lineNum":"  499","line":"        .check = (struct {"},
{"lineNum":"  500","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4218","possible_hits":"2",},
{"lineNum":"  501","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4219","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"                const un = res.Success;","class":"linePartCov","hits":"2","order":"4220","possible_hits":"3",},
{"lineNum":"  504","line":"                try expectEqual(NodeType.UnionType, un.getType());","class":"linePartCov","hits":"1","order":"4221","possible_hits":"2",},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"                const tys = un.data.UnionType.items;","class":"linePartCov","hits":"2","order":"4222","possible_hits":"3",},
{"lineNum":"  507","line":"                try expectEqual(@intCast(usize, 3), tys.len);","class":"linePartCov","hits":"1","order":"4223","possible_hits":"2",},
{"lineNum":"  508","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"4224","possible_hits":"2",},
{"lineNum":"  509","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"4225","possible_hits":"2",},
{"lineNum":"  510","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"4226","possible_hits":"2",},
{"lineNum":"  511","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"4227","possible_hits":"2",},
{"lineNum":"  512","line":"                try expectEqual(NodeType.TypeName, tys[2].getType());","class":"linePartCov","hits":"1","order":"4228","possible_hits":"2",},
{"lineNum":"  513","line":"                try expectEqualStrings(\"boolean\", tys[2].data.TypeName);","class":"linePartCov","hits":"1","order":"4229","possible_hits":"2",},
{"lineNum":"  514","line":"            }"},
{"lineNum":"  515","line":"        }).check,"},
{"lineNum":"  516","line":"    }).run();","class":"lineCov","hits":"1","order":"4217","possible_hits":"1",},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"fn parseTypeInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2981","possible_hits":"1",},
{"lineNum":"  520","line":"    return parseUnionType(psr);","class":"lineCov","hits":"1","order":"2982","possible_hits":"1",},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"pub fn parseType(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"2979","possible_hits":"1",},
{"lineNum":"  524","line":"    return parseTypeInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"2980","possible_hits":"1",},
{"lineNum":"  525","line":"}"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"test \"can parse nested types\" {","class":"lineCov","hits":"2","order":"4231","possible_hits":"2",},
{"lineNum":"  528","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4251","possible_hits":"1",},
{"lineNum":"  529","line":"        .code = \" (number|string)[] \","},
{"lineNum":"  530","line":"        .check = (struct {"},
{"lineNum":"  531","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4239","possible_hits":"2",},
{"lineNum":"  532","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"4240","possible_hits":"1",},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"4241","possible_hits":"3",},
{"lineNum":"  535","line":"                try expectEqual(NodeType.ArrayType, ty.getType());","class":"linePartCov","hits":"1","order":"4242","possible_hits":"2",},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"                const sub = ty.data.ArrayType;","class":"linePartCov","hits":"2","order":"4243","possible_hits":"3",},
{"lineNum":"  538","line":"                try expectEqual(NodeType.UnionType, sub.getType());","class":"linePartCov","hits":"1","order":"4244","possible_hits":"2",},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"                const tys = sub.data.UnionType.items;","class":"linePartCov","hits":"2","order":"4245","possible_hits":"3",},
{"lineNum":"  541","line":"                try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"4246","possible_hits":"2",},
{"lineNum":"  542","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"4247","possible_hits":"2",},
{"lineNum":"  543","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"4248","possible_hits":"2",},
{"lineNum":"  544","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"4249","possible_hits":"2",},
{"lineNum":"  545","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"4250","possible_hits":"2",},
{"lineNum":"  546","line":"            }"},
{"lineNum":"  547","line":"        }).check,"},
{"lineNum":"  548","line":"    }).run();","class":"lineCov","hits":"1","order":"4232","possible_hits":"1",},
{"lineNum":"  549","line":"}"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"test \"invalid types return NoMatch\" {","class":"lineCov","hits":"2","order":"4252","possible_hits":"2",},
{"lineNum":"  552","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"4258","possible_hits":"1",},
{"lineNum":"  553","line":"        .code = \" 3 \","},
{"lineNum":"  554","line":"        .check = (struct {"},
{"lineNum":"  555","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"4256","possible_hits":"2",},
{"lineNum":"  556","line":"                try expectEqual(ParseResult.Type.NoMatch, res.getType());","class":"lineCov","hits":"1","order":"4257","possible_hits":"1",},
{"lineNum":"  557","line":"            }"},
{"lineNum":"  558","line":"        }).check,"},
{"lineNum":"  559","line":"    }).run();","class":"lineCov","hits":"1","order":"4253","possible_hits":"1",},
{"lineNum":"  560","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-04 07:51:54", "instrumented" : 291, "covered" : 271,};
var merged_data = [];
