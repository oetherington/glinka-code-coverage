var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ParseTypeTestCase = struct {"},
{"lineNum":"   39","line":"    code: []const u8,"},
{"lineNum":"   40","line":"    check: fn (res: ParseResult) anyerror!void,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn run(self: ParseTypeTestCase) !void {","class":"lineCov","hits":"3","order":"3566","possible_hits":"3",},
{"lineNum":"   43","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"3567","possible_hits":"1",},
{"lineNum":"   44","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"3614","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"3568","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"3569","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const res = parser.parseType();","class":"lineCov","hits":"1","order":"3570","possible_hits":"1",},
{"lineNum":"   51","line":"        try self.check(res);","class":"linePartCov","hits":"1","order":"3597","possible_hits":"2",},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"pub fn parseInlineInterfaceType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3574","possible_hits":"1",},
{"lineNum":"   56","line":"    std.debug.assert(psr.lexer.token.ty == .LBrace);","class":"lineCov","hits":"1","order":"3575","possible_hits":"1",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3576","possible_hits":"1",},
{"lineNum":"   59","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3577","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3578","possible_hits":"1",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    var res = node.InterfaceTypeMemberList{};","class":"lineCov","hits":"1","order":"3579","possible_hits":"1",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    while (true) {","class":"lineCov","hits":"1","order":"3580","possible_hits":"1",},
{"lineNum":"   66","line":"        // TODO: Should strings be valid here as well as identifiers?"},
{"lineNum":"   67","line":"        if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"3581","possible_hits":"2",},
{"lineNum":"   68","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"                \"name for interface member\","},
{"lineNum":"   70","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"            );"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3582","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        if (psr.lexer.next().ty != .Colon)","class":"lineCov","hits":"2","order":"3583","possible_hits":"2",},
{"lineNum":"   76","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3584","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        const ty = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3585","possible_hits":"1",},
{"lineNum":"   81","line":"        if (!ty.isSuccess())","class":"lineCov","hits":"2","order":"3586","possible_hits":"2",},
{"lineNum":"   82","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                \"type for interface member\","},
{"lineNum":"   84","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            );"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        res.append(","class":"lineCov","hits":"1","order":"3588","possible_hits":"1",},
{"lineNum":"   88","line":"            alloc,"},
{"lineNum":"   89","line":"            node.InterfaceTypeMember.new(name, ty.Success),","class":"linePartCov","hits":"2","order":"3587","possible_hits":"3",},
{"lineNum":"   90","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3589","possible_hits":"2",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"3590","possible_hits":"1",},
{"lineNum":"   93","line":"            .Comma, .Semi => {"},
{"lineNum":"   94","line":"                if (psr.lexer.next().ty == .RBrace) {","class":"lineCov","hits":"1","order":"3591","possible_hits":"1",},
{"lineNum":"   95","line":"                    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3618","possible_hits":"1",},
{"lineNum":"   96","line":"                    break;","class":"lineCov","hits":"1","order":"3619","possible_hits":"1",},
{"lineNum":"   97","line":"                } else {"},
{"lineNum":"   98","line":"                    continue;","class":"lineCov","hits":"1","order":"3592","possible_hits":"1",},
{"lineNum":"   99","line":"                }"},
{"lineNum":"  100","line":"            },"},
{"lineNum":"  101","line":"            .RBrace => {"},
{"lineNum":"  102","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3593","possible_hits":"1",},
{"lineNum":"  103","line":"                break;"},
{"lineNum":"  104","line":"            },"},
{"lineNum":"  105","line":"            else => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                \"comma or left brace\","},
{"lineNum":"  107","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"            ),"},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3596","possible_hits":"1",},
{"lineNum":"  113","line":"        alloc,"},
{"lineNum":"  114","line":"        csr,"},
{"lineNum":"  115","line":"        .InterfaceType,"},
{"lineNum":"  116","line":"        node.InterfaceType{"},
{"lineNum":"  117","line":"            .name = null,","class":"lineCov","hits":"1","order":"3595","possible_hits":"1",},
{"lineNum":"  118","line":"            .members = res,","class":"lineCov","hits":"1","order":"3594","possible_hits":"1",},
{"lineNum":"  119","line":"        },"},
{"lineNum":"  120","line":"    ));"},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"test \"can parse inline interface types\" {","class":"lineCov","hits":"2","order":"3564","possible_hits":"2",},
{"lineNum":"  124","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3615","possible_hits":"1",},
{"lineNum":"  125","line":"        .code = \" { a: number, b: string } \","},
{"lineNum":"  126","line":"        .check = (struct {"},
{"lineNum":"  127","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3598","possible_hits":"2",},
{"lineNum":"  128","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3599","possible_hits":"1",},
{"lineNum":"  129","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3600","possible_hits":"2",},
{"lineNum":"  130","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"3604","possible_hits":"2",},
{"lineNum":"  131","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  132","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"3601","possible_hits":"3",},
{"lineNum":"  133","line":"                );"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"                try expect(res.Success.data.InterfaceType.name == null);","class":"lineCov","hits":"2","order":"3605","possible_hits":"2",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"                const members = res.Success.data.InterfaceType.members.items;","class":"linePartCov","hits":"2","order":"3606","possible_hits":"3",},
{"lineNum":"  138","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"3607","possible_hits":"2",},
{"lineNum":"  139","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"3608","possible_hits":"2",},
{"lineNum":"  140","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"3609","possible_hits":"2",},
{"lineNum":"  141","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3610","possible_hits":"2",},
{"lineNum":"  142","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"3611","possible_hits":"2",},
{"lineNum":"  143","line":"                try expectEqual(NodeType.TypeName, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"3612","possible_hits":"2",},
{"lineNum":"  144","line":"                try expectEqualStrings(\"string\", members[1].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3613","possible_hits":"2",},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":"        }).check,"},
{"lineNum":"  147","line":"    }).run();","class":"lineCov","hits":"1","order":"3565","possible_hits":"1",},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"test \"can parse inline interface types with semicolons and trailing comma\" {","class":"lineCov","hits":"2","order":"3616","possible_hits":"2",},
{"lineNum":"  151","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3634","possible_hits":"1",},
{"lineNum":"  152","line":"        .code = \" { a: number; b: string, } \","},
{"lineNum":"  153","line":"        .check = (struct {"},
{"lineNum":"  154","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3620","possible_hits":"2",},
{"lineNum":"  155","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3621","possible_hits":"1",},
{"lineNum":"  156","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3622","possible_hits":"2",},
{"lineNum":"  157","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"3624","possible_hits":"2",},
{"lineNum":"  158","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  159","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"3623","possible_hits":"3",},
{"lineNum":"  160","line":"                );"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"                try expect(res.Success.data.InterfaceType.name == null);","class":"lineCov","hits":"2","order":"3625","possible_hits":"2",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"                const members = res.Success.data.InterfaceType.members.items;","class":"linePartCov","hits":"2","order":"3626","possible_hits":"3",},
{"lineNum":"  165","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"3627","possible_hits":"2",},
{"lineNum":"  166","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"3628","possible_hits":"2",},
{"lineNum":"  167","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"3629","possible_hits":"2",},
{"lineNum":"  168","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3630","possible_hits":"2",},
{"lineNum":"  169","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"3631","possible_hits":"2",},
{"lineNum":"  170","line":"                try expectEqual(NodeType.TypeName, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"3632","possible_hits":"2",},
{"lineNum":"  171","line":"                try expectEqualStrings(\"string\", members[1].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3633","possible_hits":"2",},
{"lineNum":"  172","line":"            }"},
{"lineNum":"  173","line":"        }).check,"},
{"lineNum":"  174","line":"    }).run();","class":"lineCov","hits":"1","order":"3617","possible_hits":"1",},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"fn parseTypeOf(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3638","possible_hits":"1",},
{"lineNum":"  178","line":"    std.debug.assert(psr.lexer.token.ty == .TypeOf);","class":"lineCov","hits":"1","order":"3639","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3640","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3641","possible_hits":"1",},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    const res = psr.parseExpr();","class":"lineCov","hits":"1","order":"3642","possible_hits":"1",},
{"lineNum":"  185","line":"    return switch (res) {","class":"linePartCov","hits":"2","order":"3643","possible_hits":"4",},
{"lineNum":"  186","line":"        .Success => |nd| ParseResult.success(makeNode(","class":"lineCov","hits":"2","order":"3644","possible_hits":"2",},
{"lineNum":"  187","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3645","possible_hits":"1",},
{"lineNum":"  188","line":"            csr,"},
{"lineNum":"  189","line":"            NodeType.TypeOf,"},
{"lineNum":"  190","line":"            nd,","class":"lineCov","hits":"1","order":"3646","possible_hits":"1",},
{"lineNum":"  191","line":"        )),"},
{"lineNum":"  192","line":"        .Error => res,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"        .NoMatch => ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"            \"expression after \'typeof\'\","},
{"lineNum":"  195","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"        ),"},
{"lineNum":"  197","line":"    };"},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"test \"can parse typeof (in a type context)\" {","class":"lineCov","hits":"2","order":"3635","possible_hits":"2",},
{"lineNum":"  201","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3654","possible_hits":"1",},
{"lineNum":"  202","line":"        .code = \" typeof a \","},
{"lineNum":"  203","line":"        .check = (struct {"},
{"lineNum":"  204","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3647","possible_hits":"2",},
{"lineNum":"  205","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3648","possible_hits":"1",},
{"lineNum":"  206","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3649","possible_hits":"2",},
{"lineNum":"  207","line":"                try expectEqual(NodeType.TypeOf, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3650","possible_hits":"2",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"                const expr = res.Success.data.TypeOf;","class":"linePartCov","hits":"2","order":"3651","possible_hits":"3",},
{"lineNum":"  210","line":"                try expectEqual(NodeType.Ident, expr.getType());","class":"linePartCov","hits":"1","order":"3652","possible_hits":"2",},
{"lineNum":"  211","line":"                try expectEqualStrings(\"a\", expr.data.Ident);","class":"lineCov","hits":"2","order":"3653","possible_hits":"2",},
{"lineNum":"  212","line":"            }"},
{"lineNum":"  213","line":"        }).check,"},
{"lineNum":"  214","line":"    }).run();","class":"lineCov","hits":"1","order":"3636","possible_hits":"1",},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"fn parseTypeName(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3157","possible_hits":"1",},
{"lineNum":"  218","line":"    switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"3158","possible_hits":"1",},
{"lineNum":"  219","line":"        .Ident => {"},
{"lineNum":"  220","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":"  221","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3159","possible_hits":"1",},
{"lineNum":"  222","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3160","possible_hits":"1",},
{"lineNum":"  223","line":"                NodeType.TypeName,"},
{"lineNum":"  224","line":"                psr.lexer.token.data,","class":"lineCov","hits":"1","order":"3161","possible_hits":"1",},
{"lineNum":"  225","line":"            );"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3163","possible_hits":"1",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3164","possible_hits":"1",},
{"lineNum":"  230","line":"        },"},
{"lineNum":"  231","line":"        .Void => {"},
{"lineNum":"  232","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3667","possible_hits":"1",},
{"lineNum":"  233","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3665","possible_hits":"1",},
{"lineNum":"  234","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3666","possible_hits":"1",},
{"lineNum":"  235","line":"                NodeType.TypeName,"},
{"lineNum":"  236","line":"                \"void\","},
{"lineNum":"  237","line":"            );"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3668","possible_hits":"1",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3669","possible_hits":"1",},
{"lineNum":"  242","line":"        },"},
{"lineNum":"  243","line":"        .Null => {"},
{"lineNum":"  244","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3680","possible_hits":"1",},
{"lineNum":"  245","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3678","possible_hits":"1",},
{"lineNum":"  246","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3679","possible_hits":"1",},
{"lineNum":"  247","line":"                NodeType.TypeName,"},
{"lineNum":"  248","line":"                \"null\","},
{"lineNum":"  249","line":"            );"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3681","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3682","possible_hits":"1",},
{"lineNum":"  254","line":"        },"},
{"lineNum":"  255","line":"        .Undefined => {"},
{"lineNum":"  256","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3693","possible_hits":"1",},
{"lineNum":"  257","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3691","possible_hits":"1",},
{"lineNum":"  258","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3692","possible_hits":"1",},
{"lineNum":"  259","line":"                NodeType.TypeName,"},
{"lineNum":"  260","line":"                \"undefined\","},
{"lineNum":"  261","line":"            );"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3694","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3695","possible_hits":"1",},
{"lineNum":"  266","line":"        },"},
{"lineNum":"  267","line":"        .LParen => {"},
{"lineNum":"  268","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3762","possible_hits":"1",},
{"lineNum":"  269","line":"            const res = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3763","possible_hits":"1",},
{"lineNum":"  270","line":"            if (!res.isSuccess())","class":"lineCov","hits":"2","order":"3764","possible_hits":"2",},
{"lineNum":"  271","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"            if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3765","possible_hits":"2",},
{"lineNum":"  273","line":"                return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3766","possible_hits":"1",},
{"lineNum":"  275","line":"            return res;","class":"lineCov","hits":"1","order":"3767","possible_hits":"1",},
{"lineNum":"  276","line":"        },"},
{"lineNum":"  277","line":"        .LBrace => return parseInlineInterfaceType(psr),","class":"lineCov","hits":"1","order":"3573","possible_hits":"1",},
{"lineNum":"  278","line":"        .TypeOf => return parseTypeOf(psr),","class":"lineCov","hits":"1","order":"3637","possible_hits":"1",},
{"lineNum":"  279","line":"        else => return ParseResult.noMatch(null),","class":"lineCov","hits":"1","order":"3783","possible_hits":"1",},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":"}"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"test \"can parse type names\" {","class":"lineCov","hits":"2","order":"3655","possible_hits":"2",},
{"lineNum":"  284","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3662","possible_hits":"1",},
{"lineNum":"  285","line":"        .code = \" ATypeName \","},
{"lineNum":"  286","line":"        .check = (struct {"},
{"lineNum":"  287","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3657","possible_hits":"2",},
{"lineNum":"  288","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3658","possible_hits":"1",},
{"lineNum":"  289","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3659","possible_hits":"2",},
{"lineNum":"  290","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3660","possible_hits":"2",},
{"lineNum":"  291","line":"                try expectEqualStrings(\"ATypeName\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3661","possible_hits":"2",},
{"lineNum":"  292","line":"            }"},
{"lineNum":"  293","line":"        }).check,"},
{"lineNum":"  294","line":"    }).run();","class":"lineCov","hits":"1","order":"3656","possible_hits":"1",},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"test \"can parse void type\" {","class":"lineCov","hits":"2","order":"3663","possible_hits":"2",},
{"lineNum":"  298","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3675","possible_hits":"1",},
{"lineNum":"  299","line":"        .code = \" void \","},
{"lineNum":"  300","line":"        .check = (struct {"},
{"lineNum":"  301","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3670","possible_hits":"2",},
{"lineNum":"  302","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3671","possible_hits":"1",},
{"lineNum":"  303","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3672","possible_hits":"2",},
{"lineNum":"  304","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3673","possible_hits":"2",},
{"lineNum":"  305","line":"                try expectEqualStrings(\"void\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3674","possible_hits":"2",},
{"lineNum":"  306","line":"            }"},
{"lineNum":"  307","line":"        }).check,"},
{"lineNum":"  308","line":"    }).run();","class":"lineCov","hits":"1","order":"3664","possible_hits":"1",},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"test \"can parse null type\" {","class":"lineCov","hits":"2","order":"3676","possible_hits":"2",},
{"lineNum":"  312","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3688","possible_hits":"1",},
{"lineNum":"  313","line":"        .code = \" null \","},
{"lineNum":"  314","line":"        .check = (struct {"},
{"lineNum":"  315","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3683","possible_hits":"2",},
{"lineNum":"  316","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3684","possible_hits":"1",},
{"lineNum":"  317","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3685","possible_hits":"2",},
{"lineNum":"  318","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3686","possible_hits":"2",},
{"lineNum":"  319","line":"                try expectEqualStrings(\"null\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3687","possible_hits":"2",},
{"lineNum":"  320","line":"            }"},
{"lineNum":"  321","line":"        }).check,"},
{"lineNum":"  322","line":"    }).run();","class":"lineCov","hits":"1","order":"3677","possible_hits":"1",},
{"lineNum":"  323","line":"}"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"test \"can parse undefined type\" {","class":"lineCov","hits":"2","order":"3689","possible_hits":"2",},
{"lineNum":"  326","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3701","possible_hits":"1",},
{"lineNum":"  327","line":"        .code = \" undefined \","},
{"lineNum":"  328","line":"        .check = (struct {"},
{"lineNum":"  329","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3696","possible_hits":"2",},
{"lineNum":"  330","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3697","possible_hits":"1",},
{"lineNum":"  331","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3698","possible_hits":"2",},
{"lineNum":"  332","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3699","possible_hits":"2",},
{"lineNum":"  333","line":"                try expectEqualStrings(\"undefined\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3700","possible_hits":"2",},
{"lineNum":"  334","line":"            }"},
{"lineNum":"  335","line":"        }).check,"},
{"lineNum":"  336","line":"    }).run();","class":"lineCov","hits":"1","order":"3690","possible_hits":"1",},
{"lineNum":"  337","line":"}"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"fn parseArrayType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3155","possible_hits":"1",},
{"lineNum":"  340","line":"    var res = parseTypeName(psr);","class":"lineCov","hits":"1","order":"3156","possible_hits":"1",},
{"lineNum":"  341","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"3165","possible_hits":"2",},
{"lineNum":"  342","line":"        return res;","class":"lineCov","hits":"1","order":"3784","possible_hits":"1",},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    while (psr.lexer.token.ty == .LBrack) {","class":"lineCov","hits":"2","order":"3166","possible_hits":"2",},
{"lineNum":"  345","line":"        const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"3704","possible_hits":"1",},
{"lineNum":"  346","line":"        if (next.ty != .RBrack)","class":"lineCov","hits":"2","order":"3705","possible_hits":"2",},
{"lineNum":"  347","line":"            return ParseResult.expected(TokenType.RBrack, next);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3706","possible_hits":"1",},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"        res = ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3710","possible_hits":"1",},
{"lineNum":"  352","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3707","possible_hits":"1",},
{"lineNum":"  353","line":"            res.Success.csr,","class":"linePartCov","hits":"2","order":"3708","possible_hits":"3",},
{"lineNum":"  354","line":"            NodeType.ArrayType,"},
{"lineNum":"  355","line":"            res.Success,","class":"linePartCov","hits":"2","order":"3709","possible_hits":"3",},
{"lineNum":"  356","line":"        ));"},
{"lineNum":"  357","line":"    }"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    return res;","class":"lineCov","hits":"1","order":"3167","possible_hits":"1",},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"test \"can parse array type\" {","class":"lineCov","hits":"2","order":"3702","possible_hits":"2",},
{"lineNum":"  363","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3718","possible_hits":"1",},
{"lineNum":"  364","line":"        .code = \" number[] \","},
{"lineNum":"  365","line":"        .check = (struct {"},
{"lineNum":"  366","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3711","possible_hits":"2",},
{"lineNum":"  367","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3712","possible_hits":"1",},
{"lineNum":"  368","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3713","possible_hits":"2",},
{"lineNum":"  369","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3714","possible_hits":"2",},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"                const subtype = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3715","possible_hits":"3",},
{"lineNum":"  372","line":"                try expectEqual(NodeType.TypeName, subtype.getType());","class":"linePartCov","hits":"1","order":"3716","possible_hits":"2",},
{"lineNum":"  373","line":"                try expectEqualStrings(\"number\", subtype.data.TypeName);","class":"lineCov","hits":"2","order":"3717","possible_hits":"2",},
{"lineNum":"  374","line":"            }"},
{"lineNum":"  375","line":"        }).check,"},
{"lineNum":"  376","line":"    }).run();","class":"lineCov","hits":"1","order":"3703","possible_hits":"1",},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"test \"can parse multidimensional array type\" {","class":"lineCov","hits":"2","order":"3719","possible_hits":"2",},
{"lineNum":"  380","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3730","possible_hits":"1",},
{"lineNum":"  381","line":"        .code = \" string[][] \","},
{"lineNum":"  382","line":"        .check = (struct {"},
{"lineNum":"  383","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3721","possible_hits":"2",},
{"lineNum":"  384","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3722","possible_hits":"1",},
{"lineNum":"  385","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3723","possible_hits":"2",},
{"lineNum":"  386","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3724","possible_hits":"2",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"                const subtype1 = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3725","possible_hits":"3",},
{"lineNum":"  389","line":"                try expectEqual(NodeType.ArrayType, subtype1.getType());","class":"linePartCov","hits":"1","order":"3726","possible_hits":"2",},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"                const subtype2 = subtype1.data.ArrayType;","class":"linePartCov","hits":"2","order":"3727","possible_hits":"3",},
{"lineNum":"  392","line":"                try expectEqual(NodeType.TypeName, subtype2.getType());","class":"linePartCov","hits":"1","order":"3728","possible_hits":"2",},
{"lineNum":"  393","line":"                try expectEqualStrings(\"string\", subtype2.data.TypeName);","class":"lineCov","hits":"2","order":"3729","possible_hits":"2",},
{"lineNum":"  394","line":"            }"},
{"lineNum":"  395","line":"        }).check,"},
{"lineNum":"  396","line":"    }).run();","class":"lineCov","hits":"1","order":"3720","possible_hits":"1",},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"fn parseUnionType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3153","possible_hits":"1",},
{"lineNum":"  400","line":"    const res = parseArrayType(psr);","class":"lineCov","hits":"1","order":"3154","possible_hits":"1",},
{"lineNum":"  401","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .BitOr)","class":"lineCov","hits":"2","order":"3168","possible_hits":"2",},
{"lineNum":"  402","line":"        return res;","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3733","possible_hits":"1",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"    const un = makeNode(","class":"lineCov","hits":"1","order":"3735","possible_hits":"1",},
{"lineNum":"  407","line":"        alloc,"},
{"lineNum":"  408","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3734","possible_hits":"1",},
{"lineNum":"  409","line":"        NodeType.UnionType,"},
{"lineNum":"  410","line":"        node.NodeList{},"},
{"lineNum":"  411","line":"    );"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3736","possible_hits":"3",},
{"lineNum":"  414","line":"        alloc,"},
{"lineNum":"  415","line":"        res.Success,","class":"linePartCov","hits":"2","order":"3737","possible_hits":"3",},
{"lineNum":"  416","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3738","possible_hits":"2",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    while (psr.lexer.token.ty == .BitOr) {","class":"lineCov","hits":"2","order":"3739","possible_hits":"2",},
{"lineNum":"  419","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3740","possible_hits":"1",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        const right = parseArrayType(psr);","class":"lineCov","hits":"1","order":"3741","possible_hits":"1",},
{"lineNum":"  422","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"3742","possible_hits":"2",},
{"lineNum":"  423","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"        un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3743","possible_hits":"3",},
{"lineNum":"  426","line":"            alloc,"},
{"lineNum":"  427","line":"            right.Success,","class":"linePartCov","hits":"2","order":"3744","possible_hits":"3",},
{"lineNum":"  428","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3745","possible_hits":"2",},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    return ParseResult.success(un);","class":"lineCov","hits":"1","order":"3746","possible_hits":"1",},
{"lineNum":"  432","line":"}"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"test \"can parse union types\" {","class":"lineCov","hits":"2","order":"3731","possible_hits":"2",},
{"lineNum":"  435","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3759","possible_hits":"1",},
{"lineNum":"  436","line":"        .code = \" number | string | boolean \","},
{"lineNum":"  437","line":"        .check = (struct {"},
{"lineNum":"  438","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3747","possible_hits":"2",},
{"lineNum":"  439","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3748","possible_hits":"1",},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"                const un = res.Success;","class":"linePartCov","hits":"2","order":"3749","possible_hits":"3",},
{"lineNum":"  442","line":"                try expectEqual(NodeType.UnionType, un.getType());","class":"linePartCov","hits":"1","order":"3750","possible_hits":"2",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"                const tys = un.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3751","possible_hits":"3",},
{"lineNum":"  445","line":"                try expectEqual(@intCast(usize, 3), tys.len);","class":"linePartCov","hits":"1","order":"3752","possible_hits":"2",},
{"lineNum":"  446","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3753","possible_hits":"2",},
{"lineNum":"  447","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3754","possible_hits":"2",},
{"lineNum":"  448","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3755","possible_hits":"2",},
{"lineNum":"  449","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3756","possible_hits":"2",},
{"lineNum":"  450","line":"                try expectEqual(NodeType.TypeName, tys[2].getType());","class":"linePartCov","hits":"1","order":"3757","possible_hits":"2",},
{"lineNum":"  451","line":"                try expectEqualStrings(\"boolean\", tys[2].data.TypeName);","class":"linePartCov","hits":"1","order":"3758","possible_hits":"2",},
{"lineNum":"  452","line":"            }"},
{"lineNum":"  453","line":"        }).check,"},
{"lineNum":"  454","line":"    }).run();","class":"lineCov","hits":"1","order":"3732","possible_hits":"1",},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"fn parseTypeInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3151","possible_hits":"1",},
{"lineNum":"  458","line":"    return parseUnionType(psr);","class":"lineCov","hits":"1","order":"3152","possible_hits":"1",},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"pub fn parseType(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"3149","possible_hits":"1",},
{"lineNum":"  462","line":"    return parseTypeInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"3150","possible_hits":"1",},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"test \"can parse nested types\" {","class":"lineCov","hits":"2","order":"3760","possible_hits":"2",},
{"lineNum":"  466","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3780","possible_hits":"1",},
{"lineNum":"  467","line":"        .code = \" (number|string)[] \","},
{"lineNum":"  468","line":"        .check = (struct {"},
{"lineNum":"  469","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3768","possible_hits":"2",},
{"lineNum":"  470","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3769","possible_hits":"1",},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"3770","possible_hits":"3",},
{"lineNum":"  473","line":"                try expectEqual(NodeType.ArrayType, ty.getType());","class":"linePartCov","hits":"1","order":"3771","possible_hits":"2",},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"                const sub = ty.data.ArrayType;","class":"linePartCov","hits":"2","order":"3772","possible_hits":"3",},
{"lineNum":"  476","line":"                try expectEqual(NodeType.UnionType, sub.getType());","class":"linePartCov","hits":"1","order":"3773","possible_hits":"2",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"                const tys = sub.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3774","possible_hits":"3",},
{"lineNum":"  479","line":"                try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"3775","possible_hits":"2",},
{"lineNum":"  480","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3776","possible_hits":"2",},
{"lineNum":"  481","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3777","possible_hits":"2",},
{"lineNum":"  482","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3778","possible_hits":"2",},
{"lineNum":"  483","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3779","possible_hits":"2",},
{"lineNum":"  484","line":"            }"},
{"lineNum":"  485","line":"        }).check,"},
{"lineNum":"  486","line":"    }).run();","class":"lineCov","hits":"1","order":"3761","possible_hits":"1",},
{"lineNum":"  487","line":"}"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"test \"invalid types return NoMatch\" {","class":"lineCov","hits":"2","order":"3781","possible_hits":"2",},
{"lineNum":"  490","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3787","possible_hits":"1",},
{"lineNum":"  491","line":"        .code = \" 3 \","},
{"lineNum":"  492","line":"        .check = (struct {"},
{"lineNum":"  493","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3785","possible_hits":"2",},
{"lineNum":"  494","line":"                try expectEqual(ParseResult.Type.NoMatch, res.getType());","class":"lineCov","hits":"1","order":"3786","possible_hits":"1",},
{"lineNum":"  495","line":"            }"},
{"lineNum":"  496","line":"        }).check,"},
{"lineNum":"  497","line":"    }).run();","class":"lineCov","hits":"1","order":"3782","possible_hits":"1",},
{"lineNum":"  498","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-19 21:06:17", "instrumented" : 255, "covered" : 241,};
var merged_data = [];
