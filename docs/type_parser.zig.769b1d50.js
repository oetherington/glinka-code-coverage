var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ParseTypeTestCase = struct {"},
{"lineNum":"   39","line":"    code: []const u8,"},
{"lineNum":"   40","line":"    check: fn (res: ParseResult) anyerror!void,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn run(self: ParseTypeTestCase) !void {","class":"lineCov","hits":"3","order":"3253","possible_hits":"3",},
{"lineNum":"   43","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"3254","possible_hits":"1",},
{"lineNum":"   44","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"3297","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"3255","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"3256","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const res = parser.parseType();","class":"lineCov","hits":"1","order":"3257","possible_hits":"1",},
{"lineNum":"   51","line":"        try self.check(res);","class":"linePartCov","hits":"1","order":"3281","possible_hits":"2",},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"fn parseInterfaceType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3261","possible_hits":"1",},
{"lineNum":"   56","line":"    std.debug.assert(psr.lexer.token.ty == .LBrace);","class":"lineCov","hits":"1","order":"3262","possible_hits":"1",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3263","possible_hits":"1",},
{"lineNum":"   59","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3264","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3265","possible_hits":"1",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    var res = node.InterfaceType{};","class":"lineCov","hits":"1","order":"3266","possible_hits":"1",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    while (true) {","class":"lineCov","hits":"1","order":"3267","possible_hits":"1",},
{"lineNum":"   66","line":"        // TODO: Should strings be valid here as well as identifiers?"},
{"lineNum":"   67","line":"        if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"3268","possible_hits":"2",},
{"lineNum":"   68","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"                \"name for interface member\","},
{"lineNum":"   70","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"            );"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3269","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        if (psr.lexer.next().ty != .Colon)","class":"lineCov","hits":"2","order":"3270","possible_hits":"2",},
{"lineNum":"   76","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3271","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        const ty = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3272","possible_hits":"1",},
{"lineNum":"   81","line":"        if (!ty.isSuccess())","class":"lineCov","hits":"2","order":"3273","possible_hits":"2",},
{"lineNum":"   82","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                \"type for interface member\","},
{"lineNum":"   84","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            );"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        res.append(","class":"lineCov","hits":"1","order":"3275","possible_hits":"1",},
{"lineNum":"   88","line":"            alloc,"},
{"lineNum":"   89","line":"            node.InterfaceTypeMember.new(name, ty.Success),","class":"linePartCov","hits":"2","order":"3274","possible_hits":"3",},
{"lineNum":"   90","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3276","possible_hits":"2",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"3277","possible_hits":"1",},
{"lineNum":"   93","line":"            .Comma => if (psr.lexer.next().ty == .RBrace) break else continue,","class":"lineCov","hits":"1","order":"3278","possible_hits":"1",},
{"lineNum":"   94","line":"            .RBrace => {"},
{"lineNum":"   95","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3279","possible_hits":"1",},
{"lineNum":"   96","line":"                break;"},
{"lineNum":"   97","line":"            },"},
{"lineNum":"   98","line":"            else => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"                \"comma or left brace\","},
{"lineNum":"  100","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"            ),"},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    return ParseResult.success(makeNode(alloc, csr, .InterfaceType, res));","class":"lineCov","hits":"1","order":"3280","possible_hits":"1",},
{"lineNum":"  106","line":"}"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"test \"can parse interface types\" {","class":"lineCov","hits":"2","order":"3251","possible_hits":"2",},
{"lineNum":"  109","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3298","possible_hits":"1",},
{"lineNum":"  110","line":"        .code = \" { a: number, b: string } \","},
{"lineNum":"  111","line":"        .check = (struct {"},
{"lineNum":"  112","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3282","possible_hits":"2",},
{"lineNum":"  113","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3283","possible_hits":"1",},
{"lineNum":"  114","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3284","possible_hits":"2",},
{"lineNum":"  115","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"3288","possible_hits":"2",},
{"lineNum":"  116","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  117","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"3285","possible_hits":"3",},
{"lineNum":"  118","line":"                );"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"                const members = res.Success.data.InterfaceType.items;","class":"linePartCov","hits":"2","order":"3289","possible_hits":"3",},
{"lineNum":"  121","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"3290","possible_hits":"2",},
{"lineNum":"  122","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"3291","possible_hits":"2",},
{"lineNum":"  123","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"3292","possible_hits":"2",},
{"lineNum":"  124","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3293","possible_hits":"2",},
{"lineNum":"  125","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"3294","possible_hits":"2",},
{"lineNum":"  126","line":"                try expectEqual(NodeType.TypeName, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"3295","possible_hits":"2",},
{"lineNum":"  127","line":"                try expectEqualStrings(\"string\", members[1].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3296","possible_hits":"2",},
{"lineNum":"  128","line":"            }"},
{"lineNum":"  129","line":"        }).check,"},
{"lineNum":"  130","line":"    }).run();","class":"lineCov","hits":"1","order":"3252","possible_hits":"1",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"test \"can parse interface types with dangling comma\" {","class":"lineCov","hits":"2","order":"3299","possible_hits":"2",},
{"lineNum":"  134","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3311","possible_hits":"1",},
{"lineNum":"  135","line":"        .code = \" { a: number, } \","},
{"lineNum":"  136","line":"        .check = (struct {"},
{"lineNum":"  137","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3301","possible_hits":"2",},
{"lineNum":"  138","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3302","possible_hits":"1",},
{"lineNum":"  139","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3303","possible_hits":"2",},
{"lineNum":"  140","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"3305","possible_hits":"2",},
{"lineNum":"  141","line":"                    NodeType.InterfaceType,"},
{"lineNum":"  142","line":"                    res.Success.data.getType(),","class":"linePartCov","hits":"2","order":"3304","possible_hits":"3",},
{"lineNum":"  143","line":"                );"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"                const members = res.Success.data.InterfaceType.items;","class":"linePartCov","hits":"2","order":"3306","possible_hits":"3",},
{"lineNum":"  146","line":"                try expectEqual(@intCast(usize, 1), members.len);","class":"linePartCov","hits":"1","order":"3307","possible_hits":"2",},
{"lineNum":"  147","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"3308","possible_hits":"2",},
{"lineNum":"  148","line":"                try expectEqual(NodeType.TypeName, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"3309","possible_hits":"2",},
{"lineNum":"  149","line":"                try expectEqualStrings(\"number\", members[0].ty.data.TypeName);","class":"linePartCov","hits":"1","order":"3310","possible_hits":"2",},
{"lineNum":"  150","line":"            }"},
{"lineNum":"  151","line":"        }).check,"},
{"lineNum":"  152","line":"    }).run();","class":"lineCov","hits":"1","order":"3300","possible_hits":"1",},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"fn parseTypeName(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2893","possible_hits":"1",},
{"lineNum":"  156","line":"    switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"2894","possible_hits":"1",},
{"lineNum":"  157","line":"        .Ident => {"},
{"lineNum":"  158","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"2898","possible_hits":"1",},
{"lineNum":"  159","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2895","possible_hits":"1",},
{"lineNum":"  160","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2896","possible_hits":"1",},
{"lineNum":"  161","line":"                NodeType.TypeName,"},
{"lineNum":"  162","line":"                psr.lexer.token.data,","class":"lineCov","hits":"1","order":"2897","possible_hits":"1",},
{"lineNum":"  163","line":"            );"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2899","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2900","possible_hits":"1",},
{"lineNum":"  168","line":"        },"},
{"lineNum":"  169","line":"        .Void => {"},
{"lineNum":"  170","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3324","possible_hits":"1",},
{"lineNum":"  171","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3322","possible_hits":"1",},
{"lineNum":"  172","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3323","possible_hits":"1",},
{"lineNum":"  173","line":"                NodeType.TypeName,"},
{"lineNum":"  174","line":"                \"void\","},
{"lineNum":"  175","line":"            );"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3325","possible_hits":"1",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3326","possible_hits":"1",},
{"lineNum":"  180","line":"        },"},
{"lineNum":"  181","line":"        .Null => {"},
{"lineNum":"  182","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3337","possible_hits":"1",},
{"lineNum":"  183","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3335","possible_hits":"1",},
{"lineNum":"  184","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3336","possible_hits":"1",},
{"lineNum":"  185","line":"                NodeType.TypeName,"},
{"lineNum":"  186","line":"                \"null\","},
{"lineNum":"  187","line":"            );"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3338","possible_hits":"1",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3339","possible_hits":"1",},
{"lineNum":"  192","line":"        },"},
{"lineNum":"  193","line":"        .Undefined => {"},
{"lineNum":"  194","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3350","possible_hits":"1",},
{"lineNum":"  195","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3348","possible_hits":"1",},
{"lineNum":"  196","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3349","possible_hits":"1",},
{"lineNum":"  197","line":"                NodeType.TypeName,"},
{"lineNum":"  198","line":"                \"undefined\","},
{"lineNum":"  199","line":"            );"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3351","possible_hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3352","possible_hits":"1",},
{"lineNum":"  204","line":"        },"},
{"lineNum":"  205","line":"        .LParen => {"},
{"lineNum":"  206","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3419","possible_hits":"1",},
{"lineNum":"  207","line":"            const res = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3420","possible_hits":"1",},
{"lineNum":"  208","line":"            if (!res.isSuccess())","class":"lineCov","hits":"2","order":"3421","possible_hits":"2",},
{"lineNum":"  209","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"            if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3422","possible_hits":"2",},
{"lineNum":"  211","line":"                return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3423","possible_hits":"1",},
{"lineNum":"  213","line":"            return res;","class":"lineCov","hits":"1","order":"3424","possible_hits":"1",},
{"lineNum":"  214","line":"        },"},
{"lineNum":"  215","line":"        .LBrace => return parseInterfaceType(psr),","class":"lineCov","hits":"1","order":"3260","possible_hits":"1",},
{"lineNum":"  216","line":"        else => return ParseResult.noMatch(null),","class":"lineCov","hits":"1","order":"3440","possible_hits":"1",},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"test \"can parse type names\" {","class":"lineCov","hits":"2","order":"3312","possible_hits":"2",},
{"lineNum":"  221","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3319","possible_hits":"1",},
{"lineNum":"  222","line":"        .code = \" ATypeName \","},
{"lineNum":"  223","line":"        .check = (struct {"},
{"lineNum":"  224","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3314","possible_hits":"2",},
{"lineNum":"  225","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3315","possible_hits":"1",},
{"lineNum":"  226","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3316","possible_hits":"2",},
{"lineNum":"  227","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3317","possible_hits":"2",},
{"lineNum":"  228","line":"                try expectEqualStrings(\"ATypeName\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3318","possible_hits":"2",},
{"lineNum":"  229","line":"            }"},
{"lineNum":"  230","line":"        }).check,"},
{"lineNum":"  231","line":"    }).run();","class":"lineCov","hits":"1","order":"3313","possible_hits":"1",},
{"lineNum":"  232","line":"}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"test \"can parse void type\" {","class":"lineCov","hits":"2","order":"3320","possible_hits":"2",},
{"lineNum":"  235","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3332","possible_hits":"1",},
{"lineNum":"  236","line":"        .code = \" void \","},
{"lineNum":"  237","line":"        .check = (struct {"},
{"lineNum":"  238","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3327","possible_hits":"2",},
{"lineNum":"  239","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3328","possible_hits":"1",},
{"lineNum":"  240","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3329","possible_hits":"2",},
{"lineNum":"  241","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3330","possible_hits":"2",},
{"lineNum":"  242","line":"                try expectEqualStrings(\"void\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3331","possible_hits":"2",},
{"lineNum":"  243","line":"            }"},
{"lineNum":"  244","line":"        }).check,"},
{"lineNum":"  245","line":"    }).run();","class":"lineCov","hits":"1","order":"3321","possible_hits":"1",},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"test \"can parse null type\" {","class":"lineCov","hits":"2","order":"3333","possible_hits":"2",},
{"lineNum":"  249","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3345","possible_hits":"1",},
{"lineNum":"  250","line":"        .code = \" null \","},
{"lineNum":"  251","line":"        .check = (struct {"},
{"lineNum":"  252","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3340","possible_hits":"2",},
{"lineNum":"  253","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3341","possible_hits":"1",},
{"lineNum":"  254","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3342","possible_hits":"2",},
{"lineNum":"  255","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3343","possible_hits":"2",},
{"lineNum":"  256","line":"                try expectEqualStrings(\"null\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3344","possible_hits":"2",},
{"lineNum":"  257","line":"            }"},
{"lineNum":"  258","line":"        }).check,"},
{"lineNum":"  259","line":"    }).run();","class":"lineCov","hits":"1","order":"3334","possible_hits":"1",},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"test \"can parse undefined type\" {","class":"lineCov","hits":"2","order":"3346","possible_hits":"2",},
{"lineNum":"  263","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3358","possible_hits":"1",},
{"lineNum":"  264","line":"        .code = \" undefined \","},
{"lineNum":"  265","line":"        .check = (struct {"},
{"lineNum":"  266","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3353","possible_hits":"2",},
{"lineNum":"  267","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3354","possible_hits":"1",},
{"lineNum":"  268","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3355","possible_hits":"2",},
{"lineNum":"  269","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3356","possible_hits":"2",},
{"lineNum":"  270","line":"                try expectEqualStrings(\"undefined\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3357","possible_hits":"2",},
{"lineNum":"  271","line":"            }"},
{"lineNum":"  272","line":"        }).check,"},
{"lineNum":"  273","line":"    }).run();","class":"lineCov","hits":"1","order":"3347","possible_hits":"1",},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"fn parseArrayType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2891","possible_hits":"1",},
{"lineNum":"  277","line":"    var res = parseTypeName(psr);","class":"lineCov","hits":"1","order":"2892","possible_hits":"1",},
{"lineNum":"  278","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"2901","possible_hits":"2",},
{"lineNum":"  279","line":"        return res;","class":"lineCov","hits":"1","order":"3441","possible_hits":"1",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    while (psr.lexer.token.ty == .LBrack) {","class":"lineCov","hits":"2","order":"2902","possible_hits":"2",},
{"lineNum":"  282","line":"        const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"3361","possible_hits":"1",},
{"lineNum":"  283","line":"        if (next.ty != .RBrack)","class":"lineCov","hits":"2","order":"3362","possible_hits":"2",},
{"lineNum":"  284","line":"            return ParseResult.expected(TokenType.RBrack, next);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3363","possible_hits":"1",},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        res = ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3367","possible_hits":"1",},
{"lineNum":"  289","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3364","possible_hits":"1",},
{"lineNum":"  290","line":"            res.Success.csr,","class":"linePartCov","hits":"2","order":"3365","possible_hits":"3",},
{"lineNum":"  291","line":"            NodeType.ArrayType,"},
{"lineNum":"  292","line":"            res.Success,","class":"linePartCov","hits":"2","order":"3366","possible_hits":"3",},
{"lineNum":"  293","line":"        ));"},
{"lineNum":"  294","line":"    }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    return res;","class":"lineCov","hits":"1","order":"2903","possible_hits":"1",},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"test \"can parse array type\" {","class":"lineCov","hits":"2","order":"3359","possible_hits":"2",},
{"lineNum":"  300","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3375","possible_hits":"1",},
{"lineNum":"  301","line":"        .code = \" number[] \","},
{"lineNum":"  302","line":"        .check = (struct {"},
{"lineNum":"  303","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3368","possible_hits":"2",},
{"lineNum":"  304","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3369","possible_hits":"1",},
{"lineNum":"  305","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3370","possible_hits":"2",},
{"lineNum":"  306","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3371","possible_hits":"2",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"                const subtype = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3372","possible_hits":"3",},
{"lineNum":"  309","line":"                try expectEqual(NodeType.TypeName, subtype.getType());","class":"linePartCov","hits":"1","order":"3373","possible_hits":"2",},
{"lineNum":"  310","line":"                try expectEqualStrings(\"number\", subtype.data.TypeName);","class":"lineCov","hits":"2","order":"3374","possible_hits":"2",},
{"lineNum":"  311","line":"            }"},
{"lineNum":"  312","line":"        }).check,"},
{"lineNum":"  313","line":"    }).run();","class":"lineCov","hits":"1","order":"3360","possible_hits":"1",},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"test \"can parse multidimensional array type\" {","class":"lineCov","hits":"2","order":"3376","possible_hits":"2",},
{"lineNum":"  317","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3387","possible_hits":"1",},
{"lineNum":"  318","line":"        .code = \" string[][] \","},
{"lineNum":"  319","line":"        .check = (struct {"},
{"lineNum":"  320","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3378","possible_hits":"2",},
{"lineNum":"  321","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3379","possible_hits":"1",},
{"lineNum":"  322","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3380","possible_hits":"2",},
{"lineNum":"  323","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3381","possible_hits":"2",},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"                const subtype1 = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3382","possible_hits":"3",},
{"lineNum":"  326","line":"                try expectEqual(NodeType.ArrayType, subtype1.getType());","class":"linePartCov","hits":"1","order":"3383","possible_hits":"2",},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"                const subtype2 = subtype1.data.ArrayType;","class":"linePartCov","hits":"2","order":"3384","possible_hits":"3",},
{"lineNum":"  329","line":"                try expectEqual(NodeType.TypeName, subtype2.getType());","class":"linePartCov","hits":"1","order":"3385","possible_hits":"2",},
{"lineNum":"  330","line":"                try expectEqualStrings(\"string\", subtype2.data.TypeName);","class":"lineCov","hits":"2","order":"3386","possible_hits":"2",},
{"lineNum":"  331","line":"            }"},
{"lineNum":"  332","line":"        }).check,"},
{"lineNum":"  333","line":"    }).run();","class":"lineCov","hits":"1","order":"3377","possible_hits":"1",},
{"lineNum":"  334","line":"}"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"fn parseUnionType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2889","possible_hits":"1",},
{"lineNum":"  337","line":"    const res = parseArrayType(psr);","class":"lineCov","hits":"1","order":"2890","possible_hits":"1",},
{"lineNum":"  338","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .BitOr)","class":"lineCov","hits":"2","order":"2904","possible_hits":"2",},
{"lineNum":"  339","line":"        return res;","class":"lineCov","hits":"1","order":"2905","possible_hits":"1",},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3390","possible_hits":"1",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    const un = makeNode(","class":"lineCov","hits":"1","order":"3392","possible_hits":"1",},
{"lineNum":"  344","line":"        alloc,"},
{"lineNum":"  345","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3391","possible_hits":"1",},
{"lineNum":"  346","line":"        NodeType.UnionType,"},
{"lineNum":"  347","line":"        node.NodeList{},"},
{"lineNum":"  348","line":"    );"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3393","possible_hits":"3",},
{"lineNum":"  351","line":"        alloc,"},
{"lineNum":"  352","line":"        res.Success,","class":"linePartCov","hits":"2","order":"3394","possible_hits":"3",},
{"lineNum":"  353","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3395","possible_hits":"2",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    while (psr.lexer.token.ty == .BitOr) {","class":"lineCov","hits":"2","order":"3396","possible_hits":"2",},
{"lineNum":"  356","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3397","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        const right = parseArrayType(psr);","class":"lineCov","hits":"1","order":"3398","possible_hits":"1",},
{"lineNum":"  359","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"3399","possible_hits":"2",},
{"lineNum":"  360","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"        un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3400","possible_hits":"3",},
{"lineNum":"  363","line":"            alloc,"},
{"lineNum":"  364","line":"            right.Success,","class":"linePartCov","hits":"2","order":"3401","possible_hits":"3",},
{"lineNum":"  365","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3402","possible_hits":"2",},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    return ParseResult.success(un);","class":"lineCov","hits":"1","order":"3403","possible_hits":"1",},
{"lineNum":"  369","line":"}"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"test \"can parse union types\" {","class":"lineCov","hits":"2","order":"3388","possible_hits":"2",},
{"lineNum":"  372","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3416","possible_hits":"1",},
{"lineNum":"  373","line":"        .code = \" number | string | boolean \","},
{"lineNum":"  374","line":"        .check = (struct {"},
{"lineNum":"  375","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3404","possible_hits":"2",},
{"lineNum":"  376","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3405","possible_hits":"1",},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"                const un = res.Success;","class":"linePartCov","hits":"2","order":"3406","possible_hits":"3",},
{"lineNum":"  379","line":"                try expectEqual(NodeType.UnionType, un.getType());","class":"linePartCov","hits":"1","order":"3407","possible_hits":"2",},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"                const tys = un.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3408","possible_hits":"3",},
{"lineNum":"  382","line":"                try expectEqual(@intCast(usize, 3), tys.len);","class":"linePartCov","hits":"1","order":"3409","possible_hits":"2",},
{"lineNum":"  383","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3410","possible_hits":"2",},
{"lineNum":"  384","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3411","possible_hits":"2",},
{"lineNum":"  385","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3412","possible_hits":"2",},
{"lineNum":"  386","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3413","possible_hits":"2",},
{"lineNum":"  387","line":"                try expectEqual(NodeType.TypeName, tys[2].getType());","class":"linePartCov","hits":"1","order":"3414","possible_hits":"2",},
{"lineNum":"  388","line":"                try expectEqualStrings(\"boolean\", tys[2].data.TypeName);","class":"linePartCov","hits":"1","order":"3415","possible_hits":"2",},
{"lineNum":"  389","line":"            }"},
{"lineNum":"  390","line":"        }).check,"},
{"lineNum":"  391","line":"    }).run();","class":"lineCov","hits":"1","order":"3389","possible_hits":"1",},
{"lineNum":"  392","line":"}"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"fn parseTypeInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2887","possible_hits":"1",},
{"lineNum":"  395","line":"    return parseUnionType(psr);","class":"lineCov","hits":"1","order":"2888","possible_hits":"1",},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"pub fn parseType(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"2885","possible_hits":"1",},
{"lineNum":"  399","line":"    return parseTypeInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"2886","possible_hits":"1",},
{"lineNum":"  400","line":"}"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"test \"can parse nested types\" {","class":"lineCov","hits":"2","order":"3417","possible_hits":"2",},
{"lineNum":"  403","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3437","possible_hits":"1",},
{"lineNum":"  404","line":"        .code = \" (number|string)[] \","},
{"lineNum":"  405","line":"        .check = (struct {"},
{"lineNum":"  406","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3425","possible_hits":"2",},
{"lineNum":"  407","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3426","possible_hits":"1",},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"3427","possible_hits":"3",},
{"lineNum":"  410","line":"                try expectEqual(NodeType.ArrayType, ty.getType());","class":"linePartCov","hits":"1","order":"3428","possible_hits":"2",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"                const sub = ty.data.ArrayType;","class":"linePartCov","hits":"2","order":"3429","possible_hits":"3",},
{"lineNum":"  413","line":"                try expectEqual(NodeType.UnionType, sub.getType());","class":"linePartCov","hits":"1","order":"3430","possible_hits":"2",},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"                const tys = sub.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3431","possible_hits":"3",},
{"lineNum":"  416","line":"                try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"3432","possible_hits":"2",},
{"lineNum":"  417","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3433","possible_hits":"2",},
{"lineNum":"  418","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3434","possible_hits":"2",},
{"lineNum":"  419","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3435","possible_hits":"2",},
{"lineNum":"  420","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3436","possible_hits":"2",},
{"lineNum":"  421","line":"            }"},
{"lineNum":"  422","line":"        }).check,"},
{"lineNum":"  423","line":"    }).run();","class":"lineCov","hits":"1","order":"3418","possible_hits":"1",},
{"lineNum":"  424","line":"}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"test \"invalid types return NoMatch\" {","class":"lineCov","hits":"2","order":"3438","possible_hits":"2",},
{"lineNum":"  427","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3444","possible_hits":"1",},
{"lineNum":"  428","line":"        .code = \" 3 \","},
{"lineNum":"  429","line":"        .check = (struct {"},
{"lineNum":"  430","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3442","possible_hits":"2",},
{"lineNum":"  431","line":"                try expectEqual(ParseResult.Type.NoMatch, res.getType());","class":"lineCov","hits":"1","order":"3443","possible_hits":"1",},
{"lineNum":"  432","line":"            }"},
{"lineNum":"  433","line":"        }).check,"},
{"lineNum":"  434","line":"    }).run();","class":"lineCov","hits":"1","order":"3439","possible_hits":"1",},
{"lineNum":"  435","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-09 12:42:29", "instrumented" : 222, "covered" : 211,};
var merged_data = [];
