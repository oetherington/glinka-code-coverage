var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ParseTypeTestCase = struct {"},
{"lineNum":"   39","line":"    code: []const u8,"},
{"lineNum":"   40","line":"    check: fn (res: ParseResult) anyerror!void,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn run(self: ParseTypeTestCase) !void {","class":"lineCov","hits":"3","order":"3028","possible_hits":"3",},
{"lineNum":"   43","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"3029","possible_hits":"1",},
{"lineNum":"   44","line":"        defer arena.deinit();","class":"linePartCov","hits":"1","order":"3043","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"3030","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"3031","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const res = parser.parseType();","class":"lineCov","hits":"1","order":"3032","possible_hits":"1",},
{"lineNum":"   51","line":"        try self.check(res);","class":"linePartCov","hits":"1","order":"3035","possible_hits":"2",},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"fn parseTypeName(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2668","possible_hits":"1",},
{"lineNum":"   56","line":"    switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"2669","possible_hits":"1",},
{"lineNum":"   57","line":"        .Ident => {"},
{"lineNum":"   58","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"2673","possible_hits":"1",},
{"lineNum":"   59","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2670","possible_hits":"1",},
{"lineNum":"   60","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2671","possible_hits":"1",},
{"lineNum":"   61","line":"                NodeType.TypeName,"},
{"lineNum":"   62","line":"                psr.lexer.token.data,","class":"lineCov","hits":"1","order":"2672","possible_hits":"1",},
{"lineNum":"   63","line":"            );"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2674","possible_hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2675","possible_hits":"1",},
{"lineNum":"   68","line":"        },"},
{"lineNum":"   69","line":"        .Void => {"},
{"lineNum":"   70","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3049","possible_hits":"1",},
{"lineNum":"   71","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3047","possible_hits":"1",},
{"lineNum":"   72","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3048","possible_hits":"1",},
{"lineNum":"   73","line":"                NodeType.TypeName,"},
{"lineNum":"   74","line":"                \"void\","},
{"lineNum":"   75","line":"            );"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3050","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3051","possible_hits":"1",},
{"lineNum":"   80","line":"        },"},
{"lineNum":"   81","line":"        .Null => {"},
{"lineNum":"   82","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3062","possible_hits":"1",},
{"lineNum":"   83","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3060","possible_hits":"1",},
{"lineNum":"   84","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3061","possible_hits":"1",},
{"lineNum":"   85","line":"                NodeType.TypeName,"},
{"lineNum":"   86","line":"                \"null\","},
{"lineNum":"   87","line":"            );"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3063","possible_hits":"1",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3064","possible_hits":"1",},
{"lineNum":"   92","line":"        },"},
{"lineNum":"   93","line":"        .Undefined => {"},
{"lineNum":"   94","line":"            const nd = makeNode(","class":"lineCov","hits":"1","order":"3075","possible_hits":"1",},
{"lineNum":"   95","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3073","possible_hits":"1",},
{"lineNum":"   96","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3074","possible_hits":"1",},
{"lineNum":"   97","line":"                NodeType.TypeName,"},
{"lineNum":"   98","line":"                \"undefined\","},
{"lineNum":"   99","line":"            );"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3076","possible_hits":"1",},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"            return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3077","possible_hits":"1",},
{"lineNum":"  104","line":"        },"},
{"lineNum":"  105","line":"        .LParen => {"},
{"lineNum":"  106","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3144","possible_hits":"1",},
{"lineNum":"  107","line":"            const res = parseTypeInternal(psr);","class":"lineCov","hits":"1","order":"3145","possible_hits":"1",},
{"lineNum":"  108","line":"            if (!res.isSuccess())","class":"lineCov","hits":"2","order":"3146","possible_hits":"2",},
{"lineNum":"  109","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3147","possible_hits":"2",},
{"lineNum":"  111","line":"                return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3148","possible_hits":"1",},
{"lineNum":"  113","line":"            return res;","class":"lineCov","hits":"1","order":"3149","possible_hits":"1",},
{"lineNum":"  114","line":"        },"},
{"lineNum":"  115","line":"        else => return ParseResult.noMatch(null),","class":"lineCov","hits":"1","order":"3165","possible_hits":"1",},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"test \"can parse type names\" {","class":"lineCov","hits":"2","order":"3026","possible_hits":"2",},
{"lineNum":"  120","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3044","possible_hits":"1",},
{"lineNum":"  121","line":"        .code = \" ATypeName \","},
{"lineNum":"  122","line":"        .check = (struct {"},
{"lineNum":"  123","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3036","possible_hits":"2",},
{"lineNum":"  124","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3037","possible_hits":"1",},
{"lineNum":"  125","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3038","possible_hits":"2",},
{"lineNum":"  126","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3039","possible_hits":"2",},
{"lineNum":"  127","line":"                try expectEqualStrings(\"ATypeName\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3042","possible_hits":"2",},
{"lineNum":"  128","line":"            }"},
{"lineNum":"  129","line":"        }).check,"},
{"lineNum":"  130","line":"    }).run();","class":"lineCov","hits":"1","order":"3027","possible_hits":"1",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"test \"can parse void type\" {","class":"lineCov","hits":"2","order":"3045","possible_hits":"2",},
{"lineNum":"  134","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3057","possible_hits":"1",},
{"lineNum":"  135","line":"        .code = \" void \","},
{"lineNum":"  136","line":"        .check = (struct {"},
{"lineNum":"  137","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3052","possible_hits":"2",},
{"lineNum":"  138","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3053","possible_hits":"1",},
{"lineNum":"  139","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3054","possible_hits":"2",},
{"lineNum":"  140","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3055","possible_hits":"2",},
{"lineNum":"  141","line":"                try expectEqualStrings(\"void\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3056","possible_hits":"2",},
{"lineNum":"  142","line":"            }"},
{"lineNum":"  143","line":"        }).check,"},
{"lineNum":"  144","line":"    }).run();","class":"lineCov","hits":"1","order":"3046","possible_hits":"1",},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"test \"can parse null type\" {","class":"lineCov","hits":"2","order":"3058","possible_hits":"2",},
{"lineNum":"  148","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3070","possible_hits":"1",},
{"lineNum":"  149","line":"        .code = \" null \","},
{"lineNum":"  150","line":"        .check = (struct {"},
{"lineNum":"  151","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3065","possible_hits":"2",},
{"lineNum":"  152","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3066","possible_hits":"1",},
{"lineNum":"  153","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3067","possible_hits":"2",},
{"lineNum":"  154","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3068","possible_hits":"2",},
{"lineNum":"  155","line":"                try expectEqualStrings(\"null\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3069","possible_hits":"2",},
{"lineNum":"  156","line":"            }"},
{"lineNum":"  157","line":"        }).check,"},
{"lineNum":"  158","line":"    }).run();","class":"lineCov","hits":"1","order":"3059","possible_hits":"1",},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"test \"can parse undefined type\" {","class":"lineCov","hits":"2","order":"3071","possible_hits":"2",},
{"lineNum":"  162","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3083","possible_hits":"1",},
{"lineNum":"  163","line":"        .code = \" undefined \","},
{"lineNum":"  164","line":"        .check = (struct {"},
{"lineNum":"  165","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3078","possible_hits":"2",},
{"lineNum":"  166","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3079","possible_hits":"1",},
{"lineNum":"  167","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3080","possible_hits":"2",},
{"lineNum":"  168","line":"                try expectEqual(NodeType.TypeName, res.Success.data.getType());","class":"lineCov","hits":"2","order":"3081","possible_hits":"2",},
{"lineNum":"  169","line":"                try expectEqualStrings(\"undefined\", res.Success.data.TypeName);","class":"lineCov","hits":"2","order":"3082","possible_hits":"2",},
{"lineNum":"  170","line":"            }"},
{"lineNum":"  171","line":"        }).check,"},
{"lineNum":"  172","line":"    }).run();","class":"lineCov","hits":"1","order":"3072","possible_hits":"1",},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"fn parseArrayType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2666","possible_hits":"1",},
{"lineNum":"  176","line":"    var res = parseTypeName(psr);","class":"lineCov","hits":"1","order":"2667","possible_hits":"1",},
{"lineNum":"  177","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"2676","possible_hits":"2",},
{"lineNum":"  178","line":"        return res;","class":"lineCov","hits":"1","order":"3166","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    while (psr.lexer.token.ty == .LBrack) {","class":"lineCov","hits":"2","order":"2677","possible_hits":"2",},
{"lineNum":"  181","line":"        const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"3086","possible_hits":"1",},
{"lineNum":"  182","line":"        if (next.ty != .RBrack)","class":"lineCov","hits":"2","order":"3087","possible_hits":"2",},
{"lineNum":"  183","line":"            return ParseResult.expected(TokenType.RBrack, next);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3088","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        res = ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3092","possible_hits":"1",},
{"lineNum":"  188","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3089","possible_hits":"1",},
{"lineNum":"  189","line":"            res.Success.csr,","class":"linePartCov","hits":"2","order":"3090","possible_hits":"3",},
{"lineNum":"  190","line":"            NodeType.ArrayType,"},
{"lineNum":"  191","line":"            res.Success,","class":"linePartCov","hits":"2","order":"3091","possible_hits":"3",},
{"lineNum":"  192","line":"        ));"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    return res;","class":"lineCov","hits":"1","order":"2678","possible_hits":"1",},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"test \"can parse array type\" {","class":"lineCov","hits":"2","order":"3084","possible_hits":"2",},
{"lineNum":"  199","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3100","possible_hits":"1",},
{"lineNum":"  200","line":"        .code = \" number[] \","},
{"lineNum":"  201","line":"        .check = (struct {"},
{"lineNum":"  202","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3093","possible_hits":"2",},
{"lineNum":"  203","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3094","possible_hits":"1",},
{"lineNum":"  204","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3095","possible_hits":"2",},
{"lineNum":"  205","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3096","possible_hits":"2",},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"                const subtype = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3097","possible_hits":"3",},
{"lineNum":"  208","line":"                try expectEqual(NodeType.TypeName, subtype.getType());","class":"linePartCov","hits":"1","order":"3098","possible_hits":"2",},
{"lineNum":"  209","line":"                try expectEqualStrings(\"number\", subtype.data.TypeName);","class":"lineCov","hits":"2","order":"3099","possible_hits":"2",},
{"lineNum":"  210","line":"            }"},
{"lineNum":"  211","line":"        }).check,"},
{"lineNum":"  212","line":"    }).run();","class":"lineCov","hits":"1","order":"3085","possible_hits":"1",},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"test \"can parse multidimensional array type\" {","class":"lineCov","hits":"2","order":"3101","possible_hits":"2",},
{"lineNum":"  216","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3112","possible_hits":"1",},
{"lineNum":"  217","line":"        .code = \" string[][] \","},
{"lineNum":"  218","line":"        .check = (struct {"},
{"lineNum":"  219","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3103","possible_hits":"2",},
{"lineNum":"  220","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3104","possible_hits":"1",},
{"lineNum":"  221","line":"                try expectEqual(Cursor.new(1, 2), res.Success.csr);","class":"lineCov","hits":"2","order":"3105","possible_hits":"2",},
{"lineNum":"  222","line":"                try expectEqual(NodeType.ArrayType, res.Success.getType());","class":"lineCov","hits":"2","order":"3106","possible_hits":"2",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"                const subtype1 = res.Success.data.ArrayType;","class":"linePartCov","hits":"2","order":"3107","possible_hits":"3",},
{"lineNum":"  225","line":"                try expectEqual(NodeType.ArrayType, subtype1.getType());","class":"linePartCov","hits":"1","order":"3108","possible_hits":"2",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"                const subtype2 = subtype1.data.ArrayType;","class":"linePartCov","hits":"2","order":"3109","possible_hits":"3",},
{"lineNum":"  228","line":"                try expectEqual(NodeType.TypeName, subtype2.getType());","class":"linePartCov","hits":"1","order":"3110","possible_hits":"2",},
{"lineNum":"  229","line":"                try expectEqualStrings(\"string\", subtype2.data.TypeName);","class":"lineCov","hits":"2","order":"3111","possible_hits":"2",},
{"lineNum":"  230","line":"            }"},
{"lineNum":"  231","line":"        }).check,"},
{"lineNum":"  232","line":"    }).run();","class":"lineCov","hits":"1","order":"3102","possible_hits":"1",},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"fn parseUnionType(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2664","possible_hits":"1",},
{"lineNum":"  236","line":"    const res = parseArrayType(psr);","class":"lineCov","hits":"1","order":"2665","possible_hits":"1",},
{"lineNum":"  237","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .BitOr)","class":"lineCov","hits":"2","order":"2679","possible_hits":"2",},
{"lineNum":"  238","line":"        return res;","class":"lineCov","hits":"1","order":"2680","possible_hits":"1",},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3115","possible_hits":"1",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    const un = makeNode(","class":"lineCov","hits":"1","order":"3117","possible_hits":"1",},
{"lineNum":"  243","line":"        alloc,"},
{"lineNum":"  244","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3116","possible_hits":"1",},
{"lineNum":"  245","line":"        NodeType.UnionType,"},
{"lineNum":"  246","line":"        node.NodeList{},"},
{"lineNum":"  247","line":"    );"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3118","possible_hits":"3",},
{"lineNum":"  250","line":"        alloc,"},
{"lineNum":"  251","line":"        res.Success,","class":"linePartCov","hits":"2","order":"3119","possible_hits":"3",},
{"lineNum":"  252","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3120","possible_hits":"2",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    while (psr.lexer.token.ty == .BitOr) {","class":"lineCov","hits":"2","order":"3121","possible_hits":"2",},
{"lineNum":"  255","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3122","possible_hits":"1",},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        const right = parseArrayType(psr);","class":"lineCov","hits":"1","order":"3123","possible_hits":"1",},
{"lineNum":"  258","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"3124","possible_hits":"2",},
{"lineNum":"  259","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        un.data.UnionType.append(","class":"linePartCov","hits":"2","order":"3125","possible_hits":"3",},
{"lineNum":"  262","line":"            alloc,"},
{"lineNum":"  263","line":"            right.Success,","class":"linePartCov","hits":"2","order":"3126","possible_hits":"3",},
{"lineNum":"  264","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3127","possible_hits":"2",},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    return ParseResult.success(un);","class":"lineCov","hits":"1","order":"3128","possible_hits":"1",},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"test \"can parse union types\" {","class":"lineCov","hits":"2","order":"3113","possible_hits":"2",},
{"lineNum":"  271","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3141","possible_hits":"1",},
{"lineNum":"  272","line":"        .code = \" number | string | boolean \","},
{"lineNum":"  273","line":"        .check = (struct {"},
{"lineNum":"  274","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3129","possible_hits":"2",},
{"lineNum":"  275","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3130","possible_hits":"1",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"                const un = res.Success;","class":"linePartCov","hits":"2","order":"3131","possible_hits":"3",},
{"lineNum":"  278","line":"                try expectEqual(NodeType.UnionType, un.getType());","class":"linePartCov","hits":"1","order":"3132","possible_hits":"2",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"                const tys = un.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3133","possible_hits":"3",},
{"lineNum":"  281","line":"                try expectEqual(@intCast(usize, 3), tys.len);","class":"linePartCov","hits":"1","order":"3134","possible_hits":"2",},
{"lineNum":"  282","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3135","possible_hits":"2",},
{"lineNum":"  283","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3136","possible_hits":"2",},
{"lineNum":"  284","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3137","possible_hits":"2",},
{"lineNum":"  285","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3138","possible_hits":"2",},
{"lineNum":"  286","line":"                try expectEqual(NodeType.TypeName, tys[2].getType());","class":"linePartCov","hits":"1","order":"3139","possible_hits":"2",},
{"lineNum":"  287","line":"                try expectEqualStrings(\"boolean\", tys[2].data.TypeName);","class":"linePartCov","hits":"1","order":"3140","possible_hits":"2",},
{"lineNum":"  288","line":"            }"},
{"lineNum":"  289","line":"        }).check,"},
{"lineNum":"  290","line":"    }).run();","class":"lineCov","hits":"1","order":"3114","possible_hits":"1",},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"fn parseTypeInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2662","possible_hits":"1",},
{"lineNum":"  294","line":"    return parseUnionType(psr);","class":"lineCov","hits":"1","order":"2663","possible_hits":"1",},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"pub fn parseType(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"2660","possible_hits":"1",},
{"lineNum":"  298","line":"    return parseTypeInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"2661","possible_hits":"1",},
{"lineNum":"  299","line":"}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"test \"can parse nested types\" {","class":"lineCov","hits":"2","order":"3142","possible_hits":"2",},
{"lineNum":"  302","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":"  303","line":"        .code = \" (number|string)[] \","},
{"lineNum":"  304","line":"        .check = (struct {"},
{"lineNum":"  305","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3150","possible_hits":"2",},
{"lineNum":"  306","line":"                try expect(res.isSuccess());","class":"lineCov","hits":"1","order":"3151","possible_hits":"1",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"3152","possible_hits":"3",},
{"lineNum":"  309","line":"                try expectEqual(NodeType.ArrayType, ty.getType());","class":"linePartCov","hits":"1","order":"3153","possible_hits":"2",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"                const sub = ty.data.ArrayType;","class":"linePartCov","hits":"2","order":"3154","possible_hits":"3",},
{"lineNum":"  312","line":"                try expectEqual(NodeType.UnionType, sub.getType());","class":"linePartCov","hits":"1","order":"3155","possible_hits":"2",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"                const tys = sub.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3156","possible_hits":"3",},
{"lineNum":"  315","line":"                try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"3157","possible_hits":"2",},
{"lineNum":"  316","line":"                try expectEqual(NodeType.TypeName, tys[0].getType());","class":"linePartCov","hits":"1","order":"3158","possible_hits":"2",},
{"lineNum":"  317","line":"                try expectEqualStrings(\"number\", tys[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3159","possible_hits":"2",},
{"lineNum":"  318","line":"                try expectEqual(NodeType.TypeName, tys[1].getType());","class":"linePartCov","hits":"1","order":"3160","possible_hits":"2",},
{"lineNum":"  319","line":"                try expectEqualStrings(\"string\", tys[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3161","possible_hits":"2",},
{"lineNum":"  320","line":"            }"},
{"lineNum":"  321","line":"        }).check,"},
{"lineNum":"  322","line":"    }).run();","class":"lineCov","hits":"1","order":"3143","possible_hits":"1",},
{"lineNum":"  323","line":"}"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"test \"invalid types return NoMatch\" {","class":"lineCov","hits":"2","order":"3163","possible_hits":"2",},
{"lineNum":"  326","line":"    try (ParseTypeTestCase{","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":"  327","line":"        .code = \" 3 \","},
{"lineNum":"  328","line":"        .check = (struct {"},
{"lineNum":"  329","line":"            fn check(res: ParseResult) anyerror!void {","class":"lineCov","hits":"2","order":"3167","possible_hits":"2",},
{"lineNum":"  330","line":"                try expectEqual(ParseResult.Type.NoMatch, res.getType());","class":"lineCov","hits":"1","order":"3168","possible_hits":"1",},
{"lineNum":"  331","line":"            }"},
{"lineNum":"  332","line":"        }).check,"},
{"lineNum":"  333","line":"    }).run();","class":"lineCov","hits":"1","order":"3164","possible_hits":"1",},
{"lineNum":"  334","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-31 18:16:32", "instrumented" : 165, "covered" : 161,};
var merged_data = [];
