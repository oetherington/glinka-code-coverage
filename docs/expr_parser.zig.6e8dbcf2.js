var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ExprTestCase = struct {"},
{"lineNum":"   39","line":"    expr: []const u8,"},
{"lineNum":"   40","line":"    startingCh: u32 = 0,"},
{"lineNum":"   41","line":"    check: fn (value: Node) anyerror!void,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    pub fn run(comptime self: @This()) !void {","class":"lineCov","hits":"171","order":"3513","possible_hits":"171",},
{"lineNum":"   44","line":"        const code = \"var a = \" ++ self.expr ++ \";\";"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"57","order":"3514","possible_hits":"57",},
{"lineNum":"   47","line":"        defer arena.deinit();","class":"linePartCov","hits":"57","order":"3541","possible_hits":"399",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        var tsParser = TsParser.new(&arena, code);","class":"lineCov","hits":"57","order":"3515","possible_hits":"57",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"57","order":"3516","possible_hits":"57",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        const res = parser.next();","class":"lineCov","hits":"57","order":"3517","possible_hits":"57",},
{"lineNum":"   54","line":"        try res.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"57","order":"3530","possible_hits":"114",},
{"lineNum":"   55","line":"        try expect(res.isSuccess());","class":"linePartCov","hits":"57","order":"3531","possible_hits":"114",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        const value = res.Success.data.Decl.value.?;","class":"lineCov","hits":"114","order":"3532","possible_hits":"114",},
{"lineNum":"   58","line":"        try expectEqual(Cursor.new(1, 9 + self.startingCh), value.csr);","class":"linePartCov","hits":"57","order":"3533","possible_hits":"171",},
{"lineNum":"   59","line":"        try self.check(value);","class":"linePartCov","hits":"57","order":"3534","possible_hits":"114",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        const eof = parser.next();","class":"lineCov","hits":"57","order":"3538","possible_hits":"57",},
{"lineNum":"   62","line":"        try expect(eof.isSuccess());","class":"linePartCov","hits":"57","order":"3539","possible_hits":"114",},
{"lineNum":"   63","line":"        try expectEqual(NodeType.EOF, eof.Success.getType());","class":"linePartCov","hits":"114","order":"3540","possible_hits":"171",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"fn parseParenExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3521","possible_hits":"1",},
{"lineNum":"   68","line":"    std.debug.assert(psr.lexer.token.ty == .LParen);","class":"lineCov","hits":"1","order":"3522","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3523","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"3524","possible_hits":"1",},
{"lineNum":"   73","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"3526","possible_hits":"2",},
{"lineNum":"   74","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3527","possible_hits":"2",},
{"lineNum":"   77","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3528","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    return expr;","class":"lineCov","hits":"1","order":"3529","possible_hits":"1",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"test \"can parse paren primary expression\" {","class":"lineCov","hits":"2","order":"3511","possible_hits":"2",},
{"lineNum":"   85","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3542","possible_hits":"1",},
{"lineNum":"   86","line":"        .expr = \"(123456)\","},
{"lineNum":"   87","line":"        .startingCh = 1,"},
{"lineNum":"   88","line":"        .check = (struct {"},
{"lineNum":"   89","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3535","possible_hits":"2",},
{"lineNum":"   90","line":"                try expectEqual(NodeType.Int, value.getType());","class":"lineCov","hits":"1","order":"3536","possible_hits":"1",},
{"lineNum":"   91","line":"                try expectEqualStrings(\"123456\", value.data.Int);","class":"lineCov","hits":"2","order":"3537","possible_hits":"2",},
{"lineNum":"   92","line":"            }"},
{"lineNum":"   93","line":"        }).check,"},
{"lineNum":"   94","line":"    }).run();","class":"lineCov","hits":"1","order":"3512","possible_hits":"1",},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"fn parseArrayLiteral(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3547","possible_hits":"1",},
{"lineNum":"   98","line":"    std.debug.assert(psr.lexer.token.ty == .LBrack);","class":"lineCov","hits":"1","order":"3548","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    const nd = makeNode(","class":"lineCov","hits":"1","order":"3551","possible_hits":"1",},
{"lineNum":"  101","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3549","possible_hits":"1",},
{"lineNum":"  102","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3550","possible_hits":"1",},
{"lineNum":"  103","line":"        .Array,"},
{"lineNum":"  104","line":"        node.NodeList{},"},
{"lineNum":"  105","line":"    );"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3552","possible_hits":"1",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    while (psr.lexer.token.ty != .RBrack) {","class":"lineCov","hits":"2","order":"3553","possible_hits":"2",},
{"lineNum":"  110","line":"        const item = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"3554","possible_hits":"1",},
{"lineNum":"  111","line":"        if (!item.isSuccess())","class":"lineCov","hits":"2","order":"3556","possible_hits":"2",},
{"lineNum":"  112","line":"            return item;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        nd.data.Array.append(","class":"linePartCov","hits":"2","order":"3557","possible_hits":"3",},
{"lineNum":"  115","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3558","possible_hits":"1",},
{"lineNum":"  116","line":"            item.Success,","class":"linePartCov","hits":"2","order":"3559","possible_hits":"3",},
{"lineNum":"  117","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3560","possible_hits":"2",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"3561","possible_hits":"2",},
{"lineNum":"  120","line":"            break;","class":"lineCov","hits":"1","order":"3566","possible_hits":"1",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3562","possible_hits":"1",},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    if (psr.lexer.token.ty != .RBrack)","class":"lineCov","hits":"2","order":"3567","possible_hits":"2",},
{"lineNum":"  126","line":"        return ParseResult.expected(TokenType.RBrack, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3568","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3569","possible_hits":"1",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"test \"can parse array literal primary expression\" {","class":"lineCov","hits":"2","order":"3543","possible_hits":"2",},
{"lineNum":"  134","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3579","possible_hits":"1",},
{"lineNum":"  135","line":"        .expr = \"[ 123, \'abc\', true ]\","},
{"lineNum":"  136","line":"        .check = (struct {"},
{"lineNum":"  137","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3570","possible_hits":"2",},
{"lineNum":"  138","line":"                try expectEqual(NodeType.Array, value.getType());","class":"lineCov","hits":"1","order":"3571","possible_hits":"1",},
{"lineNum":"  139","line":"                const items = value.data.Array.items;","class":"linePartCov","hits":"2","order":"3572","possible_hits":"3",},
{"lineNum":"  140","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"3573","possible_hits":"2",},
{"lineNum":"  141","line":"                try expectEqual(NodeType.Int, items[0].getType());","class":"linePartCov","hits":"1","order":"3574","possible_hits":"2",},
{"lineNum":"  142","line":"                try expectEqualStrings(\"123\", items[0].data.Int);","class":"linePartCov","hits":"1","order":"3575","possible_hits":"2",},
{"lineNum":"  143","line":"                try expectEqual(NodeType.String, items[1].getType());","class":"linePartCov","hits":"1","order":"3576","possible_hits":"2",},
{"lineNum":"  144","line":"                try expectEqualStrings(\"\'abc\'\", items[1].data.String);","class":"linePartCov","hits":"1","order":"3577","possible_hits":"2",},
{"lineNum":"  145","line":"                try expectEqual(NodeType.True, items[2].getType());","class":"linePartCov","hits":"1","order":"3578","possible_hits":"2",},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":"        }).check,"},
{"lineNum":"  148","line":"    }).run();","class":"lineCov","hits":"1","order":"3544","possible_hits":"1",},
{"lineNum":"  149","line":"}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"fn parsePropertyKey(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3591","possible_hits":"1",},
{"lineNum":"  152","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3592","possible_hits":"1",},
{"lineNum":"  153","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3593","possible_hits":"1",},
{"lineNum":"  154","line":"    const data = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3594","possible_hits":"1",},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    const nd = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"3","order":"3595","possible_hits":"3",},
{"lineNum":"  157","line":"        .Ident => makeNode(alloc, csr, .Ident, data),","class":"lineCov","hits":"1","order":"3596","possible_hits":"1",},
{"lineNum":"  158","line":"        .String => makeNode(alloc, csr, .String, data),","class":"lineCov","hits":"1","order":"3610","possible_hits":"1",},
{"lineNum":"  159","line":"        .Int => makeNode(alloc, csr, .Int, data),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"        else => return ParseResult.expected(\"property key\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"    };"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3597","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3598","possible_hits":"1",},
{"lineNum":"  166","line":"}"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"fn parseObjectLiteral(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3583","possible_hits":"1",},
{"lineNum":"  169","line":"    std.debug.assert(psr.lexer.token.ty == .LBrace);","class":"lineCov","hits":"1","order":"3584","possible_hits":"1",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    const nd = makeNode(","class":"lineCov","hits":"1","order":"3587","possible_hits":"1",},
{"lineNum":"  172","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3585","possible_hits":"1",},
{"lineNum":"  173","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3586","possible_hits":"1",},
{"lineNum":"  174","line":"        .Object,"},
{"lineNum":"  175","line":"        node.Object{},"},
{"lineNum":"  176","line":"    );"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3588","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"3589","possible_hits":"2",},
{"lineNum":"  181","line":"        const key = parsePropertyKey(psr);","class":"lineCov","hits":"1","order":"3590","possible_hits":"1",},
{"lineNum":"  182","line":"        if (!key.isSuccess())","class":"lineCov","hits":"2","order":"3599","possible_hits":"2",},
{"lineNum":"  183","line":"            return key;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"3","order":"3600","possible_hits":"3",},
{"lineNum":"  186","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3601","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            const value = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"3602","possible_hits":"1",},
{"lineNum":"  189","line":"            if (!value.isSuccess())","class":"lineCov","hits":"2","order":"3603","possible_hits":"2",},
{"lineNum":"  190","line":"                return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"            nd.data.Object.append(","class":"linePartCov","hits":"2","order":"3604","possible_hits":"3",},
{"lineNum":"  193","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3605","possible_hits":"1",},
{"lineNum":"  194","line":"                node.ObjectProperty.new(key.Success, value.Success),","class":"linePartCov","hits":"2","order":"3606","possible_hits":"3",},
{"lineNum":"  195","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3607","possible_hits":"2",},
{"lineNum":"  196","line":"        } else if (key.Success.getType() == .Ident) {","class":"lineCov","hits":"3","order":"3611","possible_hits":"3",},
{"lineNum":"  197","line":"            nd.data.Object.append(","class":"linePartCov","hits":"2","order":"3612","possible_hits":"3",},
{"lineNum":"  198","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3613","possible_hits":"1",},
{"lineNum":"  199","line":"                node.ObjectProperty.new(key.Success, key.Success),","class":"linePartCov","hits":"2","order":"3614","possible_hits":"3",},
{"lineNum":"  200","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3615","possible_hits":"2",},
{"lineNum":"  201","line":"        } else {"},
{"lineNum":"  202","line":"            return ParseResult.expected(\"property value\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"3608","possible_hits":"2",},
{"lineNum":"  206","line":"            break;","class":"lineCov","hits":"1","order":"3616","possible_hits":"1",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3609","possible_hits":"1",},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    if (psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"2","order":"3617","possible_hits":"2",},
{"lineNum":"  212","line":"        return ParseResult.expected(TokenType.RBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3618","possible_hits":"1",},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3619","possible_hits":"1",},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"test \"can parse object literal primary expression\" {","class":"lineCov","hits":"2","order":"3580","possible_hits":"2",},
{"lineNum":"  220","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3635","possible_hits":"1",},
{"lineNum":"  221","line":"        .expr = \"{ a: \'hello\', \'b\': true, c }\","},
{"lineNum":"  222","line":"        .check = (struct {"},
{"lineNum":"  223","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3620","possible_hits":"2",},
{"lineNum":"  224","line":"                try expectEqual(NodeType.Object, value.getType());","class":"lineCov","hits":"1","order":"3621","possible_hits":"1",},
{"lineNum":"  225","line":"                const items = value.data.Object.items;","class":"linePartCov","hits":"2","order":"3622","possible_hits":"3",},
{"lineNum":"  226","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"3623","possible_hits":"2",},
{"lineNum":"  227","line":"                try expectEqual(NodeType.Ident, items[0].key.getType());","class":"linePartCov","hits":"1","order":"3624","possible_hits":"2",},
{"lineNum":"  228","line":"                try expectEqualStrings(\"a\", items[0].key.data.Ident);","class":"linePartCov","hits":"1","order":"3625","possible_hits":"2",},
{"lineNum":"  229","line":"                try expectEqual(NodeType.String, items[0].value.getType());","class":"linePartCov","hits":"1","order":"3626","possible_hits":"2",},
{"lineNum":"  230","line":"                try expectEqualStrings(\"\'hello\'\", items[0].value.data.String);","class":"linePartCov","hits":"1","order":"3627","possible_hits":"2",},
{"lineNum":"  231","line":"                try expectEqual(NodeType.String, items[1].key.getType());","class":"linePartCov","hits":"1","order":"3628","possible_hits":"2",},
{"lineNum":"  232","line":"                try expectEqualStrings(\"\'b\'\", items[1].key.data.String);","class":"linePartCov","hits":"1","order":"3629","possible_hits":"2",},
{"lineNum":"  233","line":"                try expectEqual(NodeType.True, items[1].value.getType());","class":"linePartCov","hits":"1","order":"3630","possible_hits":"2",},
{"lineNum":"  234","line":"                try expectEqual(NodeType.Ident, items[2].key.getType());","class":"linePartCov","hits":"1","order":"3631","possible_hits":"2",},
{"lineNum":"  235","line":"                try expectEqualStrings(\"c\", items[2].key.data.Ident);","class":"linePartCov","hits":"1","order":"3632","possible_hits":"2",},
{"lineNum":"  236","line":"                try expectEqual(NodeType.Ident, items[2].value.getType());","class":"linePartCov","hits":"1","order":"3633","possible_hits":"2",},
{"lineNum":"  237","line":"                try expectEqualStrings(\"c\", items[2].value.data.Ident);","class":"linePartCov","hits":"1","order":"3634","possible_hits":"2",},
{"lineNum":"  238","line":"            }"},
{"lineNum":"  239","line":"        }).check,"},
{"lineNum":"  240","line":"    }).run();","class":"lineCov","hits":"1","order":"3581","possible_hits":"1",},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"fn parseFunctionExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3639","possible_hits":"1",},
{"lineNum":"  244","line":"    std.debug.assert(psr.lexer.token.ty == .Function);","class":"lineCov","hits":"1","order":"3640","possible_hits":"1",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3641","possible_hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3642","possible_hits":"1",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    var func: node.Function = undefined;","class":"lineCov","hits":"1","order":"3643","possible_hits":"1",},
{"lineNum":"  251","line":"    func.isArrow = false;","class":"lineCov","hits":"1","order":"3644","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    if (psr.lexer.token.ty == .Ident) {","class":"lineCov","hits":"2","order":"3645","possible_hits":"2",},
{"lineNum":"  254","line":"        func.name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3646","possible_hits":"1",},
{"lineNum":"  255","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3647","possible_hits":"1",},
{"lineNum":"  256","line":"    } else {"},
{"lineNum":"  257","line":"        func.name = null;","class":"lineCov","hits":"1","order":"5437","possible_hits":"1",},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"3648","possible_hits":"2",},
{"lineNum":"  261","line":"        return ParseResult.expected(\"function argument list\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3649","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    func.args = node.Function.ArgList{};","class":"lineCov","hits":"1","order":"3650","possible_hits":"1",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    while (psr.lexer.token.ty != .RParen) {","class":"lineCov","hits":"2","order":"3651","possible_hits":"2",},
{"lineNum":"  268","line":"        const arg = psr.lexer.token;","class":"lineCov","hits":"1","order":"3652","possible_hits":"1",},
{"lineNum":"  269","line":"        if (arg.ty != .Ident)","class":"lineCov","hits":"2","order":"3653","possible_hits":"2",},
{"lineNum":"  270","line":"            return ParseResult.expected(\"a function argument\", arg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3654","possible_hits":"1",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        var ty: ?Node = null;","class":"lineCov","hits":"1","order":"3655","possible_hits":"1",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"3","order":"3656","possible_hits":"3",},
{"lineNum":"  277","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3657","possible_hits":"1",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"            const tyRes = psr.parseType();","class":"lineCov","hits":"1","order":"3658","possible_hits":"1",},
{"lineNum":"  280","line":"            if (!tyRes.isSuccess())","class":"lineCov","hits":"2","order":"3659","possible_hits":"2",},
{"lineNum":"  281","line":"                return tyRes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"            ty = tyRes.Success;","class":"linePartCov","hits":"2","order":"3660","possible_hits":"3",},
{"lineNum":"  284","line":"        }"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"        func.args.append(psr.getAllocator(), node.Function.Arg{","class":"lineCov","hits":"2","order":"3661","possible_hits":"2",},
{"lineNum":"  287","line":"            .csr = arg.csr,","class":"lineCov","hits":"1","order":"3662","possible_hits":"1",},
{"lineNum":"  288","line":"            .name = arg.data,","class":"lineCov","hits":"1","order":"3663","possible_hits":"1",},
{"lineNum":"  289","line":"            .ty = ty,","class":"lineCov","hits":"1","order":"3664","possible_hits":"1",},
{"lineNum":"  290","line":"        }) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3665","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"3666","possible_hits":"2",},
{"lineNum":"  293","line":"            break;","class":"lineCov","hits":"1","order":"3668","possible_hits":"1",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3667","possible_hits":"1",},
{"lineNum":"  296","line":"    }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3669","possible_hits":"2",},
{"lineNum":"  299","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3670","possible_hits":"1",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"2","order":"3671","possible_hits":"2",},
{"lineNum":"  304","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3672","possible_hits":"1",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        const retTy = psr.parseType();","class":"lineCov","hits":"1","order":"3673","possible_hits":"1",},
{"lineNum":"  307","line":"        if (!retTy.isSuccess())","class":"lineCov","hits":"2","order":"3674","possible_hits":"2",},
{"lineNum":"  308","line":"            return retTy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"        func.retTy = retTy.Success;","class":"linePartCov","hits":"2","order":"3675","possible_hits":"3",},
{"lineNum":"  311","line":"    } else {"},
{"lineNum":"  312","line":"        func.retTy = null;","class":"lineCov","hits":"1","order":"5388","possible_hits":"1",},
{"lineNum":"  313","line":"    }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    switch (psr.parseBlock()) {","class":"linePartCov","hits":"1","order":"3676","possible_hits":"2",},
{"lineNum":"  316","line":"        .Success => |body| func.body = body,","class":"lineCov","hits":"1","order":"3691","possible_hits":"1",},
{"lineNum":"  317","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"            \"function body or return type\","},
{"lineNum":"  320","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"        ),"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3694","possible_hits":"1",},
{"lineNum":"  325","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3692","possible_hits":"1",},
{"lineNum":"  326","line":"        csr,"},
{"lineNum":"  327","line":"        .Function,"},
{"lineNum":"  328","line":"        func,","class":"lineCov","hits":"1","order":"3693","possible_hits":"1",},
{"lineNum":"  329","line":"    ));"},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"test \"can parse function definition\" {","class":"lineCov","hits":"2","order":"3636","possible_hits":"2",},
{"lineNum":"  333","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3716","possible_hits":"1",},
{"lineNum":"  334","line":"        .expr = \"function hello(world: number, foo: string, bar) : bool {}\","},
{"lineNum":"  335","line":"        .check = (struct {"},
{"lineNum":"  336","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3695","possible_hits":"2",},
{"lineNum":"  337","line":"                try expectEqual(NodeType.Function, value.getType());","class":"lineCov","hits":"1","order":"3696","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"                const func = value.data.Function;","class":"linePartCov","hits":"2","order":"3697","possible_hits":"3",},
{"lineNum":"  340","line":"                try expectEqual(false, func.isArrow);","class":"linePartCov","hits":"1","order":"3698","possible_hits":"2",},
{"lineNum":"  341","line":"                try expectEqualStrings(\"hello\", func.name.?);","class":"linePartCov","hits":"1","order":"3699","possible_hits":"2",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"                const retTy = func.retTy.?;","class":"linePartCov","hits":"1","order":"3700","possible_hits":"2",},
{"lineNum":"  344","line":"                try expectEqual(NodeType.TypeName, retTy.getType());","class":"linePartCov","hits":"1","order":"3701","possible_hits":"2",},
{"lineNum":"  345","line":"                try expectEqualStrings(\"bool\", retTy.data.TypeName);","class":"lineCov","hits":"2","order":"3702","possible_hits":"2",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"                const args = func.args.items;","class":"lineCov","hits":"1","order":"3703","possible_hits":"1",},
{"lineNum":"  348","line":"                try expectEqual(@intCast(usize, 3), args.len);","class":"lineCov","hits":"1","order":"3704","possible_hits":"1",},
{"lineNum":"  349","line":"                try expectEqualStrings(\"world\", args[0].name);","class":"linePartCov","hits":"1","order":"3705","possible_hits":"2",},
{"lineNum":"  350","line":"                try expectEqual(NodeType.TypeName, args[0].ty.?.getType());","class":"linePartCov","hits":"1","order":"3706","possible_hits":"2",},
{"lineNum":"  351","line":"                try expectEqualStrings(\"number\", args[0].ty.?.data.TypeName);","class":"linePartCov","hits":"1","order":"3707","possible_hits":"2",},
{"lineNum":"  352","line":"                try expectEqualStrings(\"foo\", args[1].name);","class":"linePartCov","hits":"1","order":"3708","possible_hits":"2",},
{"lineNum":"  353","line":"                try expectEqual(NodeType.TypeName, args[1].ty.?.getType());","class":"linePartCov","hits":"1","order":"3709","possible_hits":"2",},
{"lineNum":"  354","line":"                try expectEqualStrings(\"string\", args[1].ty.?.data.TypeName);","class":"linePartCov","hits":"1","order":"3710","possible_hits":"2",},
{"lineNum":"  355","line":"                try expectEqualStrings(\"bar\", args[2].name);","class":"linePartCov","hits":"1","order":"3711","possible_hits":"2",},
{"lineNum":"  356","line":"                try expect(args[2].ty == null);","class":"linePartCov","hits":"1","order":"3712","possible_hits":"2",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                const body = func.body;","class":"lineCov","hits":"1","order":"3713","possible_hits":"1",},
{"lineNum":"  359","line":"                try expectEqual(NodeType.Block, body.getType());","class":"lineCov","hits":"1","order":"3714","possible_hits":"1",},
{"lineNum":"  360","line":"                try expectEqual(@intCast(usize, 0), body.data.Block.items.len);","class":"lineCov","hits":"2","order":"3715","possible_hits":"2",},
{"lineNum":"  361","line":"            }"},
{"lineNum":"  362","line":"        }).check,"},
{"lineNum":"  363","line":"    }).run();","class":"lineCov","hits":"1","order":"3637","possible_hits":"1",},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"fn parsePrimaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3172","possible_hits":"1",},
{"lineNum":"  367","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"3173","possible_hits":"1",},
{"lineNum":"  368","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3174","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    const nd = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"9","order":"3175","possible_hits":"9",},
{"lineNum":"  371","line":"        .Ident => makeNode(alloc, csr, .Ident, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"3719","possible_hits":"1",},
{"lineNum":"  372","line":"        .Int => makeNode(alloc, csr, .Int, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"3176","possible_hits":"1",},
{"lineNum":"  373","line":"        .Float => makeNode(alloc, csr, .Float, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"3753","possible_hits":"1",},
{"lineNum":"  374","line":"        .String => makeNode(alloc, csr, .String, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"3563","possible_hits":"1",},
{"lineNum":"  375","line":"        .Template => makeNode(alloc, csr, .Template, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"3766","possible_hits":"1",},
{"lineNum":"  376","line":"        .True => makeNode(alloc, csr, .True, {}),","class":"lineCov","hits":"1","order":"3564","possible_hits":"1",},
{"lineNum":"  377","line":"        .False => makeNode(alloc, csr, .False, {}),","class":"lineCov","hits":"1","order":"3778","possible_hits":"1",},
{"lineNum":"  378","line":"        .Null => makeNode(alloc, csr, .Null, {}),","class":"lineCov","hits":"1","order":"3784","possible_hits":"1",},
{"lineNum":"  379","line":"        .Undefined => makeNode(alloc, csr, .Undefined, {}),","class":"lineCov","hits":"1","order":"3790","possible_hits":"1",},
{"lineNum":"  380","line":"        .LParen => return parseParenExpr(psr),","class":"lineCov","hits":"1","order":"3520","possible_hits":"1",},
{"lineNum":"  381","line":"        .LBrack => return parseArrayLiteral(psr),","class":"lineCov","hits":"1","order":"3546","possible_hits":"1",},
{"lineNum":"  382","line":"        .LBrace => return parseObjectLiteral(psr),","class":"lineCov","hits":"1","order":"3582","possible_hits":"1",},
{"lineNum":"  383","line":"        .Function => return parseFunctionExpr(psr),","class":"lineCov","hits":"1","order":"3638","possible_hits":"1",},
{"lineNum":"  384","line":"        else => return ParseResult.noMatchExpected(","class":"lineCov","hits":"1","order":"4477","possible_hits":"1",},
{"lineNum":"  385","line":"            \"a primary expression\","},
{"lineNum":"  386","line":"            psr.lexer.token,","class":"lineCov","hits":"1","order":"4476","possible_hits":"1",},
{"lineNum":"  387","line":"        ),"},
{"lineNum":"  388","line":"    };"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3177","possible_hits":"1",},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3178","possible_hits":"1",},
{"lineNum":"  393","line":"}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"test \"can parse variable name primary expression\" {","class":"lineCov","hits":"2","order":"3717","possible_hits":"2",},
{"lineNum":"  396","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3723","possible_hits":"1",},
{"lineNum":"  397","line":"        .expr = \"aVariableName\","},
{"lineNum":"  398","line":"        .check = (struct {"},
{"lineNum":"  399","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3720","possible_hits":"2",},
{"lineNum":"  400","line":"                try expectEqual(NodeType.Ident, value.getType());","class":"lineCov","hits":"1","order":"3721","possible_hits":"1",},
{"lineNum":"  401","line":"                try expectEqualStrings(\"aVariableName\", value.data.Ident);","class":"lineCov","hits":"2","order":"3722","possible_hits":"2",},
{"lineNum":"  402","line":"            }"},
{"lineNum":"  403","line":"        }).check,"},
{"lineNum":"  404","line":"    }).run();","class":"lineCov","hits":"1","order":"3718","possible_hits":"1",},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"test \"can parse int primary expression\" {","class":"lineCov","hits":"2","order":"3724","possible_hits":"2",},
{"lineNum":"  408","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3729","possible_hits":"1",},
{"lineNum":"  409","line":"        .expr = \"123456\","},
{"lineNum":"  410","line":"        .check = (struct {"},
{"lineNum":"  411","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3726","possible_hits":"2",},
{"lineNum":"  412","line":"                try expectEqual(NodeType.Int, value.getType());","class":"lineCov","hits":"1","order":"3727","possible_hits":"1",},
{"lineNum":"  413","line":"                try expectEqualStrings(\"123456\", value.data.Int);","class":"lineCov","hits":"2","order":"3728","possible_hits":"2",},
{"lineNum":"  414","line":"            }"},
{"lineNum":"  415","line":"        }).check,"},
{"lineNum":"  416","line":"    }).run();","class":"lineCov","hits":"1","order":"3725","possible_hits":"1",},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":"test \"can parse float primary expression\" {","class":"lineCov","hits":"2","order":"3730","possible_hits":"2",},
{"lineNum":"  419","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3757","possible_hits":"1",},
{"lineNum":"  420","line":"        .expr = \"9.34_273e-29\","},
{"lineNum":"  421","line":"        .check = (struct {"},
{"lineNum":"  422","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3754","possible_hits":"2",},
{"lineNum":"  423","line":"                try expectEqual(NodeType.Float, value.getType());","class":"lineCov","hits":"1","order":"3755","possible_hits":"1",},
{"lineNum":"  424","line":"                try expectEqualStrings(\"9.34_273e-29\", value.data.Float);","class":"lineCov","hits":"2","order":"3756","possible_hits":"2",},
{"lineNum":"  425","line":"            }"},
{"lineNum":"  426","line":"        }).check,"},
{"lineNum":"  427","line":"    }).run();","class":"lineCov","hits":"1","order":"3731","possible_hits":"1",},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"test \"can parse string primary expression\" {","class":"lineCov","hits":"2","order":"3758","possible_hits":"2",},
{"lineNum":"  431","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3763","possible_hits":"1",},
{"lineNum":"  432","line":"        .expr = \"\'a test string\'\","},
{"lineNum":"  433","line":"        .check = (struct {"},
{"lineNum":"  434","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3760","possible_hits":"2",},
{"lineNum":"  435","line":"                try expectEqual(NodeType.String, value.getType());","class":"lineCov","hits":"1","order":"3761","possible_hits":"1",},
{"lineNum":"  436","line":"                try expectEqualStrings(\"\'a test string\'\", value.data.String);","class":"lineCov","hits":"2","order":"3762","possible_hits":"2",},
{"lineNum":"  437","line":"            }"},
{"lineNum":"  438","line":"        }).check,"},
{"lineNum":"  439","line":"    }).run();","class":"lineCov","hits":"1","order":"3759","possible_hits":"1",},
{"lineNum":"  440","line":"}"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"test \"can parse template primary expression\" {","class":"lineCov","hits":"2","order":"3764","possible_hits":"2",},
{"lineNum":"  443","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3770","possible_hits":"1",},
{"lineNum":"  444","line":"        .expr = \"`a test template`\","},
{"lineNum":"  445","line":"        .check = (struct {"},
{"lineNum":"  446","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3767","possible_hits":"2",},
{"lineNum":"  447","line":"                try expectEqual(NodeType.Template, value.getType());","class":"lineCov","hits":"1","order":"3768","possible_hits":"1",},
{"lineNum":"  448","line":"                try expectEqualStrings(\"`a test template`\", value.data.Template);","class":"lineCov","hits":"2","order":"3769","possible_hits":"2",},
{"lineNum":"  449","line":"            }"},
{"lineNum":"  450","line":"        }).check,"},
{"lineNum":"  451","line":"    }).run();","class":"lineCov","hits":"1","order":"3765","possible_hits":"1",},
{"lineNum":"  452","line":"}"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"test \"can parse \'true\' primary expression\" {","class":"lineCov","hits":"2","order":"3771","possible_hits":"2",},
{"lineNum":"  455","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3775","possible_hits":"1",},
{"lineNum":"  456","line":"        .expr = \"true\","},
{"lineNum":"  457","line":"        .check = (struct {"},
{"lineNum":"  458","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3773","possible_hits":"2",},
{"lineNum":"  459","line":"                try expectEqual(NodeType.True, value.getType());","class":"lineCov","hits":"1","order":"3774","possible_hits":"1",},
{"lineNum":"  460","line":"            }"},
{"lineNum":"  461","line":"        }).check,"},
{"lineNum":"  462","line":"    }).run();","class":"lineCov","hits":"1","order":"3772","possible_hits":"1",},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"test \"can parse \'false\' primary expression\" {","class":"lineCov","hits":"2","order":"3776","possible_hits":"2",},
{"lineNum":"  466","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3781","possible_hits":"1",},
{"lineNum":"  467","line":"        .expr = \"false\","},
{"lineNum":"  468","line":"        .check = (struct {"},
{"lineNum":"  469","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3779","possible_hits":"2",},
{"lineNum":"  470","line":"                try expectEqual(NodeType.False, value.getType());","class":"lineCov","hits":"1","order":"3780","possible_hits":"1",},
{"lineNum":"  471","line":"            }"},
{"lineNum":"  472","line":"        }).check,"},
{"lineNum":"  473","line":"    }).run();","class":"lineCov","hits":"1","order":"3777","possible_hits":"1",},
{"lineNum":"  474","line":"}"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"test \"can parse \'null\' primary expression\" {","class":"lineCov","hits":"2","order":"3782","possible_hits":"2",},
{"lineNum":"  477","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3787","possible_hits":"1",},
{"lineNum":"  478","line":"        .expr = \"null\","},
{"lineNum":"  479","line":"        .check = (struct {"},
{"lineNum":"  480","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3785","possible_hits":"2",},
{"lineNum":"  481","line":"                try expectEqual(NodeType.Null, value.getType());","class":"lineCov","hits":"1","order":"3786","possible_hits":"1",},
{"lineNum":"  482","line":"            }"},
{"lineNum":"  483","line":"        }).check,"},
{"lineNum":"  484","line":"    }).run();","class":"lineCov","hits":"1","order":"3783","possible_hits":"1",},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"test \"can parse \'undefined\' primary expression\" {","class":"lineCov","hits":"2","order":"3788","possible_hits":"2",},
{"lineNum":"  488","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3793","possible_hits":"1",},
{"lineNum":"  489","line":"        .expr = \"undefined\","},
{"lineNum":"  490","line":"        .check = (struct {"},
{"lineNum":"  491","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3791","possible_hits":"2",},
{"lineNum":"  492","line":"                try expectEqual(NodeType.Undefined, value.getType());","class":"lineCov","hits":"1","order":"3792","possible_hits":"1",},
{"lineNum":"  493","line":"            }"},
{"lineNum":"  494","line":"        }).check,"},
{"lineNum":"  495","line":"    }).run();","class":"lineCov","hits":"1","order":"3789","possible_hits":"1",},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"fn parseMemberExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3170","possible_hits":"1",},
{"lineNum":"  499","line":"    const left = parsePrimaryExpr(psr);","class":"lineCov","hits":"1","order":"3171","possible_hits":"1",},
{"lineNum":"  500","line":"    if (!left.isSuccess())","class":"lineCov","hits":"2","order":"3179","possible_hits":"2",},
{"lineNum":"  501","line":"        return left;","class":"lineCov","hits":"1","order":"4482","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    var nd = left.Success;","class":"linePartCov","hits":"2","order":"3180","possible_hits":"3",},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    while (true) {","class":"lineCov","hits":"3","order":"3181","possible_hits":"3",},
{"lineNum":"  506","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"3","order":"3182","possible_hits":"3",},
{"lineNum":"  507","line":"            .Dot => {"},
{"lineNum":"  508","line":"                const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3796","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"                const ident = psr.lexer.next();","class":"lineCov","hits":"1","order":"3797","possible_hits":"1",},
{"lineNum":"  511","line":"                if (ident.ty != .Ident)","class":"lineCov","hits":"2","order":"3798","possible_hits":"2",},
{"lineNum":"  512","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"                        \"identifier after \'.\'\","},
{"lineNum":"  514","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"                    );"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3799","possible_hits":"1",},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"3803","possible_hits":"1",},
{"lineNum":"  520","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"3800","possible_hits":"1",},
{"lineNum":"  521","line":"                    csr,"},
{"lineNum":"  522","line":"                    .Dot,"},
{"lineNum":"  523","line":"                    node.Dot{"},
{"lineNum":"  524","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"3801","possible_hits":"1",},
{"lineNum":"  525","line":"                        .ident = ident.data,","class":"lineCov","hits":"1","order":"3802","possible_hits":"1",},
{"lineNum":"  526","line":"                    },"},
{"lineNum":"  527","line":"                );"},
{"lineNum":"  528","line":"            },"},
{"lineNum":"  529","line":"            .LBrack => {"},
{"lineNum":"  530","line":"                const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3816","possible_hits":"1",},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3817","possible_hits":"1",},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"                const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"3818","possible_hits":"1",},
{"lineNum":"  535","line":"                if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"3819","possible_hits":"2",},
{"lineNum":"  536","line":"                    return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"                if (psr.lexer.token.ty != .RBrack)","class":"lineCov","hits":"2","order":"3820","possible_hits":"2",},
{"lineNum":"  539","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"                        \"\']\' after array access\","},
{"lineNum":"  541","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"                    );"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3821","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"3825","possible_hits":"1",},
{"lineNum":"  547","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"3822","possible_hits":"1",},
{"lineNum":"  548","line":"                    csr,"},
{"lineNum":"  549","line":"                    .ArrayAccess,"},
{"lineNum":"  550","line":"                    node.ArrayAccess{"},
{"lineNum":"  551","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"3823","possible_hits":"1",},
{"lineNum":"  552","line":"                        .index = expr.Success,","class":"linePartCov","hits":"2","order":"3824","possible_hits":"3",},
{"lineNum":"  553","line":"                    },"},
{"lineNum":"  554","line":"                );"},
{"lineNum":"  555","line":"            },"},
{"lineNum":"  556","line":"            .LParen => {"},
{"lineNum":"  557","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"3844","possible_hits":"1",},
{"lineNum":"  558","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"3840","possible_hits":"1",},
{"lineNum":"  559","line":"                    psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3841","possible_hits":"1",},
{"lineNum":"  560","line":"                    .Call,"},
{"lineNum":"  561","line":"                    node.Call{"},
{"lineNum":"  562","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"3842","possible_hits":"1",},
{"lineNum":"  563","line":"                        .args = node.NodeList{},","class":"lineCov","hits":"1","order":"3843","possible_hits":"1",},
{"lineNum":"  564","line":"                    },"},
{"lineNum":"  565","line":"                );"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3845","possible_hits":"1",},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"                while (psr.lexer.token.ty != .RParen) {","class":"lineCov","hits":"2","order":"3846","possible_hits":"2",},
{"lineNum":"  570","line":"                    const expr = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"3858","possible_hits":"1",},
{"lineNum":"  571","line":"                    switch (expr) {","class":"linePartCov","hits":"2","order":"3859","possible_hits":"3",},
{"lineNum":"  572","line":"                        .Success => |arg| nd.data.Call.args.append(","class":"linePartCov","hits":"3","order":"3860","possible_hits":"4",},
{"lineNum":"  573","line":"                            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3861","possible_hits":"1",},
{"lineNum":"  574","line":"                            arg,","class":"lineCov","hits":"1","order":"3862","possible_hits":"1",},
{"lineNum":"  575","line":"                        ) catch allocate.reportAndExit(),","class":"linePartCov","hits":"2","order":"3863","possible_hits":"3",},
{"lineNum":"  576","line":"                        .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"                        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"                            \"an expression for function call\","},
{"lineNum":"  579","line":"                            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"                        ),"},
{"lineNum":"  581","line":"                    }"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"                    if (psr.lexer.token.ty == .Comma) {","class":"lineCov","hits":"1","order":"3864","possible_hits":"1",},
{"lineNum":"  584","line":"                        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3865","possible_hits":"1",},
{"lineNum":"  585","line":"                    } else {"},
{"lineNum":"  586","line":"                        break;","class":"lineCov","hits":"1","order":"3866","possible_hits":"1",},
{"lineNum":"  587","line":"                    }"},
{"lineNum":"  588","line":"                }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"                if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3847","possible_hits":"2",},
{"lineNum":"  591","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"                        \"\')\' after function call arguments\","},
{"lineNum":"  593","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"                    );"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3848","possible_hits":"1",},
{"lineNum":"  597","line":"            },"},
{"lineNum":"  598","line":"            else => break,","class":"lineCov","hits":"1","order":"3183","possible_hits":"1",},
{"lineNum":"  599","line":"        }"},
{"lineNum":"  600","line":"    }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3184","possible_hits":"1",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"test \"can parse dot expression\" {","class":"lineCov","hits":"2","order":"3794","possible_hits":"2",},
{"lineNum":"  606","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3813","possible_hits":"1",},
{"lineNum":"  607","line":"        .expr = \"a.b.c\","},
{"lineNum":"  608","line":"        .startingCh = 3,"},
{"lineNum":"  609","line":"        .check = (struct {"},
{"lineNum":"  610","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3804","possible_hits":"2",},
{"lineNum":"  611","line":"                try expectEqual(NodeType.Dot, value.getType());","class":"lineCov","hits":"1","order":"3805","possible_hits":"1",},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"                const second = value.data.Dot;","class":"linePartCov","hits":"2","order":"3806","possible_hits":"3",},
{"lineNum":"  614","line":"                try expectEqualStrings(\"c\", second.ident);","class":"linePartCov","hits":"1","order":"3807","possible_hits":"2",},
{"lineNum":"  615","line":"                try expectEqual(NodeType.Dot, second.expr.getType());","class":"lineCov","hits":"1","order":"3808","possible_hits":"1",},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"                const first = second.expr.data.Dot;","class":"linePartCov","hits":"2","order":"3809","possible_hits":"3",},
{"lineNum":"  618","line":"                try expectEqualStrings(\"b\", first.ident);","class":"linePartCov","hits":"1","order":"3810","possible_hits":"2",},
{"lineNum":"  619","line":"                try expectEqual(NodeType.Ident, first.expr.getType());","class":"lineCov","hits":"1","order":"3811","possible_hits":"1",},
{"lineNum":"  620","line":"                try expectEqualStrings(\"a\", first.expr.data.Ident);","class":"lineCov","hits":"2","order":"3812","possible_hits":"2",},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":"        }).check,"},
{"lineNum":"  623","line":"    }).run();","class":"lineCov","hits":"1","order":"3795","possible_hits":"1",},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"can parse array access expression\" {","class":"lineCov","hits":"2","order":"3814","possible_hits":"2",},
{"lineNum":"  627","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3837","possible_hits":"1",},
{"lineNum":"  628","line":"        .expr = \"a[b][c]\","},
{"lineNum":"  629","line":"        .startingCh = 4,"},
{"lineNum":"  630","line":"        .check = (struct {"},
{"lineNum":"  631","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3826","possible_hits":"2",},
{"lineNum":"  632","line":"                try expectEqual(NodeType.ArrayAccess, value.getType());","class":"lineCov","hits":"1","order":"3827","possible_hits":"1",},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"                const second = value.data.ArrayAccess;","class":"linePartCov","hits":"2","order":"3828","possible_hits":"3",},
{"lineNum":"  635","line":"                try expectEqual(NodeType.Ident, second.index.getType());","class":"linePartCov","hits":"1","order":"3829","possible_hits":"2",},
{"lineNum":"  636","line":"                try expectEqualStrings(\"c\", second.index.data.Ident);","class":"lineCov","hits":"2","order":"3830","possible_hits":"2",},
{"lineNum":"  637","line":"                try expectEqual(NodeType.ArrayAccess, second.expr.getType());","class":"lineCov","hits":"1","order":"3831","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"                const first = second.expr.data.ArrayAccess;","class":"linePartCov","hits":"2","order":"3832","possible_hits":"3",},
{"lineNum":"  640","line":"                try expectEqual(NodeType.Ident, first.index.getType());","class":"linePartCov","hits":"1","order":"3833","possible_hits":"2",},
{"lineNum":"  641","line":"                try expectEqualStrings(\"b\", first.index.data.Ident);","class":"lineCov","hits":"2","order":"3834","possible_hits":"2",},
{"lineNum":"  642","line":"                try expectEqual(NodeType.Ident, first.expr.getType());","class":"lineCov","hits":"1","order":"3835","possible_hits":"1",},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"                try expectEqualStrings(\"a\", first.expr.data.Ident);","class":"lineCov","hits":"2","order":"3836","possible_hits":"2",},
{"lineNum":"  645","line":"            }"},
{"lineNum":"  646","line":"        }).check,"},
{"lineNum":"  647","line":"    }).run();","class":"lineCov","hits":"1","order":"3815","possible_hits":"1",},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"test \"can parse function call without arguments\" {","class":"lineCov","hits":"2","order":"3838","possible_hits":"2",},
{"lineNum":"  651","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3855","possible_hits":"1",},
{"lineNum":"  652","line":"        .expr = \"a()\","},
{"lineNum":"  653","line":"        .startingCh = 1,"},
{"lineNum":"  654","line":"        .check = (struct {"},
{"lineNum":"  655","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3849","possible_hits":"2",},
{"lineNum":"  656","line":"                try expectEqual(NodeType.Call, value.getType());","class":"lineCov","hits":"1","order":"3850","possible_hits":"1",},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"                const call = value.data.Call;","class":"linePartCov","hits":"2","order":"3851","possible_hits":"3",},
{"lineNum":"  659","line":"                try expectEqual(NodeType.Ident, call.expr.getType());","class":"linePartCov","hits":"1","order":"3852","possible_hits":"2",},
{"lineNum":"  660","line":"                try expectEqualStrings(\"a\", call.expr.data.Ident);","class":"lineCov","hits":"2","order":"3853","possible_hits":"2",},
{"lineNum":"  661","line":"                try expectEqual(@intCast(usize, 0), call.args.items.len);","class":"lineCov","hits":"1","order":"3854","possible_hits":"1",},
{"lineNum":"  662","line":"            }"},
{"lineNum":"  663","line":"        }).check,"},
{"lineNum":"  664","line":"    }).run();","class":"lineCov","hits":"1","order":"3839","possible_hits":"1",},
{"lineNum":"  665","line":"}"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"test \"can parse function call with arguments\" {","class":"lineCov","hits":"2","order":"3856","possible_hits":"2",},
{"lineNum":"  668","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3879","possible_hits":"1",},
{"lineNum":"  669","line":"        .expr = \"a(b, true, 4)\","},
{"lineNum":"  670","line":"        .startingCh = 1,"},
{"lineNum":"  671","line":"        .check = (struct {"},
{"lineNum":"  672","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3867","possible_hits":"2",},
{"lineNum":"  673","line":"                try expectEqual(NodeType.Call, value.getType());","class":"lineCov","hits":"1","order":"3868","possible_hits":"1",},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"                const call = value.data.Call;","class":"linePartCov","hits":"2","order":"3869","possible_hits":"3",},
{"lineNum":"  676","line":"                try expectEqual(NodeType.Ident, call.expr.getType());","class":"linePartCov","hits":"1","order":"3870","possible_hits":"2",},
{"lineNum":"  677","line":"                try expectEqualStrings(\"a\", call.expr.data.Ident);","class":"lineCov","hits":"2","order":"3871","possible_hits":"2",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"                const args = call.args.items;","class":"lineCov","hits":"1","order":"3872","possible_hits":"1",},
{"lineNum":"  680","line":"                try expectEqual(@intCast(usize, 3), args.len);","class":"lineCov","hits":"1","order":"3873","possible_hits":"1",},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"                try expectEqual(NodeType.Ident, args[0].getType());","class":"linePartCov","hits":"1","order":"3874","possible_hits":"2",},
{"lineNum":"  683","line":"                try expectEqualStrings(\"b\", args[0].data.Ident);","class":"linePartCov","hits":"1","order":"3875","possible_hits":"2",},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"                try expectEqual(NodeType.True, args[1].getType());","class":"linePartCov","hits":"1","order":"3876","possible_hits":"2",},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"                try expectEqual(NodeType.Int, args[2].getType());","class":"linePartCov","hits":"1","order":"3877","possible_hits":"2",},
{"lineNum":"  688","line":"                try expectEqualStrings(\"4\", args[2].data.Int);","class":"linePartCov","hits":"1","order":"3878","possible_hits":"2",},
{"lineNum":"  689","line":"            }"},
{"lineNum":"  690","line":"        }).check,"},
{"lineNum":"  691","line":"    }).run();","class":"lineCov","hits":"1","order":"3857","possible_hits":"1",},
{"lineNum":"  692","line":"}"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"fn parseNewExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3167","possible_hits":"1",},
{"lineNum":"  695","line":"    if (psr.lexer.token.ty != .New)","class":"lineCov","hits":"2","order":"3168","possible_hits":"2",},
{"lineNum":"  696","line":"        return parseMemberExpr(psr);","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3882","possible_hits":"1",},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3883","possible_hits":"1",},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"    const res = parseMemberExpr(psr);","class":"lineCov","hits":"1","order":"3884","possible_hits":"1",},
{"lineNum":"  703","line":"    return switch (res) {","class":"linePartCov","hits":"2","order":"3885","possible_hits":"4",},
{"lineNum":"  704","line":"        .Success => |nd| ParseResult.success(makeNode(","class":"lineCov","hits":"2","order":"3886","possible_hits":"2",},
{"lineNum":"  705","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3887","possible_hits":"1",},
{"lineNum":"  706","line":"            csr,"},
{"lineNum":"  707","line":"            .New,"},
{"lineNum":"  708","line":"            nd,","class":"lineCov","hits":"1","order":"3888","possible_hits":"1",},
{"lineNum":"  709","line":"        )),"},
{"lineNum":"  710","line":"        .Error => res,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"        .NoMatch => ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"            \"expression after \'new\'\","},
{"lineNum":"  713","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  714","line":"        ),"},
{"lineNum":"  715","line":"    };"},
{"lineNum":"  716","line":"}"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"test \"can parse new expressions\" {","class":"lineCov","hits":"2","order":"3880","possible_hits":"2",},
{"lineNum":"  719","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3901","possible_hits":"1",},
{"lineNum":"  720","line":"        .expr = \"new Ty(a, 0, false)\","},
{"lineNum":"  721","line":"        .check = (struct {"},
{"lineNum":"  722","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3889","possible_hits":"2",},
{"lineNum":"  723","line":"                try expectEqual(NodeType.New, value.getType());","class":"lineCov","hits":"1","order":"3890","possible_hits":"1",},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"                const new = value.data.New;","class":"linePartCov","hits":"2","order":"3891","possible_hits":"3",},
{"lineNum":"  726","line":"                try expectEqual(NodeType.Call, new.getType());","class":"linePartCov","hits":"1","order":"3892","possible_hits":"2",},
{"lineNum":"  727","line":"                try expectEqualStrings(\"Ty\", new.data.Call.expr.data.Ident);","class":"lineCov","hits":"2","order":"3893","possible_hits":"2",},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"                const args = new.data.Call.args.items;","class":"linePartCov","hits":"2","order":"3894","possible_hits":"3",},
{"lineNum":"  730","line":"                try expectEqual(@intCast(usize, 3), args.len);","class":"linePartCov","hits":"1","order":"3895","possible_hits":"2",},
{"lineNum":"  731","line":"                try expectEqual(NodeType.Ident, args[0].getType());","class":"linePartCov","hits":"1","order":"3896","possible_hits":"2",},
{"lineNum":"  732","line":"                try expectEqualStrings(\"a\", args[0].data.Ident);","class":"linePartCov","hits":"1","order":"3897","possible_hits":"2",},
{"lineNum":"  733","line":"                try expectEqual(NodeType.Int, args[1].getType());","class":"linePartCov","hits":"1","order":"3898","possible_hits":"2",},
{"lineNum":"  734","line":"                try expectEqualStrings(\"0\", args[1].data.Int);","class":"linePartCov","hits":"1","order":"3899","possible_hits":"2",},
{"lineNum":"  735","line":"                try expectEqual(NodeType.False, args[2].getType());","class":"linePartCov","hits":"1","order":"3900","possible_hits":"2",},
{"lineNum":"  736","line":"            }"},
{"lineNum":"  737","line":"        }).check,"},
{"lineNum":"  738","line":"    }).run();","class":"lineCov","hits":"1","order":"3881","possible_hits":"1",},
{"lineNum":"  739","line":"}"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"fn parsePostfixExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3165","possible_hits":"1",},
{"lineNum":"  742","line":"    const res = parseNewExpr(psr);","class":"lineCov","hits":"1","order":"3166","possible_hits":"1",},
{"lineNum":"  743","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"3185","possible_hits":"2",},
{"lineNum":"  744","line":"        return res;","class":"lineCov","hits":"1","order":"4483","possible_hits":"1",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    var left = res.Success;","class":"linePartCov","hits":"2","order":"3186","possible_hits":"3",},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    while (true) {","class":"lineCov","hits":"3","order":"3187","possible_hits":"3",},
{"lineNum":"  749","line":"        if (psr.lexer.token.ty == .Inc) {","class":"lineCov","hits":"3","order":"3188","possible_hits":"3",},
{"lineNum":"  750","line":"            left = makeNode(","class":"lineCov","hits":"1","order":"3907","possible_hits":"1",},
{"lineNum":"  751","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3904","possible_hits":"1",},
{"lineNum":"  752","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3905","possible_hits":"1",},
{"lineNum":"  753","line":"                .PostfixOp,"},
{"lineNum":"  754","line":"                node.UnaryOp.new(.Inc, left),","class":"lineCov","hits":"1","order":"3906","possible_hits":"1",},
{"lineNum":"  755","line":"            );"},
{"lineNum":"  756","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3908","possible_hits":"1",},
{"lineNum":"  757","line":"        } else if (psr.lexer.token.ty == .Dec) {","class":"lineCov","hits":"1","order":"3189","possible_hits":"1",},
{"lineNum":"  758","line":"            left = makeNode(","class":"lineCov","hits":"1","order":"5010","possible_hits":"1",},
{"lineNum":"  759","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"5007","possible_hits":"1",},
{"lineNum":"  760","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"5008","possible_hits":"1",},
{"lineNum":"  761","line":"                .PostfixOp,"},
{"lineNum":"  762","line":"                node.UnaryOp.new(.Dec, left),","class":"lineCov","hits":"1","order":"5009","possible_hits":"1",},
{"lineNum":"  763","line":"            );"},
{"lineNum":"  764","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"5011","possible_hits":"1",},
{"lineNum":"  765","line":"        } else {"},
{"lineNum":"  766","line":"            return ParseResult.success(left);","class":"lineCov","hits":"1","order":"3190","possible_hits":"1",},
{"lineNum":"  767","line":"        }"},
{"lineNum":"  768","line":"    }"},
{"lineNum":"  769","line":"}"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"test \"can parse postfix unary operator expressions\" {","class":"lineCov","hits":"2","order":"3902","possible_hits":"2",},
{"lineNum":"  772","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3915","possible_hits":"1",},
{"lineNum":"  773","line":"        .expr = \"b++\","},
{"lineNum":"  774","line":"        .startingCh = 1,"},
{"lineNum":"  775","line":"        .check = (struct {"},
{"lineNum":"  776","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3909","possible_hits":"2",},
{"lineNum":"  777","line":"                try expectEqual(NodeType.PostfixOp, value.getType());","class":"lineCov","hits":"1","order":"3910","possible_hits":"1",},
{"lineNum":"  778","line":"                const data = value.data.PostfixOp;","class":"linePartCov","hits":"2","order":"3911","possible_hits":"3",},
{"lineNum":"  779","line":"                try expectEqual(TokenType.Inc, data.op);","class":"linePartCov","hits":"1","order":"3912","possible_hits":"2",},
{"lineNum":"  780","line":"                try expectEqual(NodeType.Ident, data.expr.getType());","class":"lineCov","hits":"1","order":"3913","possible_hits":"1",},
{"lineNum":"  781","line":"                try expectEqualStrings(\"b\", data.expr.data.Ident);","class":"lineCov","hits":"2","order":"3914","possible_hits":"2",},
{"lineNum":"  782","line":"            }"},
{"lineNum":"  783","line":"        }).check,"},
{"lineNum":"  784","line":"    }).run();","class":"lineCov","hits":"1","order":"3903","possible_hits":"1",},
{"lineNum":"  785","line":"}"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"fn parsePrefixExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":"  788","line":"    const op = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"3163","possible_hits":"1",},
{"lineNum":"  789","line":"        .Delete,"},
{"lineNum":"  790","line":"        .Void,"},
{"lineNum":"  791","line":"        .TypeOf,"},
{"lineNum":"  792","line":"        .Inc,"},
{"lineNum":"  793","line":"        .Dec,"},
{"lineNum":"  794","line":"        .Add,"},
{"lineNum":"  795","line":"        .Sub,"},
{"lineNum":"  796","line":"        .BitNot,"},
{"lineNum":"  797","line":"        .LogicalNot,"},
{"lineNum":"  798","line":"        => psr.lexer.token,","class":"lineCov","hits":"1","order":"3918","possible_hits":"1",},
{"lineNum":"  799","line":"        else => return parsePostfixExpr(psr),","class":"lineCov","hits":"1","order":"3164","possible_hits":"1",},
{"lineNum":"  800","line":"    };"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3919","possible_hits":"1",},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    const expr = parsePrefixExpr(psr);","class":"lineCov","hits":"1","order":"3920","possible_hits":"1",},
{"lineNum":"  805","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"3921","possible_hits":"2",},
{"lineNum":"  806","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3925","possible_hits":"1",},
{"lineNum":"  809","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3922","possible_hits":"1",},
{"lineNum":"  810","line":"        op.csr,","class":"lineCov","hits":"1","order":"3923","possible_hits":"1",},
{"lineNum":"  811","line":"        .PrefixOp,"},
{"lineNum":"  812","line":"        node.UnaryOp.new(op.ty, expr.Success),","class":"linePartCov","hits":"1","order":"3924","possible_hits":"2",},
{"lineNum":"  813","line":"    ));"},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"test \"can parse prefix unary operator expressions\" {","class":"lineCov","hits":"2","order":"3916","possible_hits":"2",},
{"lineNum":"  817","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"3932","possible_hits":"1",},
{"lineNum":"  818","line":"        .expr = \"++b\","},
{"lineNum":"  819","line":"        .check = (struct {"},
{"lineNum":"  820","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3926","possible_hits":"2",},
{"lineNum":"  821","line":"                try expectEqual(NodeType.PrefixOp, value.getType());","class":"lineCov","hits":"1","order":"3927","possible_hits":"1",},
{"lineNum":"  822","line":"                const data = value.data.PrefixOp;","class":"linePartCov","hits":"2","order":"3928","possible_hits":"3",},
{"lineNum":"  823","line":"                try expectEqual(TokenType.Inc, data.op);","class":"linePartCov","hits":"1","order":"3929","possible_hits":"2",},
{"lineNum":"  824","line":"                try expectEqual(NodeType.Ident, data.expr.getType());","class":"lineCov","hits":"1","order":"3930","possible_hits":"1",},
{"lineNum":"  825","line":"                try expectEqualStrings(\"b\", data.expr.data.Ident);","class":"lineCov","hits":"2","order":"3931","possible_hits":"2",},
{"lineNum":"  826","line":"            }"},
{"lineNum":"  827","line":"        }).check,"},
{"lineNum":"  828","line":"    }).run();","class":"lineCov","hits":"1","order":"3917","possible_hits":"1",},
{"lineNum":"  829","line":"}"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"fn BinaryOpParser("},
{"lineNum":"  832","line":"    next: fn (psr: *TsParser) ParseResult,"},
{"lineNum":"  833","line":"    tokens: []const TokenType,"},
{"lineNum":"  834","line":") type {"},
{"lineNum":"  835","line":"    return struct {"},
{"lineNum":"  836","line":"        pub fn parse(psr: *TsParser) ParseResult {","class":"lineCov","hits":"11","order":"3158","possible_hits":"11",},
{"lineNum":"  837","line":"            const res = next(psr);","class":"lineCov","hits":"11","order":"3159","possible_hits":"11",},
{"lineNum":"  838","line":"            if (!res.isSuccess())","class":"lineCov","hits":"22","order":"3191","possible_hits":"22",},
{"lineNum":"  839","line":"                return res;","class":"lineCov","hits":"11","order":"4484","possible_hits":"11",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"            var left = res.Success;","class":"linePartCov","hits":"22","order":"3192","possible_hits":"33",},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"            opLoop: while (true) {","class":"lineCov","hits":"22","order":"3193","possible_hits":"22",},
{"lineNum":"  844","line":"                inline for (tokens) |tkn| {"},
{"lineNum":"  845","line":"                    if (psr.lexer.token.ty == tkn) {","class":"lineCov","hits":"46","order":"3194","possible_hits":"46",},
{"lineNum":"  846","line":"                        const op = psr.lexer.token;","class":"lineCov","hits":"35","order":"3937","possible_hits":"35",},
{"lineNum":"  847","line":"                        _ = psr.lexer.next();","class":"lineCov","hits":"35","order":"3938","possible_hits":"35",},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"                        const right = next(psr);","class":"lineCov","hits":"35","order":"3939","possible_hits":"35",},
{"lineNum":"  850","line":"                        if (!right.isSuccess())","class":"lineCov","hits":"70","order":"3940","possible_hits":"70",},
{"lineNum":"  851","line":"                            return right;","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"                        left = makeNode(","class":"lineCov","hits":"35","order":"3944","possible_hits":"35",},
{"lineNum":"  854","line":"                            psr.getAllocator(),","class":"lineCov","hits":"35","order":"3941","possible_hits":"35",},
{"lineNum":"  855","line":"                            op.csr,","class":"lineCov","hits":"35","order":"3942","possible_hits":"35",},
{"lineNum":"  856","line":"                            .BinaryOp,"},
{"lineNum":"  857","line":"                            node.BinaryOp.new(op.ty, left, right.Success),","class":"linePartCov","hits":"46","order":"3943","possible_hits":"81",},
{"lineNum":"  858","line":"                        );"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"                        continue :opLoop;","class":"lineCov","hits":"35","order":"3945","possible_hits":"35",},
{"lineNum":"  861","line":"                    }"},
{"lineNum":"  862","line":"                }"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"                return ParseResult.success(left);","class":"lineCov","hits":"11","order":"3195","possible_hits":"11",},
{"lineNum":"  865","line":"            }"},
{"lineNum":"  866","line":"        }"},
{"lineNum":"  867","line":"    };"},
{"lineNum":"  868","line":"}"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"const mulOpParser = BinaryOpParser("},
{"lineNum":"  871","line":"    parsePrefixExpr,"},
{"lineNum":"  872","line":"    &[_]TokenType{ .Mul, .Div, .Mod },"},
{"lineNum":"  873","line":");"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"const addOpParser = BinaryOpParser("},
{"lineNum":"  876","line":"    mulOpParser.parse,"},
{"lineNum":"  877","line":"    &[_]TokenType{ .Add, .Sub },"},
{"lineNum":"  878","line":");"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"const shiftOpParser = BinaryOpParser("},
{"lineNum":"  881","line":"    addOpParser.parse,"},
{"lineNum":"  882","line":"    &[_]TokenType{ .ShiftLeft, .ShiftRight, .ShiftRightUnsigned },"},
{"lineNum":"  883","line":");"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"const relationalOpParser = BinaryOpParser("},
{"lineNum":"  886","line":"    shiftOpParser.parse,"},
{"lineNum":"  887","line":"    &[_]TokenType{"},
{"lineNum":"  888","line":"        .CmpGreater,"},
{"lineNum":"  889","line":"        .CmpLess,"},
{"lineNum":"  890","line":"        .CmpGreaterEq,"},
{"lineNum":"  891","line":"        .CmpLessEq,"},
{"lineNum":"  892","line":"        .InstanceOf,"},
{"lineNum":"  893","line":"        .In,"},
{"lineNum":"  894","line":"    },"},
{"lineNum":"  895","line":");"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"const equalityOpParser = BinaryOpParser("},
{"lineNum":"  898","line":"    relationalOpParser.parse,"},
{"lineNum":"  899","line":"    &[_]TokenType{ .CmpEq, .CmpNotEq, .CmpStrictEq, .CmpStrictNotEq },"},
{"lineNum":"  900","line":");"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"const bitAndOpParser = BinaryOpParser("},
{"lineNum":"  903","line":"    equalityOpParser.parse,"},
{"lineNum":"  904","line":"    &[_]TokenType{.BitAnd},"},
{"lineNum":"  905","line":");"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"const bitXorOpParser = BinaryOpParser("},
{"lineNum":"  908","line":"    bitAndOpParser.parse,"},
{"lineNum":"  909","line":"    &[_]TokenType{.BitXor},"},
{"lineNum":"  910","line":");"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"const bitOrOpParser = BinaryOpParser("},
{"lineNum":"  913","line":"    bitXorOpParser.parse,"},
{"lineNum":"  914","line":"    &[_]TokenType{.BitOr},"},
{"lineNum":"  915","line":");"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"const logAndOpParser = BinaryOpParser("},
{"lineNum":"  918","line":"    bitOrOpParser.parse,"},
{"lineNum":"  919","line":"    &[_]TokenType{.LogicalAnd},"},
{"lineNum":"  920","line":");"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"const logOrOpParser = BinaryOpParser("},
{"lineNum":"  923","line":"    logAndOpParser.parse,"},
{"lineNum":"  924","line":"    &[_]TokenType{.LogicalOr},"},
{"lineNum":"  925","line":");"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"fn parseTernaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3160","possible_hits":"1",},
{"lineNum":"  928","line":"    const left = logOrOpParser.parse(psr);","class":"lineCov","hits":"1","order":"3161","possible_hits":"1",},
{"lineNum":"  929","line":"    if (!left.isSuccess())","class":"lineCov","hits":"2","order":"3196","possible_hits":"2",},
{"lineNum":"  930","line":"        return left;","class":"lineCov","hits":"1","order":"4485","possible_hits":"1",},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"    if (psr.lexer.token.ty != .Question)","class":"lineCov","hits":"2","order":"3197","possible_hits":"2",},
{"lineNum":"  933","line":"        return left;","class":"lineCov","hits":"1","order":"3198","possible_hits":"1",},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4000","possible_hits":"1",},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4001","possible_hits":"1",},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"    const ifTrue = assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"4002","possible_hits":"1",},
{"lineNum":"  940","line":"    if (!ifTrue.isSuccess())","class":"lineCov","hits":"2","order":"4003","possible_hits":"2",},
{"lineNum":"  941","line":"        return ifTrue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"    if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"4004","possible_hits":"2",},
{"lineNum":"  944","line":"        return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4005","possible_hits":"1",},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"    const ifFalse = assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"4006","possible_hits":"1",},
{"lineNum":"  949","line":"    if (!ifFalse.isSuccess())","class":"lineCov","hits":"2","order":"4007","possible_hits":"2",},
{"lineNum":"  950","line":"        return ifFalse;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4010","possible_hits":"1",},
{"lineNum":"  953","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4008","possible_hits":"1",},
{"lineNum":"  954","line":"        csr,"},
{"lineNum":"  955","line":"        .Ternary,"},
{"lineNum":"  956","line":"        node.Ternary.new(left.Success, ifTrue.Success, ifFalse.Success),","class":"linePartCov","hits":"1","order":"4009","possible_hits":"2",},
{"lineNum":"  957","line":"    ));"},
{"lineNum":"  958","line":"}"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"const assignOpParser = BinaryOpParser("},
{"lineNum":"  961","line":"    parseTernaryExpr,"},
{"lineNum":"  962","line":"    &[_]TokenType{"},
{"lineNum":"  963","line":"        .Assign,"},
{"lineNum":"  964","line":"        .AddAssign,"},
{"lineNum":"  965","line":"        .SubAssign,"},
{"lineNum":"  966","line":"        .MulAssign,"},
{"lineNum":"  967","line":"        .DivAssign,"},
{"lineNum":"  968","line":"        .ModAssign,"},
{"lineNum":"  969","line":"        .ShiftLeftAssign,"},
{"lineNum":"  970","line":"        .ShiftRightAssign,"},
{"lineNum":"  971","line":"        .ShiftRightUnsignedAssign,"},
{"lineNum":"  972","line":"        .BitAndAssign,"},
{"lineNum":"  973","line":"        .BitOrAssign,"},
{"lineNum":"  974","line":"        .BitXorAssign,"},
{"lineNum":"  975","line":"    },"},
{"lineNum":"  976","line":");"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"fn parseBinaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3156","possible_hits":"1",},
{"lineNum":"  979","line":"    return assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"3157","possible_hits":"1",},
{"lineNum":"  980","line":"}"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"fn BinaryOpTestCase(op: []const u8, ty: TokenType) type {"},
{"lineNum":"  983","line":"    return struct {"},
{"lineNum":"  984","line":"        pub fn run() !void {","class":"lineCov","hits":"70","order":"3935","possible_hits":"70",},
{"lineNum":"  985","line":"            try (ExprTestCase{","class":"lineCov","hits":"35","order":"3954","possible_hits":"35",},
{"lineNum":"  986","line":"                .expr = \"a \" ++ op ++ \" b\","},
{"lineNum":"  987","line":"                .startingCh = 2,"},
{"lineNum":"  988","line":"                .check = @This().check,"},
{"lineNum":"  989","line":"            }).run();","class":"lineCov","hits":"35","order":"3936","possible_hits":"35",},
{"lineNum":"  990","line":"        }"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"        fn check(value: Node) anyerror!void {","class":"lineCov","hits":"70","order":"3946","possible_hits":"70",},
{"lineNum":"  993","line":"            try expectEqual(NodeType.BinaryOp, value.getType());","class":"lineCov","hits":"35","order":"3947","possible_hits":"35",},
{"lineNum":"  994","line":"            const data = value.data.BinaryOp;","class":"linePartCov","hits":"70","order":"3948","possible_hits":"105",},
{"lineNum":"  995","line":"            try expectEqual(ty, data.op);","class":"linePartCov","hits":"35","order":"3949","possible_hits":"70",},
{"lineNum":"  996","line":"            try expectEqual(NodeType.Ident, data.left.getType());","class":"lineCov","hits":"35","order":"3950","possible_hits":"35",},
{"lineNum":"  997","line":"            try expectEqualStrings(\"a\", data.left.data.Ident);","class":"lineCov","hits":"70","order":"3951","possible_hits":"70",},
{"lineNum":"  998","line":"            try expectEqual(NodeType.Ident, data.right.getType());","class":"lineCov","hits":"35","order":"3952","possible_hits":"35",},
{"lineNum":"  999","line":"            try expectEqualStrings(\"b\", data.right.data.Ident);","class":"lineCov","hits":"70","order":"3953","possible_hits":"70",},
{"lineNum":" 1000","line":"        }"},
{"lineNum":" 1001","line":"    };"},
{"lineNum":" 1002","line":"}"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"test \"can parse mul binary expressions\" {","class":"lineCov","hits":"2","order":"3933","possible_hits":"2",},
{"lineNum":" 1005","line":"    try BinaryOpTestCase(\"*\", .Mul).run();","class":"lineCov","hits":"1","order":"3934","possible_hits":"1",},
{"lineNum":" 1006","line":"    try BinaryOpTestCase(\"/\", .Div).run();","class":"lineCov","hits":"1","order":"3955","possible_hits":"1",},
{"lineNum":" 1007","line":"    try BinaryOpTestCase(\"%\", .Mod).run();","class":"lineCov","hits":"1","order":"3958","possible_hits":"1",},
{"lineNum":" 1008","line":"}"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"test \"can parse add binary expressions\" {","class":"lineCov","hits":"2","order":"3959","possible_hits":"2",},
{"lineNum":" 1011","line":"    try BinaryOpTestCase(\"+\", .Add).run();","class":"lineCov","hits":"1","order":"3960","possible_hits":"1",},
{"lineNum":" 1012","line":"    try BinaryOpTestCase(\"-\", .Sub).run();","class":"lineCov","hits":"1","order":"3961","possible_hits":"1",},
{"lineNum":" 1013","line":"}"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"test \"can parse shift binary expressions\" {","class":"lineCov","hits":"2","order":"3962","possible_hits":"2",},
{"lineNum":" 1016","line":"    try BinaryOpTestCase(\"<<\", .ShiftLeft).run();","class":"lineCov","hits":"1","order":"3963","possible_hits":"1",},
{"lineNum":" 1017","line":"    try BinaryOpTestCase(\">>\", .ShiftRight).run();","class":"lineCov","hits":"1","order":"3964","possible_hits":"1",},
{"lineNum":" 1018","line":"    try BinaryOpTestCase(\">>>\", .ShiftRightUnsigned).run();","class":"lineCov","hits":"1","order":"3965","possible_hits":"1",},
{"lineNum":" 1019","line":"}"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"test \"can parse relational binary expressions\" {","class":"lineCov","hits":"2","order":"3966","possible_hits":"2",},
{"lineNum":" 1022","line":"    try BinaryOpTestCase(\">\", .CmpGreater).run();","class":"lineCov","hits":"1","order":"3967","possible_hits":"1",},
{"lineNum":" 1023","line":"    try BinaryOpTestCase(\"<\", .CmpLess).run();","class":"lineCov","hits":"1","order":"3968","possible_hits":"1",},
{"lineNum":" 1024","line":"    try BinaryOpTestCase(\">=\", .CmpGreaterEq).run();","class":"lineCov","hits":"1","order":"3969","possible_hits":"1",},
{"lineNum":" 1025","line":"    try BinaryOpTestCase(\"<=\", .CmpLessEq).run();","class":"lineCov","hits":"1","order":"3970","possible_hits":"1",},
{"lineNum":" 1026","line":"    try BinaryOpTestCase(\"instanceof\", .InstanceOf).run();","class":"lineCov","hits":"1","order":"3971","possible_hits":"1",},
{"lineNum":" 1027","line":"    try BinaryOpTestCase(\"in\", .In).run();","class":"lineCov","hits":"1","order":"3972","possible_hits":"1",},
{"lineNum":" 1028","line":"}"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"test \"can parse equality binary expressions\" {","class":"lineCov","hits":"2","order":"3973","possible_hits":"2",},
{"lineNum":" 1031","line":"    try BinaryOpTestCase(\"==\", .CmpEq).run();","class":"lineCov","hits":"1","order":"3974","possible_hits":"1",},
{"lineNum":" 1032","line":"    try BinaryOpTestCase(\"!=\", .CmpNotEq).run();","class":"lineCov","hits":"1","order":"3975","possible_hits":"1",},
{"lineNum":" 1033","line":"    try BinaryOpTestCase(\"===\", .CmpStrictEq).run();","class":"lineCov","hits":"1","order":"3976","possible_hits":"1",},
{"lineNum":" 1034","line":"    try BinaryOpTestCase(\"!==\", .CmpStrictNotEq).run();","class":"lineCov","hits":"1","order":"3977","possible_hits":"1",},
{"lineNum":" 1035","line":"}"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"test \"can parse bitwise binary expressions\" {","class":"lineCov","hits":"2","order":"3978","possible_hits":"2",},
{"lineNum":" 1038","line":"    try BinaryOpTestCase(\"&\", .BitAnd).run();","class":"lineCov","hits":"1","order":"3979","possible_hits":"1",},
{"lineNum":" 1039","line":"    try BinaryOpTestCase(\"^\", .BitXor).run();","class":"lineCov","hits":"1","order":"3980","possible_hits":"1",},
{"lineNum":" 1040","line":"    try BinaryOpTestCase(\"|\", .BitOr).run();","class":"lineCov","hits":"1","order":"3981","possible_hits":"1",},
{"lineNum":" 1041","line":"}"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"test \"can parse logical binary expressions\" {","class":"lineCov","hits":"2","order":"3982","possible_hits":"2",},
{"lineNum":" 1044","line":"    try BinaryOpTestCase(\"&&\", .LogicalAnd).run();","class":"lineCov","hits":"1","order":"3983","possible_hits":"1",},
{"lineNum":" 1045","line":"    try BinaryOpTestCase(\"||\", .LogicalOr).run();","class":"lineCov","hits":"1","order":"3984","possible_hits":"1",},
{"lineNum":" 1046","line":"}"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"test \"can parse assignment binary expressions\" {","class":"lineCov","hits":"2","order":"3985","possible_hits":"2",},
{"lineNum":" 1049","line":"    try BinaryOpTestCase(\"=\", .Assign).run();","class":"lineCov","hits":"1","order":"3986","possible_hits":"1",},
{"lineNum":" 1050","line":"    try BinaryOpTestCase(\"+=\", .AddAssign).run();","class":"lineCov","hits":"1","order":"3987","possible_hits":"1",},
{"lineNum":" 1051","line":"    try BinaryOpTestCase(\"-=\", .SubAssign).run();","class":"lineCov","hits":"1","order":"3988","possible_hits":"1",},
{"lineNum":" 1052","line":"    try BinaryOpTestCase(\"*=\", .MulAssign).run();","class":"lineCov","hits":"1","order":"3989","possible_hits":"1",},
{"lineNum":" 1053","line":"    try BinaryOpTestCase(\"/=\", .DivAssign).run();","class":"lineCov","hits":"1","order":"3990","possible_hits":"1",},
{"lineNum":" 1054","line":"    try BinaryOpTestCase(\"%=\", .ModAssign).run();","class":"lineCov","hits":"1","order":"3991","possible_hits":"1",},
{"lineNum":" 1055","line":"    try BinaryOpTestCase(\"<<=\", .ShiftLeftAssign).run();","class":"lineCov","hits":"1","order":"3992","possible_hits":"1",},
{"lineNum":" 1056","line":"    try BinaryOpTestCase(\">>=\", .ShiftRightAssign).run();","class":"lineCov","hits":"1","order":"3993","possible_hits":"1",},
{"lineNum":" 1057","line":"    try BinaryOpTestCase(\">>>=\", .ShiftRightUnsignedAssign).run();","class":"lineCov","hits":"1","order":"3994","possible_hits":"1",},
{"lineNum":" 1058","line":"    try BinaryOpTestCase(\"&=\", .BitAndAssign).run();","class":"lineCov","hits":"1","order":"3995","possible_hits":"1",},
{"lineNum":" 1059","line":"    try BinaryOpTestCase(\"|=\", .BitOrAssign).run();","class":"lineCov","hits":"1","order":"3996","possible_hits":"1",},
{"lineNum":" 1060","line":"    try BinaryOpTestCase(\"^=\", .BitXorAssign).run();","class":"lineCov","hits":"1","order":"3997","possible_hits":"1",},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"test \"can parse ternary expressions\" {","class":"lineCov","hits":"2","order":"3998","possible_hits":"2",},
{"lineNum":" 1064","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"4020","possible_hits":"1",},
{"lineNum":" 1065","line":"        .expr = \"a ? 1 : \'abc\'\","},
{"lineNum":" 1066","line":"        .startingCh = 2,"},
{"lineNum":" 1067","line":"        .check = (struct {"},
{"lineNum":" 1068","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4011","possible_hits":"2",},
{"lineNum":" 1069","line":"                try expectEqual(NodeType.Ternary, value.getType());","class":"lineCov","hits":"1","order":"4012","possible_hits":"1",},
{"lineNum":" 1070","line":"                const ternary = value.data.Ternary;","class":"linePartCov","hits":"2","order":"4013","possible_hits":"3",},
{"lineNum":" 1071","line":"                try expectEqual(NodeType.Ident, ternary.cond.getType());","class":"linePartCov","hits":"1","order":"4014","possible_hits":"2",},
{"lineNum":" 1072","line":"                try expectEqualStrings(\"a\", ternary.cond.data.Ident);","class":"lineCov","hits":"2","order":"4015","possible_hits":"2",},
{"lineNum":" 1073","line":"                try expectEqual(NodeType.Int, ternary.ifTrue.getType());","class":"lineCov","hits":"1","order":"4016","possible_hits":"1",},
{"lineNum":" 1074","line":"                try expectEqualStrings(\"1\", ternary.ifTrue.data.Int);","class":"lineCov","hits":"2","order":"4017","possible_hits":"2",},
{"lineNum":" 1075","line":"                try expectEqual(NodeType.String, ternary.ifFalse.getType());","class":"lineCov","hits":"1","order":"4018","possible_hits":"1",},
{"lineNum":" 1076","line":"                try expectEqualStrings(\"\'abc\'\", ternary.ifFalse.data.String);","class":"lineCov","hits":"2","order":"4019","possible_hits":"2",},
{"lineNum":" 1077","line":"            }"},
{"lineNum":" 1078","line":"        }).check,"},
{"lineNum":" 1079","line":"    }).run();","class":"lineCov","hits":"1","order":"3999","possible_hits":"1",},
{"lineNum":" 1080","line":"}"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"fn parseCommaExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3154","possible_hits":"1",},
{"lineNum":" 1083","line":"    const res = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"3155","possible_hits":"1",},
{"lineNum":" 1084","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"3199","possible_hits":"2",},
{"lineNum":" 1085","line":"        return res;","class":"lineCov","hits":"1","order":"3200","possible_hits":"1",},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"4023","possible_hits":"1",},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"    var list = makeNode(","class":"lineCov","hits":"1","order":"4025","possible_hits":"1",},
{"lineNum":" 1090","line":"        alloc,"},
{"lineNum":" 1091","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"4024","possible_hits":"1",},
{"lineNum":" 1092","line":"        .Comma,"},
{"lineNum":" 1093","line":"        node.NodeList{},"},
{"lineNum":" 1094","line":"    );"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"    list.data.Comma.append(","class":"linePartCov","hits":"2","order":"4026","possible_hits":"3",},
{"lineNum":" 1097","line":"        alloc,"},
{"lineNum":" 1098","line":"        res.Success,","class":"linePartCov","hits":"2","order":"4027","possible_hits":"3",},
{"lineNum":" 1099","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"4028","possible_hits":"2",},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"    while (psr.lexer.token.ty == .Comma) {","class":"lineCov","hits":"2","order":"4029","possible_hits":"2",},
{"lineNum":" 1102","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4030","possible_hits":"1",},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"        const right = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"4031","possible_hits":"1",},
{"lineNum":" 1105","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"4032","possible_hits":"2",},
{"lineNum":" 1106","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"        list.data.Comma.append(","class":"linePartCov","hits":"2","order":"4033","possible_hits":"3",},
{"lineNum":" 1109","line":"            alloc,"},
{"lineNum":" 1110","line":"            right.Success,","class":"linePartCov","hits":"2","order":"4034","possible_hits":"3",},
{"lineNum":" 1111","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"4035","possible_hits":"2",},
{"lineNum":" 1112","line":"    }"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"    return ParseResult.success(list);","class":"lineCov","hits":"1","order":"4036","possible_hits":"1",},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"test \"can parse comma expressions\" {","class":"lineCov","hits":"2","order":"4021","possible_hits":"2",},
{"lineNum":" 1118","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"4047","possible_hits":"1",},
{"lineNum":" 1119","line":"        .expr = \"a, 1, \'abc\'\","},
{"lineNum":" 1120","line":"        .startingCh = 1,"},
{"lineNum":" 1121","line":"        .check = (struct {"},
{"lineNum":" 1122","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4037","possible_hits":"2",},
{"lineNum":" 1123","line":"                try expectEqual(NodeType.Comma, value.getType());","class":"lineCov","hits":"1","order":"4038","possible_hits":"1",},
{"lineNum":" 1124","line":"                const items = value.data.Comma.items;","class":"linePartCov","hits":"2","order":"4039","possible_hits":"3",},
{"lineNum":" 1125","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"4040","possible_hits":"2",},
{"lineNum":" 1126","line":"                try expectEqual(NodeType.Ident, items[0].getType());","class":"linePartCov","hits":"1","order":"4041","possible_hits":"2",},
{"lineNum":" 1127","line":"                try expectEqualStrings(\"a\", items[0].data.Ident);","class":"linePartCov","hits":"1","order":"4042","possible_hits":"2",},
{"lineNum":" 1128","line":"                try expectEqual(NodeType.Int, items[1].getType());","class":"linePartCov","hits":"1","order":"4043","possible_hits":"2",},
{"lineNum":" 1129","line":"                try expectEqualStrings(\"1\", items[1].data.Int);","class":"linePartCov","hits":"1","order":"4044","possible_hits":"2",},
{"lineNum":" 1130","line":"                try expectEqual(NodeType.String, items[2].getType());","class":"linePartCov","hits":"1","order":"4045","possible_hits":"2",},
{"lineNum":" 1131","line":"                try expectEqualStrings(\"\'abc\'\", items[2].data.String);","class":"linePartCov","hits":"1","order":"4046","possible_hits":"2",},
{"lineNum":" 1132","line":"            }"},
{"lineNum":" 1133","line":"        }).check,"},
{"lineNum":" 1134","line":"    }).run();","class":"lineCov","hits":"1","order":"4022","possible_hits":"1",},
{"lineNum":" 1135","line":"}"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"pub fn parseExpr(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"3152","possible_hits":"1",},
{"lineNum":" 1138","line":"    return parseCommaExpr(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"3153","possible_hits":"1",},
{"lineNum":" 1139","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-03 20:45:33", "instrumented" : 593, "covered" : 556,};
var merged_data = [];
