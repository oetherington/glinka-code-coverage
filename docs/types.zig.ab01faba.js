var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   20","line":"const Compiler = @import(\"compiler.zig\").Compiler;"},
{"lineNum":"   21","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   22","line":"const Node = node.Node;"},
{"lineNum":"   23","line":"const NodeType = node.NodeType;"},
{"lineNum":"   24","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   25","line":"const GenericError = @import(\"errors/generic_error.zig\").GenericError;"},
{"lineNum":"   26","line":"const CompileError = @import(\"errors/compile_error.zig\").CompileError;"},
{"lineNum":"   27","line":"const CompilerTestCase = @import(\"compiler_test_case.zig\").CompilerTestCase;"},
{"lineNum":"   28","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"pub fn hoistAlias(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3029","possible_hits":"2",},
{"lineNum":"   31","line":"    std.debug.assert(nd.getType() == NodeType.Alias);","class":"lineCov","hits":"1","order":"3030","possible_hits":"1",},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    const alias = nd.data.Alias;","class":"linePartCov","hits":"2","order":"3031","possible_hits":"3",},
{"lineNum":"   34","line":"    const name = alias.name;","class":"lineCov","hits":"1","order":"3032","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    if (cmp.scope.getType(name)) |ty| {","class":"linePartCov","hits":"2","order":"3033","possible_hits":"3",},
{"lineNum":"   37","line":"        _ = ty;"},
{"lineNum":"   38","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"            GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"                \"Redefinition of type {s}\","},
{"lineNum":"   41","line":"                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"            )),"},
{"lineNum":"   43","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    var t = allocate.create(cmp.alloc, Type);","class":"lineCov","hits":"1","order":"3034","possible_hits":"1",},
{"lineNum":"   48","line":"    t.* = Type{ .Alias = Type.AliasType.new(name, Type.hoistedSentinel) };","class":"lineCov","hits":"1","order":"3035","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    cmp.scope.putType(name, t);","class":"lineCov","hits":"1","order":"3036","possible_hits":"1",},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"pub fn processAlias(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3044","possible_hits":"2",},
{"lineNum":"   54","line":"    std.debug.assert(nd.getType() == NodeType.Alias);","class":"lineCov","hits":"1","order":"3045","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    const alias = nd.data.Alias;","class":"linePartCov","hits":"2","order":"3046","possible_hits":"3",},
{"lineNum":"   57","line":"    const name = alias.name;","class":"lineCov","hits":"1","order":"3047","possible_hits":"1",},
{"lineNum":"   58","line":"    const ty = cmp.findType(alias.value) orelse {","class":"lineCov","hits":"2","order":"3048","possible_hits":"2",},
{"lineNum":"   59","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"            GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"                \"Target type for alias \'{s}\' cannot be resolved\","},
{"lineNum":"   62","line":"                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"            )),"},
{"lineNum":"   64","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    };"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    if (cmp.scope.getTypeMut(name)) |aliasTy| {","class":"lineCov","hits":"3","order":"3064","possible_hits":"3",},
{"lineNum":"   69","line":"        std.debug.assert(aliasTy.getType() == .Alias);","class":"lineCov","hits":"1","order":"3069","possible_hits":"1",},
{"lineNum":"   70","line":"        std.debug.assert(aliasTy.Alias.ty.isHoistedSentinel());","class":"linePartCov","hits":"2","order":"3070","possible_hits":"3",},
{"lineNum":"   71","line":"        aliasTy.Alias.ty = ty;","class":"linePartCov","hits":"2","order":"3071","possible_hits":"3",},
{"lineNum":"   72","line":"        cmp.typebook.putAlias(aliasTy);","class":"lineCov","hits":"1","order":"3072","possible_hits":"1",},
{"lineNum":"   73","line":"    } else {"},
{"lineNum":"   74","line":"        std.debug.panic(\"Alias type \'{s}\' has not been prepared!\", .{name});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"}"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"test \"can compile a type alias declaration\" {","class":"lineCov","hits":"2","order":"2912","possible_hits":"2",},
{"lineNum":"   79","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3098","possible_hits":"1",},
{"lineNum":"   80","line":"        .code = \"type ATypeAlias = number | boolean;\","},
{"lineNum":"   81","line":"    }).run();","class":"lineCov","hits":"1","order":"2913","possible_hits":"1",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"pub fn hoistInterface(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3146","possible_hits":"2",},
{"lineNum":"   85","line":"    std.debug.assert(nd.getType() == NodeType.InterfaceType);","class":"lineCov","hits":"1","order":"3147","possible_hits":"1",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    const in = nd.data.InterfaceType;","class":"linePartCov","hits":"2","order":"3148","possible_hits":"3",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    const name = if (in.name) |nm|","class":"lineCov","hits":"2","order":"3149","possible_hits":"2",},
{"lineNum":"   90","line":"        nm","class":"lineCov","hits":"1","order":"3150","possible_hits":"1",},
{"lineNum":"   91","line":"    else"},
{"lineNum":"   92","line":"        std.debug.panic(\"Invalid InterfaceType node (has no name)\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    if (cmp.scope.getType(name)) |ty| {","class":"lineCov","hits":"2","order":"3151","possible_hits":"2",},
{"lineNum":"   95","line":"        _ = ty;"},
{"lineNum":"   96","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    var ty = allocate.create(cmp.alloc, Type);","class":"lineCov","hits":"1","order":"3152","possible_hits":"1",},
{"lineNum":"  100","line":"    ty.* = Type{","class":"lineCov","hits":"1","order":"3153","possible_hits":"1",},
{"lineNum":"  101","line":"        .Interface = Type.InterfaceType.new(","class":"lineCov","hits":"1","order":"3154","possible_hits":"1",},
{"lineNum":"  102","line":"            &[_]Type.InterfaceType.Member{},"},
{"lineNum":"  103","line":"        ),"},
{"lineNum":"  104","line":"    };"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    cmp.scope.putType(name, ty);","class":"lineCov","hits":"1","order":"3155","possible_hits":"1",},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"pub fn processInterface(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3157","possible_hits":"2",},
{"lineNum":"  110","line":"    std.debug.assert(nd.getType() == NodeType.InterfaceType);","class":"lineCov","hits":"1","order":"3158","possible_hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    const in = nd.data.InterfaceType;","class":"linePartCov","hits":"2","order":"3159","possible_hits":"3",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    const name = if (in.name) |nm|","class":"lineCov","hits":"2","order":"3160","possible_hits":"2",},
{"lineNum":"  115","line":"        nm","class":"lineCov","hits":"1","order":"3161","possible_hits":"1",},
{"lineNum":"  116","line":"    else"},
{"lineNum":"  117","line":"        std.debug.panic(\"Invalid InterfaceType node (has no name)\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    const members = allocate.alloc(","class":"lineCov","hits":"1","order":"3164","possible_hits":"1",},
{"lineNum":"  120","line":"        cmp.alloc,","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":"  121","line":"        Type.InterfaceType.Member,"},
{"lineNum":"  122","line":"        in.members.items.len,","class":"lineCov","hits":"1","order":"3163","possible_hits":"1",},
{"lineNum":"  123","line":"    );"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    for (in.members.items) |member, index| {","class":"lineCov","hits":"2","order":"3165","possible_hits":"2",},
{"lineNum":"  126","line":"        if (cmp.findType(member.ty)) |ty| {","class":"lineCov","hits":"3","order":"3166","possible_hits":"3",},
{"lineNum":"  127","line":"            members[index] = Type.InterfaceType.Member{","class":"linePartCov","hits":"1","order":"3167","possible_hits":"2",},
{"lineNum":"  128","line":"                .name = member.name,","class":"lineCov","hits":"1","order":"3168","possible_hits":"1",},
{"lineNum":"  129","line":"                .ty = ty,","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":"  130","line":"            };"},
{"lineNum":"  131","line":"        } else {"},
{"lineNum":"  132","line":"            cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"                GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"                    \"Member \'{s}\' of interface \'{s}\' has an invalid type\","},
{"lineNum":"  135","line":"                    .{ member.name, name },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"                )),"},
{"lineNum":"  137","line":"            )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    if (cmp.scope.getTypeMut(name)) |inTy| {","class":"lineCov","hits":"3","order":"3170","possible_hits":"3",},
{"lineNum":"  143","line":"        std.debug.assert(inTy.getType() == .Interface);","class":"lineCov","hits":"1","order":"3171","possible_hits":"1",},
{"lineNum":"  144","line":"        std.debug.assert(inTy.Interface.members.len == 0);","class":"linePartCov","hits":"2","order":"3172","possible_hits":"3",},
{"lineNum":"  145","line":"        inTy.Interface.members = members;","class":"linePartCov","hits":"2","order":"3173","possible_hits":"3",},
{"lineNum":"  146","line":"        cmp.typebook.putInterface(inTy);","class":"lineCov","hits":"1","order":"3174","possible_hits":"1",},
{"lineNum":"  147","line":"    } else {"},
{"lineNum":"  148","line":"        std.debug.panic(\"Interface type \'{s}\' has not been prepared!\", .{name});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":"}"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"test \"can compile an interface declaration\" {","class":"lineCov","hits":"2","order":"3099","possible_hits":"2",},
{"lineNum":"  153","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3178","possible_hits":"1",},
{"lineNum":"  154","line":"        .code = \"interface Inter { aString: string; aUnion: number | null; }\","},
{"lineNum":"  155","line":"    }).run();","class":"lineCov","hits":"1","order":"3100","possible_hits":"1",},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"pub fn hoistClass(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3199","possible_hits":"2",},
{"lineNum":"  159","line":"    // TODO"},
{"lineNum":"  160","line":"    _ = cmp;"},
{"lineNum":"  161","line":"    _ = nd;"},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"pub fn processClass(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3201","possible_hits":"2",},
{"lineNum":"  165","line":"    std.debug.assert(nd.getType() == NodeType.ClassType);","class":"lineCov","hits":"1","order":"3202","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    const clsNd = nd.data.ClassType;","class":"linePartCov","hits":"2","order":"3203","possible_hits":"3",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    const super: ?Type.Ptr = if (clsNd.extends) |_|","class":"linePartCov","hits":"1","order":"3204","possible_hits":"3",},
{"lineNum":"  170","line":"        null // TODO: Lookup superclass by name","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"    else"},
{"lineNum":"  172","line":"        null;","class":"lineCov","hits":"1","order":"3205","possible_hits":"1",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    var members = std.ArrayList(Type.ClassType.Member).init(cmp.alloc);","class":"lineCov","hits":"1","order":"3206","possible_hits":"1",},
{"lineNum":"  175","line":"    _ = members;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    // const cls = Type.ClassType.new(super, clsNd.name, members.items);"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    // TODO"},
{"lineNum":"  180","line":"    _ = cmp;"},
{"lineNum":"  181","line":"    _ = clsNd;"},
{"lineNum":"  182","line":"    _ = super;"},
{"lineNum":"  183","line":"}"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"test \"can compile a class declaration\" {","class":"lineCov","hits":"2","order":"3179","possible_hits":"2",},
{"lineNum":"  186","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3207","possible_hits":"1",},
{"lineNum":"  187","line":"        .code = \"class MyClass {}\","},
{"lineNum":"  188","line":"    }).run();","class":"lineCov","hits":"1","order":"3180","possible_hits":"1",},
{"lineNum":"  189","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-24 08:01:28", "instrumented" : 83, "covered" : 62,};
var merged_data = [];
