var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   20","line":"const Compiler = @import(\"compiler.zig\").Compiler;"},
{"lineNum":"   21","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   22","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   23","line":"const Node = node.Node;"},
{"lineNum":"   24","line":"const NodeType = node.NodeType;"},
{"lineNum":"   25","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   26","line":"const GenericError = @import(\"errors/generic_error.zig\").GenericError;"},
{"lineNum":"   27","line":"const CompileError = @import(\"errors/compile_error.zig\").CompileError;"},
{"lineNum":"   28","line":"const CompilerTestCase = @import(\"compiler_test_case.zig\").CompilerTestCase;"},
{"lineNum":"   29","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"pub fn hoistAlias(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3029","possible_hits":"2",},
{"lineNum":"   32","line":"    std.debug.assert(nd.getType() == NodeType.Alias);","class":"lineCov","hits":"1","order":"3030","possible_hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    const alias = nd.data.Alias;","class":"linePartCov","hits":"2","order":"3031","possible_hits":"3",},
{"lineNum":"   35","line":"    const name = alias.name;","class":"lineCov","hits":"1","order":"3032","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    if (cmp.scope.getType(name)) |ty| {","class":"linePartCov","hits":"2","order":"3033","possible_hits":"3",},
{"lineNum":"   38","line":"        _ = ty;"},
{"lineNum":"   39","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"            GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":"                \"Redefinition of type {s}\","},
{"lineNum":"   42","line":"                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"            )),"},
{"lineNum":"   44","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    var t = allocate.create(cmp.alloc, Type);","class":"lineCov","hits":"1","order":"3034","possible_hits":"1",},
{"lineNum":"   49","line":"    t.* = Type{ .Alias = Type.AliasType.new(name, Type.hoistedSentinel) };","class":"lineCov","hits":"1","order":"3035","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    cmp.scope.putType(name, t);","class":"lineCov","hits":"1","order":"3036","possible_hits":"1",},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"pub fn processAlias(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3044","possible_hits":"2",},
{"lineNum":"   55","line":"    std.debug.assert(nd.getType() == NodeType.Alias);","class":"lineCov","hits":"1","order":"3045","possible_hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    const alias = nd.data.Alias;","class":"linePartCov","hits":"2","order":"3046","possible_hits":"3",},
{"lineNum":"   58","line":"    const name = alias.name;","class":"lineCov","hits":"1","order":"3047","possible_hits":"1",},
{"lineNum":"   59","line":"    const ty = cmp.findType(alias.value) orelse {","class":"lineCov","hits":"2","order":"3048","possible_hits":"2",},
{"lineNum":"   60","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"            GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"                \"Target type for alias \'{s}\' cannot be resolved\","},
{"lineNum":"   63","line":"                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"            )),"},
{"lineNum":"   65","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"    };"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    if (cmp.scope.getTypeMut(name)) |aliasTy| {","class":"lineCov","hits":"3","order":"3064","possible_hits":"3",},
{"lineNum":"   70","line":"        std.debug.assert(aliasTy.getType() == .Alias);","class":"lineCov","hits":"1","order":"3069","possible_hits":"1",},
{"lineNum":"   71","line":"        std.debug.assert(aliasTy.Alias.ty.isHoistedSentinel());","class":"linePartCov","hits":"2","order":"3070","possible_hits":"3",},
{"lineNum":"   72","line":"        aliasTy.Alias.ty = ty;","class":"linePartCov","hits":"2","order":"3071","possible_hits":"3",},
{"lineNum":"   73","line":"        cmp.typebook.putAlias(aliasTy);","class":"lineCov","hits":"1","order":"3072","possible_hits":"1",},
{"lineNum":"   74","line":"    } else {"},
{"lineNum":"   75","line":"        std.debug.panic(\"Alias type \'{s}\' has not been prepared!\", .{name});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    }"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"test \"can compile a type alias declaration\" {","class":"lineCov","hits":"2","order":"2912","possible_hits":"2",},
{"lineNum":"   80","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3098","possible_hits":"1",},
{"lineNum":"   81","line":"        .code = \"type ATypeAlias = number | boolean;\","},
{"lineNum":"   82","line":"    }).run();","class":"lineCov","hits":"1","order":"2913","possible_hits":"1",},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"pub fn hoistInterface(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3146","possible_hits":"2",},
{"lineNum":"   86","line":"    std.debug.assert(nd.getType() == NodeType.InterfaceType);","class":"lineCov","hits":"1","order":"3147","possible_hits":"1",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    const in = nd.data.InterfaceType;","class":"linePartCov","hits":"2","order":"3148","possible_hits":"3",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    const name = if (in.name) |nm|","class":"lineCov","hits":"2","order":"3149","possible_hits":"2",},
{"lineNum":"   91","line":"        nm","class":"lineCov","hits":"1","order":"3150","possible_hits":"1",},
{"lineNum":"   92","line":"    else"},
{"lineNum":"   93","line":"        std.debug.panic(\"Invalid InterfaceType node (has no name)\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    if (cmp.scope.getType(name)) |ty| {","class":"lineCov","hits":"2","order":"3151","possible_hits":"2",},
{"lineNum":"   96","line":"        _ = ty;"},
{"lineNum":"   97","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    var ty = allocate.create(cmp.alloc, Type);","class":"lineCov","hits":"1","order":"3152","possible_hits":"1",},
{"lineNum":"  101","line":"    ty.* = Type{","class":"lineCov","hits":"1","order":"3153","possible_hits":"1",},
{"lineNum":"  102","line":"        .Interface = Type.InterfaceType.new(","class":"lineCov","hits":"1","order":"3154","possible_hits":"1",},
{"lineNum":"  103","line":"            &[_]Type.InterfaceType.Member{},"},
{"lineNum":"  104","line":"        ),"},
{"lineNum":"  105","line":"    };"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    cmp.scope.putType(name, ty);","class":"lineCov","hits":"1","order":"3155","possible_hits":"1",},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"pub fn processInterface(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3157","possible_hits":"2",},
{"lineNum":"  111","line":"    std.debug.assert(nd.getType() == NodeType.InterfaceType);","class":"lineCov","hits":"1","order":"3158","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    const in = nd.data.InterfaceType;","class":"linePartCov","hits":"2","order":"3159","possible_hits":"3",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    const name = if (in.name) |nm|","class":"lineCov","hits":"2","order":"3160","possible_hits":"2",},
{"lineNum":"  116","line":"        nm","class":"lineCov","hits":"1","order":"3161","possible_hits":"1",},
{"lineNum":"  117","line":"    else"},
{"lineNum":"  118","line":"        std.debug.panic(\"Invalid InterfaceType node (has no name)\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    const members = allocate.alloc(","class":"lineCov","hits":"1","order":"3164","possible_hits":"1",},
{"lineNum":"  121","line":"        cmp.alloc,","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":"  122","line":"        Type.InterfaceType.Member,"},
{"lineNum":"  123","line":"        in.members.items.len,","class":"lineCov","hits":"1","order":"3163","possible_hits":"1",},
{"lineNum":"  124","line":"    );"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    for (in.members.items) |member, index| {","class":"lineCov","hits":"2","order":"3165","possible_hits":"2",},
{"lineNum":"  127","line":"        if (cmp.findType(member.ty)) |ty| {","class":"lineCov","hits":"3","order":"3166","possible_hits":"3",},
{"lineNum":"  128","line":"            members[index] = Type.InterfaceType.Member{","class":"linePartCov","hits":"1","order":"3167","possible_hits":"2",},
{"lineNum":"  129","line":"                .name = member.name,","class":"lineCov","hits":"1","order":"3168","possible_hits":"1",},
{"lineNum":"  130","line":"                .ty = ty,","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":"  131","line":"            };"},
{"lineNum":"  132","line":"        } else {"},
{"lineNum":"  133","line":"            cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"                GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":"                    \"Member \'{s}\' of interface \'{s}\' has an invalid type\","},
{"lineNum":"  136","line":"                    .{ member.name, name },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"                )),"},
{"lineNum":"  138","line":"            )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    if (cmp.scope.getTypeMut(name)) |inTy| {","class":"lineCov","hits":"3","order":"3170","possible_hits":"3",},
{"lineNum":"  144","line":"        std.debug.assert(inTy.getType() == .Interface);","class":"lineCov","hits":"1","order":"3171","possible_hits":"1",},
{"lineNum":"  145","line":"        std.debug.assert(inTy.Interface.members.len == 0);","class":"linePartCov","hits":"2","order":"3172","possible_hits":"3",},
{"lineNum":"  146","line":"        inTy.Interface.members = members;","class":"linePartCov","hits":"2","order":"3173","possible_hits":"3",},
{"lineNum":"  147","line":"        cmp.typebook.putInterface(inTy);","class":"lineCov","hits":"1","order":"3174","possible_hits":"1",},
{"lineNum":"  148","line":"    } else {"},
{"lineNum":"  149","line":"        std.debug.panic(\"Interface type \'{s}\' has not been prepared!\", .{name});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    }"},
{"lineNum":"  151","line":"}"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"test \"can compile an interface declaration\" {","class":"lineCov","hits":"2","order":"3099","possible_hits":"2",},
{"lineNum":"  154","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3178","possible_hits":"1",},
{"lineNum":"  155","line":"        .code = \"interface Inter { aString: string; aUnion: number | null; }\","},
{"lineNum":"  156","line":"    }).run();","class":"lineCov","hits":"1","order":"3100","possible_hits":"1",},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"pub fn hoistClass(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3199","possible_hits":"2",},
{"lineNum":"  160","line":"    std.debug.assert(nd.getType() == NodeType.ClassType);","class":"lineCov","hits":"1","order":"3200","possible_hits":"1",},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    const clsNd = nd.data.ClassType;","class":"linePartCov","hits":"2","order":"3201","possible_hits":"3",},
{"lineNum":"  163","line":"    const name = clsNd.name;","class":"lineCov","hits":"1","order":"3202","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    if (cmp.scope.getType(name)) |ty| {","class":"linePartCov","hits":"2","order":"3203","possible_hits":"3",},
{"lineNum":"  166","line":"        _ = ty;"},
{"lineNum":"  167","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"            GenericError.new(nd.csr, cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"                \"Redefinition of type {s}\","},
{"lineNum":"  170","line":"                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"            )),"},
{"lineNum":"  172","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    var t = allocate.create(cmp.alloc, Type);","class":"lineCov","hits":"1","order":"3204","possible_hits":"1",},
{"lineNum":"  177","line":"    t.* = Type{","class":"lineCov","hits":"1","order":"3205","possible_hits":"1",},
{"lineNum":"  178","line":"        .Class = Type.ClassType.new(","class":"lineCov","hits":"2","order":"3206","possible_hits":"2",},
{"lineNum":"  179","line":"            null,"},
{"lineNum":"  180","line":"            clsNd.name,","class":"lineCov","hits":"1","order":"3207","possible_hits":"1",},
{"lineNum":"  181","line":"            &[_]Type.ClassType.Member{},"},
{"lineNum":"  182","line":"        ),"},
{"lineNum":"  183","line":"    };"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    cmp.scope.putType(name, t);","class":"lineCov","hits":"1","order":"3208","possible_hits":"1",},
{"lineNum":"  186","line":"}"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"fn resolveSuperType(","class":"lineCov","hits":"1","order":"3218","possible_hits":"1",},
{"lineNum":"  189","line":"    cmp: *Compiler,"},
{"lineNum":"  190","line":"    csr: Cursor,"},
{"lineNum":"  191","line":"    extends: ?[]const u8,"},
{"lineNum":"  192","line":") ?Type.Ptr {"},
{"lineNum":"  193","line":"    if (extends) |clsName| {","class":"lineCov","hits":"2","order":"3219","possible_hits":"2",},
{"lineNum":"  194","line":"        var nd = node.NodeImpl{"},
{"lineNum":"  195","line":"            .csr = csr,","class":"lineCov","hits":"1","order":"3273","possible_hits":"1",},
{"lineNum":"  196","line":"            .data = node.NodeData{ .TypeName = clsName },","class":"lineCov","hits":"1","order":"3274","possible_hits":"1",},
{"lineNum":"  197","line":"            .ty = null,","class":"lineCov","hits":"1","order":"3275","possible_hits":"1",},
{"lineNum":"  198","line":"        };"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        if (cmp.findType(&nd)) |ty| {","class":"lineCov","hits":"2","order":"3276","possible_hits":"2",},
{"lineNum":"  201","line":"            if (ty.getType() == .Class) {","class":"lineCov","hits":"2","order":"3278","possible_hits":"2",},
{"lineNum":"  202","line":"                return ty;","class":"lineCov","hits":"1","order":"3279","possible_hits":"1",},
{"lineNum":"  203","line":"            } else {"},
{"lineNum":"  204","line":"                cmp.errors.append(CompileError.genericError(","class":"lineCov","hits":"2","order":"3319","possible_hits":"2",},
{"lineNum":"  205","line":"                    GenericError.new(csr, cmp.fmt(","class":"lineCov","hits":"2","order":"3320","possible_hits":"2",},
{"lineNum":"  206","line":"                        \"Superclass \'{s}\' is not a class\","},
{"lineNum":"  207","line":"                        .{clsName},","class":"lineCov","hits":"1","order":"3321","possible_hits":"1",},
{"lineNum":"  208","line":"                    )),"},
{"lineNum":"  209","line":"                )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3322","possible_hits":"1",},
{"lineNum":"  210","line":"            }"},
{"lineNum":"  211","line":"        } else {"},
{"lineNum":"  212","line":"            cmp.errors.append(CompileError.genericError(","class":"lineCov","hits":"2","order":"3293","possible_hits":"2",},
{"lineNum":"  213","line":"                GenericError.new(csr, cmp.fmt(","class":"lineCov","hits":"2","order":"3294","possible_hits":"2",},
{"lineNum":"  214","line":"                    \"Superclass \'{s}\' is not in scope\","},
{"lineNum":"  215","line":"                    .{clsName},","class":"lineCov","hits":"1","order":"3295","possible_hits":"1",},
{"lineNum":"  216","line":"                )),"},
{"lineNum":"  217","line":"            )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3303","possible_hits":"1",},
{"lineNum":"  218","line":"        }"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    return null;","class":"lineCov","hits":"1","order":"3220","possible_hits":"1",},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"fn resolveMemberType(","class":"lineCov","hits":"1","order":"3285","possible_hits":"1",},
{"lineNum":"  225","line":"    cmp: *Compiler,"},
{"lineNum":"  226","line":"    className: []const u8,"},
{"lineNum":"  227","line":"    member: node.ClassTypeMember,"},
{"lineNum":"  228","line":") Type.Ptr {"},
{"lineNum":"  229","line":"    if (member.ty) |tyNode| {","class":"lineCov","hits":"2","order":"3286","possible_hits":"2",},
{"lineNum":"  230","line":"        if (cmp.findType(tyNode)) |ty| {","class":"lineCov","hits":"2","order":"3287","possible_hits":"2",},
{"lineNum":"  231","line":"            return ty;","class":"lineCov","hits":"1","order":"3288","possible_hits":"1",},
{"lineNum":"  232","line":"        } else {"},
{"lineNum":"  233","line":"            cmp.errors.append(CompileError.genericError(","class":"lineCov","hits":"2","order":"3332","possible_hits":"2",},
{"lineNum":"  234","line":"                GenericError.new(tyNode.csr, cmp.fmt(","class":"lineCov","hits":"2","order":"3333","possible_hits":"2",},
{"lineNum":"  235","line":"                    \"Cannot resolve type for member \'{s}\' of class \'{s}\'\","},
{"lineNum":"  236","line":"                    .{ member.name, className },","class":"lineCov","hits":"1","order":"3334","possible_hits":"1",},
{"lineNum":"  237","line":"                )),"},
{"lineNum":"  238","line":"            )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3335","possible_hits":"1",},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    return cmp.typebook.getAny();","class":"lineCov","hits":"1","order":"3336","possible_hits":"1",},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"pub fn processClass(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3210","possible_hits":"2",},
{"lineNum":"  246","line":"    std.debug.assert(nd.getType() == NodeType.ClassType);","class":"lineCov","hits":"1","order":"3211","possible_hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    const clsNd = nd.data.ClassType;","class":"linePartCov","hits":"2","order":"3212","possible_hits":"3",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    var clsT = if (cmp.scope.getTypeMut(clsNd.name)) |clsTy|","class":"lineCov","hits":"2","order":"3213","possible_hits":"2",},
{"lineNum":"  251","line":"        clsTy","class":"lineCov","hits":"1","order":"3214","possible_hits":"1",},
{"lineNum":"  252","line":"    else"},
{"lineNum":"  253","line":"        std.debug.panic(\"Class \'{s}\' has not been prepared\", .{clsNd.name});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    std.debug.assert(clsT.getType() == .Class);","class":"lineCov","hits":"1","order":"3215","possible_hits":"1",},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    var cls = &clsT.Class;","class":"linePartCov","hits":"2","order":"3216","possible_hits":"3",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    cls.super = resolveSuperType(cmp, nd.csr, clsNd.extends);","class":"lineCov","hits":"1","order":"3217","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    cls.members = allocate.alloc(","class":"lineCov","hits":"2","order":"3221","possible_hits":"2",},
{"lineNum":"  262","line":"        cmp.alloc,","class":"lineCov","hits":"1","order":"3222","possible_hits":"1",},
{"lineNum":"  263","line":"        Type.ClassType.Member,"},
{"lineNum":"  264","line":"        clsNd.members.items.len,","class":"lineCov","hits":"1","order":"3223","possible_hits":"1",},
{"lineNum":"  265","line":"    );"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    for (clsNd.members.items) |memberNd, index| {","class":"lineCov","hits":"3","order":"3224","possible_hits":"3",},
{"lineNum":"  268","line":"        std.debug.assert(memberNd.getType() == .ClassTypeMember);","class":"lineCov","hits":"1","order":"3280","possible_hits":"1",},
{"lineNum":"  269","line":"        const member = memberNd.data.ClassTypeMember;","class":"linePartCov","hits":"2","order":"3281","possible_hits":"3",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"        cls.members[index] = Type.ClassType.Member{","class":"linePartCov","hits":"1","order":"3282","possible_hits":"2",},
{"lineNum":"  272","line":"            .name = member.name,","class":"lineCov","hits":"1","order":"3283","possible_hits":"1",},
{"lineNum":"  273","line":"            .ty = resolveMemberType(cmp, cls.name, member),","class":"lineCov","hits":"1","order":"3284","possible_hits":"1",},
{"lineNum":"  274","line":"            .visibility = member.visibility,","class":"lineCov","hits":"1","order":"3289","possible_hits":"1",},
{"lineNum":"  275","line":"        };"},
{"lineNum":"  276","line":"    }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    cmp.typebook.putClass(clsT);","class":"lineCov","hits":"1","order":"3225","possible_hits":"1",},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"test \"can compile an empty class declaration\" {","class":"lineCov","hits":"2","order":"3179","possible_hits":"2",},
{"lineNum":"  282","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3230","possible_hits":"1",},
{"lineNum":"  283","line":"        .code = \"class A {}\","},
{"lineNum":"  284","line":"    }).run();","class":"lineCov","hits":"1","order":"3180","possible_hits":"1",},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"test \"can compile a class declaration with a superclass\" {","class":"lineCov","hits":"2","order":"3231","possible_hits":"2",},
{"lineNum":"  288","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3290","possible_hits":"1",},
{"lineNum":"  289","line":"        .code = \"class A {} class B extends A { private a: number; }\","},
{"lineNum":"  290","line":"    }).run();","class":"lineCov","hits":"1","order":"3232","possible_hits":"1",},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"test \"superclass must be defined\" {","class":"lineCov","hits":"2","order":"3291","possible_hits":"2",},
{"lineNum":"  294","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3316","possible_hits":"1",},
{"lineNum":"  295","line":"        .code = \"class B extends A { private a: number; }\","},
{"lineNum":"  296","line":"        .check = (struct {"},
{"lineNum":"  297","line":"            pub fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"3304","possible_hits":"2",},
{"lineNum":"  298","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"3305","possible_hits":"1",},
{"lineNum":"  299","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"3306","possible_hits":"1",},
{"lineNum":"  300","line":"                try case.expectEqual(err.getType(), .GenericError);","class":"lineCov","hits":"1","order":"3309","possible_hits":"1",},
{"lineNum":"  301","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"3311","possible_hits":"2",},
{"lineNum":"  302","line":"                    \"Superclass \'A\' is not in scope\","},
{"lineNum":"  303","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"3310","possible_hits":"3",},
{"lineNum":"  304","line":"                );"},
{"lineNum":"  305","line":"            }"},
{"lineNum":"  306","line":"        }).check,"},
{"lineNum":"  307","line":"    }).run();","class":"lineCov","hits":"1","order":"3292","possible_hits":"1",},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"test \"superclass must be a class\" {","class":"lineCov","hits":"2","order":"3317","possible_hits":"2",},
{"lineNum":"  311","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3329","possible_hits":"1",},
{"lineNum":"  312","line":"        .code = \"class B extends number { private a: number; }\","},
{"lineNum":"  313","line":"        .check = (struct {"},
{"lineNum":"  314","line":"            pub fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"3323","possible_hits":"2",},
{"lineNum":"  315","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"3324","possible_hits":"1",},
{"lineNum":"  316","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"3325","possible_hits":"1",},
{"lineNum":"  317","line":"                try case.expectEqual(err.getType(), .GenericError);","class":"lineCov","hits":"1","order":"3326","possible_hits":"1",},
{"lineNum":"  318","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"3328","possible_hits":"2",},
{"lineNum":"  319","line":"                    \"Superclass \'number\' is not a class\","},
{"lineNum":"  320","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"3327","possible_hits":"3",},
{"lineNum":"  321","line":"                );"},
{"lineNum":"  322","line":"            }"},
{"lineNum":"  323","line":"        }).check,"},
{"lineNum":"  324","line":"    }).run();","class":"lineCov","hits":"1","order":"3318","possible_hits":"1",},
{"lineNum":"  325","line":"}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"test \"class member types must be valid\" {","class":"lineCov","hits":"2","order":"3330","possible_hits":"2",},
{"lineNum":"  328","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"3343","possible_hits":"1",},
{"lineNum":"  329","line":"        .code = \"class A { private a: SomeType; }\","},
{"lineNum":"  330","line":"        .check = (struct {"},
{"lineNum":"  331","line":"            pub fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"3337","possible_hits":"2",},
{"lineNum":"  332","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"3338","possible_hits":"1",},
{"lineNum":"  333","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"3339","possible_hits":"1",},
{"lineNum":"  334","line":"                try case.expectEqual(err.getType(), .GenericError);","class":"lineCov","hits":"1","order":"3340","possible_hits":"1",},
{"lineNum":"  335","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"3342","possible_hits":"2",},
{"lineNum":"  336","line":"                    \"Cannot resolve type for member \'a\' of class \'A\'\","},
{"lineNum":"  337","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"3341","possible_hits":"3",},
{"lineNum":"  338","line":"                );"},
{"lineNum":"  339","line":"            }"},
{"lineNum":"  340","line":"        }).check,"},
{"lineNum":"  341","line":"    }).run();","class":"lineCov","hits":"1","order":"3331","possible_hits":"1",},
{"lineNum":"  342","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-26 08:59:51", "instrumented" : 166, "covered" : 140,};
var merged_data = [];
