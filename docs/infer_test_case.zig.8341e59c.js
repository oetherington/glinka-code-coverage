var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Config = @import(\"../../common/config.zig\").Config;"},
{"lineNum":"   23","line":"const Cursor = @import(\"../../common/cursor.zig\").Cursor;"},
{"lineNum":"   24","line":"const NopBackend = @import(\"../compiler_test_case.zig\").NopBackend;"},
{"lineNum":"   25","line":"const Compiler = @import(\"../compiler.zig\").Compiler;"},
{"lineNum":"   26","line":"const Type = @import(\"../../common/types/type.zig\").Type;"},
{"lineNum":"   27","line":"const node = @import(\"../../common/node.zig\");"},
{"lineNum":"   28","line":"const NodeType = node.NodeType;"},
{"lineNum":"   29","line":"const makeNode = node.makeNode;"},
{"lineNum":"   30","line":"const Scope = @import(\"../scope.zig\").Scope;"},
{"lineNum":"   31","line":"const TypeBook = @import(\"../typebook.zig\").TypeBook;"},
{"lineNum":"   32","line":"const InferResult = @import(\"infer_result.zig\").InferResult;"},
{"lineNum":"   33","line":"const inferExprType = @import(\"inferrer.zig\").inferExprType;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"pub const InferTestCase = struct {"},
{"lineNum":"   36","line":"    expectedTy: ?Type.Type = null,"},
{"lineNum":"   37","line":"    check: ?fn ("},
{"lineNum":"   38","line":"        scope: *Scope,"},
{"lineNum":"   39","line":"        typebook: *TypeBook,"},
{"lineNum":"   40","line":"        res: InferResult,"},
{"lineNum":"   41","line":"    ) anyerror!void = null,"},
{"lineNum":"   42","line":"    setup: ?fn ("},
{"lineNum":"   43","line":"        scope: *Scope,"},
{"lineNum":"   44","line":"        typebook: *TypeBook,"},
{"lineNum":"   45","line":"    ) anyerror!void = null,"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    pub fn expectSuccess(res: InferResult) !void {","class":"lineCov","hits":"2","order":"6744","possible_hits":"2",},
{"lineNum":"   48","line":"        if (res.getType() != .Success)","class":"linePartCov","hits":"1","order":"6745","possible_hits":"2",},
{"lineNum":"   49","line":"            try res.Error.report(std.io.getStdErr().writer());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"        try expectEqual(InferResult.Success, res.getType());","class":"lineCov","hits":"1","order":"6746","possible_hits":"1",},
{"lineNum":"   51","line":"    }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    pub fn run(","class":"lineCov","hits":"21","order":"6512","possible_hits":"21",},
{"lineNum":"   54","line":"        self: InferTestCase,"},
{"lineNum":"   55","line":"        comptime nodeType: NodeType,"},
{"lineNum":"   56","line":"        nodeData: anytype,"},
{"lineNum":"   57","line":"    ) !void {","class":"lineCov","hits":"42","order":"6528","possible_hits":"42",},
{"lineNum":"   58","line":"        const config = Config{};"},
{"lineNum":"   59","line":"        var backend = NopBackend.new();","class":"lineCov","hits":"21","order":"6513","possible_hits":"21",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        var compiler = Compiler.new(","class":"lineCov","hits":"21","order":"6515","possible_hits":"21",},
{"lineNum":"   62","line":"            std.testing.allocator,"},
{"lineNum":"   63","line":"            &config,"},
{"lineNum":"   64","line":"            &backend.backend,","class":"lineCov","hits":"21","order":"6514","possible_hits":"21",},
{"lineNum":"   65","line":"        );"},
{"lineNum":"   66","line":"        defer compiler.deinit();","class":"linePartCov","hits":"21","order":"6530","possible_hits":"168",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        if (self.setup) |setup|","class":"linePartCov","hits":"29","order":"6516","possible_hits":"42",},
{"lineNum":"   69","line":"            try setup(compiler.scope, compiler.typebook);","class":"linePartCov","hits":"8","order":"6555","possible_hits":"42",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        const nd = makeNode(","class":"lineCov","hits":"21","order":"6519","possible_hits":"21",},
{"lineNum":"   72","line":"            std.testing.allocator,"},
{"lineNum":"   73","line":"            Cursor.new(6, 9),","class":"lineCov","hits":"21","order":"6517","possible_hits":"21",},
{"lineNum":"   74","line":"            nodeType,"},
{"lineNum":"   75","line":"            nodeData,","class":"lineCov","hits":"17","order":"6518","possible_hits":"17",},
{"lineNum":"   76","line":"        );"},
{"lineNum":"   77","line":"        defer std.testing.allocator.destroy(nd);","class":"linePartCov","hits":"21","order":"6529","possible_hits":"147",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        const res = inferExprType(&compiler, nd, .None);","class":"lineCov","hits":"21","order":"6520","possible_hits":"21",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        if (res.getType() != .Success and self.expectedTy != null)","class":"linePartCov","hits":"21","order":"6521","possible_hits":"42",},
{"lineNum":"   82","line":"            try res.Error.report(std.io.getStdErr().writer());","class":"lineNoCov","hits":"0","possible_hits":"63",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        if (self.expectedTy) |expectedTy| {","class":"linePartCov","hits":"36","order":"6522","possible_hits":"42",},
{"lineNum":"   85","line":"            try expectEqual(InferResult.Success, res.getType());","class":"linePartCov","hits":"15","order":"6523","possible_hits":"42",},
{"lineNum":"   86","line":"            try expectEqual(expectedTy, res.Success.getType());","class":"linePartCov","hits":"30","order":"6524","possible_hits":"63",},
{"lineNum":"   87","line":"            try expect(nd.ty != null);","class":"linePartCov","hits":"15","order":"6525","possible_hits":"42",},
{"lineNum":"   88","line":"            try expectEqual(expectedTy, nd.ty.?.getType());","class":"linePartCov","hits":"15","order":"6526","possible_hits":"63",},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        if (self.check) |check|","class":"linePartCov","hits":"29","order":"6527","possible_hits":"42",},
{"lineNum":"   92","line":"            try check(compiler.scope, compiler.typebook, res);","class":"linePartCov","hits":"8","order":"6602","possible_hits":"42",},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-01 20:02:57", "instrumented" : 26, "covered" : 24,};
var merged_data = [];
