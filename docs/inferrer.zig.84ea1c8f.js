var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   23","line":"const Config = @import(\"../common/config.zig\").Config;"},
{"lineNum":"   24","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   25","line":"const Node = node.Node;"},
{"lineNum":"   26","line":"const NodeType = node.NodeType;"},
{"lineNum":"   27","line":"const makeNode = node.makeNode;"},
{"lineNum":"   28","line":"const Compiler = @import(\"compiler.zig\").Compiler;"},
{"lineNum":"   29","line":"const Scope = @import(\"scope.zig\").Scope;"},
{"lineNum":"   30","line":"const TypeBook = @import(\"typebook.zig\").TypeBook;"},
{"lineNum":"   31","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   32","line":"const CompileError = @import(\"errors/compile_error.zig\").CompileError;"},
{"lineNum":"   33","line":"const OpError = @import(\"errors/op_error.zig\").OpError;"},
{"lineNum":"   34","line":"const AssignError = @import(\"errors/assign_error.zig\").AssignError;"},
{"lineNum":"   35","line":"const GenericError = @import(\"errors/generic_error.zig\").GenericError;"},
{"lineNum":"   36","line":"const TypeError = @import(\"errors/type_error.zig\").TypeError;"},
{"lineNum":"   37","line":"const NopBackend = @import(\"compiler_test_case.zig\").NopBackend;"},
{"lineNum":"   38","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub const InferResult = union(Variant) {"},
{"lineNum":"   41","line":"    pub const Variant = enum {"},
{"lineNum":"   42","line":"        Success,"},
{"lineNum":"   43","line":"        Error,"},
{"lineNum":"   44","line":"    };"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    Success: Type.Ptr,"},
{"lineNum":"   47","line":"    Error: CompileError,"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    pub fn success(ty: Type.Ptr) InferResult {","class":"lineCov","hits":"1","order":"4303","possible_hits":"1",},
{"lineNum":"   50","line":"        return InferResult{","class":"lineCov","hits":"1","order":"4305","possible_hits":"1",},
{"lineNum":"   51","line":"            .Success = ty,","class":"lineCov","hits":"1","order":"4304","possible_hits":"1",},
{"lineNum":"   52","line":"        };"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    pub fn err(e: CompileError) InferResult {","class":"lineCov","hits":"1","order":"4348","possible_hits":"1",},
{"lineNum":"   56","line":"        return InferResult{","class":"lineCov","hits":"1","order":"4350","possible_hits":"1",},
{"lineNum":"   57","line":"            .Error = e,","class":"lineCov","hits":"1","order":"4349","possible_hits":"1",},
{"lineNum":"   58","line":"        };"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    pub fn getType(self: InferResult) Variant {","class":"lineCov","hits":"1","order":"4434","possible_hits":"1",},
{"lineNum":"   62","line":"        return @as(Variant, self);","class":"lineCov","hits":"1","order":"4435","possible_hits":"1",},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"test \"can create a success InferResult\" {","class":"lineCov","hits":"2","order":"5707","possible_hits":"2",},
{"lineNum":"   67","line":"    const boolean = Type.newBoolean();","class":"lineCov","hits":"1","order":"5708","possible_hits":"1",},
{"lineNum":"   68","line":"    const ptr = &boolean;","class":"lineCov","hits":"1","order":"5709","possible_hits":"1",},
{"lineNum":"   69","line":"    const result = InferResult.success(ptr);","class":"lineCov","hits":"1","order":"5710","possible_hits":"1",},
{"lineNum":"   70","line":"    try expectEqual(InferResult.Success, result.getType());","class":"lineCov","hits":"1","order":"5711","possible_hits":"1",},
{"lineNum":"   71","line":"    try expectEqual(ptr, result.Success);","class":"lineCov","hits":"2","order":"5712","possible_hits":"2",},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"test \"can create an error InferResult\" {","class":"lineCov","hits":"2","order":"5713","possible_hits":"2",},
{"lineNum":"   75","line":"    const cursor = Cursor.new(2, 5);","class":"lineCov","hits":"1","order":"5714","possible_hits":"1",},
{"lineNum":"   76","line":"    const symbol = \"anySymbol\";"},
{"lineNum":"   77","line":"    const implicitAnyError = @import(\"errors/implicit_any_error.zig\");"},
{"lineNum":"   78","line":"    const ImplicitAnyError = implicitAnyError.ImplicitAnyError;"},
{"lineNum":"   79","line":"    const err = ImplicitAnyError.new(cursor, symbol);","class":"lineCov","hits":"1","order":"5715","possible_hits":"1",},
{"lineNum":"   80","line":"    const compileError = CompileError.implicitAnyError(err);","class":"lineCov","hits":"1","order":"5716","possible_hits":"1",},
{"lineNum":"   81","line":"    const result = InferResult.err(compileError);","class":"lineCov","hits":"1","order":"5717","possible_hits":"1",},
{"lineNum":"   82","line":"    try expectEqual(InferResult.Error, result.getType());","class":"lineCov","hits":"1","order":"5718","possible_hits":"1",},
{"lineNum":"   83","line":"    try expectEqual(CompileError.Type.ImplicitAnyError, result.Error.getType());","class":"lineCov","hits":"2","order":"5719","possible_hits":"2",},
{"lineNum":"   84","line":"    const e = result.Error.ImplicitAnyError;","class":"linePartCov","hits":"2","order":"5720","possible_hits":"3",},
{"lineNum":"   85","line":"    try expectEqual(cursor, e.csr);","class":"linePartCov","hits":"1","order":"5721","possible_hits":"2",},
{"lineNum":"   86","line":"    try expectEqualStrings(symbol, e.symbol);","class":"lineCov","hits":"1","order":"5722","possible_hits":"1",},
{"lineNum":"   87","line":"}"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"pub fn inferExprType(cmp: *Compiler, nd: Node) InferResult {","class":"lineCov","hits":"1","order":"4299","possible_hits":"1",},
{"lineNum":"   90","line":"    switch (nd.data) {","class":"lineCov","hits":"10","order":"4300","possible_hits":"10",},
{"lineNum":"   91","line":"        .Int => nd.ty = cmp.typebook.getNumber(),","class":"lineCov","hits":"1","order":"4301","possible_hits":"1",},
{"lineNum":"   92","line":"        .Float => nd.ty = cmp.typebook.getNumber(),","class":"lineCov","hits":"1","order":"5747","possible_hits":"1",},
{"lineNum":"   93","line":"        .String, .Template => nd.ty = cmp.typebook.getString(),","class":"lineCov","hits":"1","order":"4379","possible_hits":"1",},
{"lineNum":"   94","line":"        .True, .False => nd.ty = cmp.typebook.getBoolean(),","class":"lineCov","hits":"1","order":"4345","possible_hits":"1",},
{"lineNum":"   95","line":"        .Null => nd.ty = cmp.typebook.getNull(),","class":"lineCov","hits":"1","order":"4580","possible_hits":"1",},
{"lineNum":"   96","line":"        .Undefined => nd.ty = cmp.typebook.getUndefined(),","class":"lineCov","hits":"1","order":"4581","possible_hits":"1",},
{"lineNum":"   97","line":"        .Ident => |ident| nd.ty = if (cmp.scope.get(ident)) |sym|","class":"linePartCov","hits":"2","order":"4325","possible_hits":"3",},
{"lineNum":"   98","line":"            sym.ty","class":"lineCov","hits":"1","order":"4326","possible_hits":"1",},
{"lineNum":"   99","line":"        else"},
{"lineNum":"  100","line":"            cmp.typebook.getUndefined(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"        .PrefixOp, .PostfixOp => |op| {","class":"lineCov","hits":"1","order":"4370","possible_hits":"1",},
{"lineNum":"  102","line":"            const expr = switch (inferExprType(cmp, op.expr)) {","class":"linePartCov","hits":"1","order":"4371","possible_hits":"2",},
{"lineNum":"  103","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4372","possible_hits":"1",},
{"lineNum":"  104","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            };"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            const entry = cmp.typebook.getOpEntry(op.op);","class":"lineCov","hits":"1","order":"4373","possible_hits":"1",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"            // We assume it\'s unary, otherwise the Node wouldn\'t have parsed"},
{"lineNum":"  110","line":"            if (entry == null or !expr.isAssignableTo(entry.?.Unary.input)) {","class":"linePartCov","hits":"2","order":"4374","possible_hits":"3",},
{"lineNum":"  111","line":"                return InferResult.err(CompileError.opError(OpError.new(","class":"lineCov","hits":"1","order":"4383","possible_hits":"1",},
{"lineNum":"  112","line":"                    nd.csr,","class":"lineCov","hits":"1","order":"4380","possible_hits":"1",},
{"lineNum":"  113","line":"                    op.op,","class":"lineCov","hits":"1","order":"4381","possible_hits":"1",},
{"lineNum":"  114","line":"                    expr,","class":"lineCov","hits":"1","order":"4382","possible_hits":"1",},
{"lineNum":"  115","line":"                )));"},
{"lineNum":"  116","line":"            }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"            nd.ty = if (entry.?.Unary.output) |out| out else expr;","class":"linePartCov","hits":"1","order":"4375","possible_hits":"2",},
{"lineNum":"  119","line":"        },"},
{"lineNum":"  120","line":"        .BinaryOp => |op| {","class":"lineCov","hits":"1","order":"4323","possible_hits":"1",},
{"lineNum":"  121","line":"            const left = switch (inferExprType(cmp, op.left)) {","class":"linePartCov","hits":"1","order":"4324","possible_hits":"2",},
{"lineNum":"  122","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4327","possible_hits":"1",},
{"lineNum":"  123","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"            };"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            const right = switch (inferExprType(cmp, op.right)) {","class":"linePartCov","hits":"1","order":"4328","possible_hits":"2",},
{"lineNum":"  127","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4329","possible_hits":"1",},
{"lineNum":"  128","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"            };"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"            if (!right.isAssignableTo(left)) {","class":"lineCov","hits":"2","order":"4330","possible_hits":"2",},
{"lineNum":"  132","line":"                return InferResult.err(CompileError.assignError(","class":"lineCov","hits":"1","order":"4347","possible_hits":"1",},
{"lineNum":"  133","line":"                    AssignError.new(nd.csr, left, right),","class":"lineCov","hits":"1","order":"4346","possible_hits":"1",},
{"lineNum":"  134","line":"                ));"},
{"lineNum":"  135","line":"            }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            const entry = cmp.typebook.getOpEntry(op.op);","class":"lineCov","hits":"1","order":"4331","possible_hits":"1",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"            // We assume it\'s binary, otherwise the Node wouldn\'t have parsed"},
{"lineNum":"  140","line":"            if (entry == null or !left.isAssignableTo(entry.?.Binary.input)) {","class":"linePartCov","hits":"2","order":"4332","possible_hits":"3",},
{"lineNum":"  141","line":"                return InferResult.err(CompileError.opError(OpError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"                    nd.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"                    op.op,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"                    left,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"                )));"},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"            nd.ty = if (entry.?.Binary.output) |out| out else left;","class":"linePartCov","hits":"1","order":"4333","possible_hits":"2",},
{"lineNum":"  149","line":"        },"},
{"lineNum":"  150","line":"        .Ternary => |trn| {","class":"lineCov","hits":"1","order":"4410","possible_hits":"1",},
{"lineNum":"  151","line":"            _ = switch (inferExprType(cmp, trn.cond)) {","class":"linePartCov","hits":"2","order":"4411","possible_hits":"3",},
{"lineNum":"  152","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4412","possible_hits":"1",},
{"lineNum":"  153","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"            };"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"            const ifT = switch (inferExprType(cmp, trn.ifTrue)) {","class":"linePartCov","hits":"1","order":"4413","possible_hits":"2",},
{"lineNum":"  157","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4414","possible_hits":"1",},
{"lineNum":"  158","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"            };"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"            const ifF = switch (inferExprType(cmp, trn.ifFalse)) {","class":"linePartCov","hits":"1","order":"4415","possible_hits":"2",},
{"lineNum":"  162","line":"                .Success => |res| res,","class":"lineCov","hits":"1","order":"4416","possible_hits":"1",},
{"lineNum":"  163","line":"                .Error => |err| return InferResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"            };"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            nd.ty = if (ifT == ifF)","class":"lineCov","hits":"3","order":"4417","possible_hits":"3",},
{"lineNum":"  167","line":"                ifT","class":"lineCov","hits":"1","order":"4418","possible_hits":"1",},
{"lineNum":"  168","line":"            else"},
{"lineNum":"  169","line":"                cmp.typebook.getUnion(&.{ ifT, ifF });","class":"lineCov","hits":"1","order":"5797","possible_hits":"1",},
{"lineNum":"  170","line":"        },"},
{"lineNum":"  171","line":"        .Call => |call| {","class":"lineCov","hits":"1","order":"4431","possible_hits":"1",},
{"lineNum":"  172","line":"            const func = inferExprType(cmp, call.expr);","class":"lineCov","hits":"1","order":"4432","possible_hits":"1",},
{"lineNum":"  173","line":"            if (func.getType() != .Success)","class":"lineCov","hits":"2","order":"4433","possible_hits":"2",},
{"lineNum":"  174","line":"                return func;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"            if (func.Success.getType() != .Function) {","class":"lineCov","hits":"3","order":"4436","possible_hits":"3",},
{"lineNum":"  177","line":"                return InferResult.err(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"                    GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                        call.expr.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"                        if (call.expr.getType() == .Ident)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  181","line":"                            cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  182","line":"                                \"Variable \'{s}\' is not a function\","},
{"lineNum":"  183","line":"                                .{call.expr.data.Ident},","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  184","line":"                            )"},
{"lineNum":"  185","line":"                        else"},
{"lineNum":"  186","line":"                            \"Calling a value that is not a function\","},
{"lineNum":"  187","line":"                    ),"},
{"lineNum":"  188","line":"                ));"},
{"lineNum":"  189","line":"            }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            const funcTy = func.Success.Function;","class":"linePartCov","hits":"2","order":"4437","possible_hits":"3",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"            if (funcTy.args.len != call.args.items.len) {","class":"lineCov","hits":"2","order":"4438","possible_hits":"2",},
{"lineNum":"  194","line":"                return InferResult.err(CompileError.genericError(","class":"lineCov","hits":"1","order":"5866","possible_hits":"1",},
{"lineNum":"  195","line":"                    GenericError.new(","class":"lineCov","hits":"1","order":"5865","possible_hits":"1",},
{"lineNum":"  196","line":"                        call.expr.csr,","class":"lineCov","hits":"1","order":"5862","possible_hits":"1",},
{"lineNum":"  197","line":"                        cmp.fmt(","class":"lineCov","hits":"2","order":"5863","possible_hits":"2",},
{"lineNum":"  198","line":"                            \"Function expected {d} arguments but found {d}\","},
{"lineNum":"  199","line":"                            .{ funcTy.args.len, call.args.items.len },","class":"lineCov","hits":"1","order":"5864","possible_hits":"1",},
{"lineNum":"  200","line":"                        ),"},
{"lineNum":"  201","line":"                    ),"},
{"lineNum":"  202","line":"                ));"},
{"lineNum":"  203","line":"            }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"            for (call.args.items) |arg, index| {","class":"lineCov","hits":"2","order":"4439","possible_hits":"2",},
{"lineNum":"  206","line":"                const res = inferExprType(cmp, arg);","class":"lineCov","hits":"1","order":"4440","possible_hits":"1",},
{"lineNum":"  207","line":"                if (res.getType() != .Success)","class":"lineCov","hits":"2","order":"4441","possible_hits":"2",},
{"lineNum":"  208","line":"                    return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"4442","possible_hits":"3",},
{"lineNum":"  211","line":"                const argTy = funcTy.args[index];","class":"linePartCov","hits":"1","order":"4443","possible_hits":"2",},
{"lineNum":"  212","line":"                if (!ty.isAssignableTo(argTy)) {","class":"lineCov","hits":"2","order":"4444","possible_hits":"2",},
{"lineNum":"  213","line":"                    return InferResult.err(CompileError.typeError(","class":"lineCov","hits":"1","order":"5893","possible_hits":"1",},
{"lineNum":"  214","line":"                        TypeError.new(arg.csr, ty, argTy),","class":"lineCov","hits":"1","order":"5892","possible_hits":"1",},
{"lineNum":"  215","line":"                    ));"},
{"lineNum":"  216","line":"                }"},
{"lineNum":"  217","line":"            }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            nd.ty = funcTy.ret;","class":"lineCov","hits":"1","order":"4445","possible_hits":"1",},
{"lineNum":"  220","line":"        },"},
{"lineNum":"  221","line":"        .Array => |arr| {","class":"lineCov","hits":"1","order":"5907","possible_hits":"1",},
{"lineNum":"  222","line":"            if (arr.items.len == 0) {","class":"lineCov","hits":"3","order":"5908","possible_hits":"3",},
{"lineNum":"  223","line":"                nd.ty = cmp.typebook.getArray(cmp.typebook.getUnknown());","class":"lineCov","hits":"1","order":"5909","possible_hits":"1",},
{"lineNum":"  224","line":"            } else {"},
{"lineNum":"  225","line":"                var res = inferExprType(cmp, arr.items[0]);","class":"linePartCov","hits":"1","order":"5917","possible_hits":"2",},
{"lineNum":"  226","line":"                if (res.getType() != .Success)","class":"lineCov","hits":"2","order":"5918","possible_hits":"2",},
{"lineNum":"  227","line":"                    return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"                var subtype = res.Success;","class":"linePartCov","hits":"2","order":"5919","possible_hits":"3",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"                for (arr.items[1..]) |item| {","class":"linePartCov","hits":"3","order":"5920","possible_hits":"4",},
{"lineNum":"  232","line":"                    res = inferExprType(cmp, item);","class":"lineCov","hits":"1","order":"5921","possible_hits":"1",},
{"lineNum":"  233","line":"                    if (res.getType() != .Success)","class":"lineCov","hits":"2","order":"5922","possible_hits":"2",},
{"lineNum":"  234","line":"                        return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"                    subtype = cmp.typebook.combine(subtype, res.Success);","class":"linePartCov","hits":"2","order":"5923","possible_hits":"3",},
{"lineNum":"  237","line":"                }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"                nd.ty = cmp.typebook.getArray(subtype);","class":"lineCov","hits":"1","order":"5924","possible_hits":"1",},
{"lineNum":"  240","line":"            }"},
{"lineNum":"  241","line":"        },"},
{"lineNum":"  242","line":"        .ArrayAccess => |access| {","class":"lineCov","hits":"1","order":"5964","possible_hits":"1",},
{"lineNum":"  243","line":"            const expr = inferExprType(cmp, access.expr);","class":"lineCov","hits":"1","order":"5965","possible_hits":"1",},
{"lineNum":"  244","line":"            if (expr.getType() != .Success)","class":"lineCov","hits":"2","order":"5966","possible_hits":"2",},
{"lineNum":"  245","line":"                return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"            const exprTy = expr.Success;","class":"linePartCov","hits":"2","order":"5967","possible_hits":"3",},
{"lineNum":"  248","line":"            if (exprTy.getType() != .Array) {","class":"lineCov","hits":"2","order":"5968","possible_hits":"2",},
{"lineNum":"  249","line":"                return InferResult.err(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"                    GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"                        access.expr.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"                        \"Invalid array access - expression is not an array\","},
{"lineNum":"  253","line":"                    ),"},
{"lineNum":"  254","line":"                ));"},
{"lineNum":"  255","line":"            }"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"            const index = inferExprType(cmp, access.index);","class":"lineCov","hits":"1","order":"5969","possible_hits":"1",},
{"lineNum":"  258","line":"            if (index.getType() != .Success)","class":"lineCov","hits":"2","order":"5970","possible_hits":"2",},
{"lineNum":"  259","line":"                return index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"            const indexTy = index.Success;","class":"linePartCov","hits":"2","order":"5971","possible_hits":"3",},
{"lineNum":"  262","line":"            if (indexTy.getType() != .Number) {","class":"lineCov","hits":"2","order":"5972","possible_hits":"2",},
{"lineNum":"  263","line":"                return InferResult.err(CompileError.typeError(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"                    TypeError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"                        access.index.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"                        indexTy,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"                        cmp.typebook.getNumber(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"                    ),"},
{"lineNum":"  269","line":"                ));"},
{"lineNum":"  270","line":"            }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"            nd.ty = exprTy.Array.subtype;","class":"linePartCov","hits":"2","order":"5973","possible_hits":"3",},
{"lineNum":"  273","line":"        },"},
{"lineNum":"  274","line":"        .Dot => |dot| {","class":"lineCov","hits":"1","order":"5985","possible_hits":"1",},
{"lineNum":"  275","line":"            const expr = inferExprType(cmp, dot.expr);","class":"lineCov","hits":"1","order":"5986","possible_hits":"1",},
{"lineNum":"  276","line":"            switch (expr) {","class":"linePartCov","hits":"2","order":"5987","possible_hits":"3",},
{"lineNum":"  277","line":"                .Success => |exprTy| {","class":"lineCov","hits":"1","order":"5988","possible_hits":"1",},
{"lineNum":"  278","line":"                    if (exprTy.getType() != .Interface)","class":"lineCov","hits":"2","order":"5989","possible_hits":"2",},
{"lineNum":"  279","line":"                        return InferResult.err(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"                            GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"                                nd.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"                                cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"                                    \"Using \'.\' operator on non-object value\","},
{"lineNum":"  284","line":"                                    .{},"},
{"lineNum":"  285","line":"                                ),"},
{"lineNum":"  286","line":"                            ),"},
{"lineNum":"  287","line":"                        ));"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"                    const member = exprTy.Interface.getNamedMember(dot.ident);","class":"linePartCov","hits":"2","order":"5990","possible_hits":"3",},
{"lineNum":"  290","line":"                    if (member == null)","class":"lineCov","hits":"2","order":"5991","possible_hits":"2",},
{"lineNum":"  291","line":"                        return InferResult.err(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"                            GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"                                nd.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"                                cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"                                    \"Object property {s} does not exist\","},
{"lineNum":"  296","line":"                                    .{dot.ident},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"                                ),"},
{"lineNum":"  298","line":"                            ),"},
{"lineNum":"  299","line":"                        ));"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"                    nd.ty = member.?.ty;","class":"linePartCov","hits":"1","order":"5992","possible_hits":"2",},
{"lineNum":"  302","line":"                },"},
{"lineNum":"  303","line":"                .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"            }"},
{"lineNum":"  305","line":"        },"},
{"lineNum":"  306","line":"        .Object => |obj| {","class":"lineCov","hits":"1","order":"6013","possible_hits":"1",},
{"lineNum":"  307","line":"            // TODO: Refactor this to avoid allocation"},
{"lineNum":"  308","line":"            var members = allocate.alloc(","class":"lineCov","hits":"1","order":"6016","possible_hits":"1",},
{"lineNum":"  309","line":"                cmp.alloc,","class":"lineCov","hits":"1","order":"6014","possible_hits":"1",},
{"lineNum":"  310","line":"                Type.InterfaceType.Member,"},
{"lineNum":"  311","line":"                obj.items.len,","class":"lineCov","hits":"1","order":"6015","possible_hits":"1",},
{"lineNum":"  312","line":"            );"},
{"lineNum":"  313","line":"            defer cmp.alloc.free(members);","class":"linePartCov","hits":"1","order":"6024","possible_hits":"2",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"            for (obj.items) |prop, index| {","class":"lineCov","hits":"2","order":"6017","possible_hits":"2",},
{"lineNum":"  316","line":"                const name = prop.getName();","class":"lineCov","hits":"1","order":"6018","possible_hits":"1",},
{"lineNum":"  317","line":"                switch (inferExprType(cmp, prop.value)) {","class":"linePartCov","hits":"2","order":"6019","possible_hits":"3",},
{"lineNum":"  318","line":"                    .Success => |ty| members[index] = Type.InterfaceType.Member{","class":"linePartCov","hits":"1","order":"6020","possible_hits":"2",},
{"lineNum":"  319","line":"                        .name = name,","class":"lineCov","hits":"1","order":"6021","possible_hits":"1",},
{"lineNum":"  320","line":"                        .ty = ty,","class":"lineCov","hits":"1","order":"6022","possible_hits":"1",},
{"lineNum":"  321","line":"                    },"},
{"lineNum":"  322","line":"                    .Error => return InferResult.err(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  323","line":"                        GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"                            nd.csr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"                            cmp.fmt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  326","line":"                                \"Object property \'{s}\' has an invalid type\","},
{"lineNum":"  327","line":"                                .{name},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"                            ),"},
{"lineNum":"  329","line":"                        ),"},
{"lineNum":"  330","line":"                    )),"},
{"lineNum":"  331","line":"                }"},
{"lineNum":"  332","line":"            }"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"            nd.ty = cmp.typebook.getInterface(members);","class":"lineCov","hits":"1","order":"6023","possible_hits":"1",},
{"lineNum":"  335","line":"        },"},
{"lineNum":"  336","line":"        else => std.debug.panic(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"            \"Unhandled node type in inferExprType: {?}\\n\","},
{"lineNum":"  338","line":"            .{nd.getType()},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"        ),"},
{"lineNum":"  340","line":"    }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    return InferResult.success(nd.ty.?);","class":"linePartCov","hits":"1","order":"4302","possible_hits":"2",},
{"lineNum":"  343","line":"}"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"const InferTestCase = struct {"},
{"lineNum":"  346","line":"    expectedTy: ?Type.Type = null,"},
{"lineNum":"  347","line":"    check: ?fn ("},
{"lineNum":"  348","line":"        scope: *Scope,"},
{"lineNum":"  349","line":"        typebook: *TypeBook,"},
{"lineNum":"  350","line":"        res: InferResult,"},
{"lineNum":"  351","line":"    ) anyerror!void = null,"},
{"lineNum":"  352","line":"    setup: ?fn ("},
{"lineNum":"  353","line":"        scope: *Scope,"},
{"lineNum":"  354","line":"        typebook: *TypeBook,"},
{"lineNum":"  355","line":"    ) anyerror!void = null,"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    pub fn run(","class":"lineCov","hits":"18","order":"5725","possible_hits":"18",},
{"lineNum":"  358","line":"        self: InferTestCase,"},
{"lineNum":"  359","line":"        comptime nodeType: NodeType,"},
{"lineNum":"  360","line":"        nodeData: anytype,"},
{"lineNum":"  361","line":"    ) !void {","class":"lineCov","hits":"36","order":"5741","possible_hits":"36",},
{"lineNum":"  362","line":"        const config = Config{};"},
{"lineNum":"  363","line":"        var backend = NopBackend.new();","class":"lineCov","hits":"18","order":"5726","possible_hits":"18",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"        var compiler = Compiler.new(","class":"lineCov","hits":"18","order":"5728","possible_hits":"18",},
{"lineNum":"  366","line":"            std.testing.allocator,"},
{"lineNum":"  367","line":"            &config,"},
{"lineNum":"  368","line":"            &backend.backend,","class":"lineCov","hits":"18","order":"5727","possible_hits":"18",},
{"lineNum":"  369","line":"        );"},
{"lineNum":"  370","line":"        defer compiler.deinit();","class":"linePartCov","hits":"18","order":"5743","possible_hits":"144",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"        if (self.setup) |setup|","class":"linePartCov","hits":"24","order":"5729","possible_hits":"36",},
{"lineNum":"  373","line":"            try setup(compiler.scope, compiler.typebook);","class":"linePartCov","hits":"6","order":"5768","possible_hits":"36",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"        const nd = makeNode(","class":"lineCov","hits":"18","order":"5732","possible_hits":"18",},
{"lineNum":"  376","line":"            std.testing.allocator,"},
{"lineNum":"  377","line":"            Cursor.new(6, 9),","class":"lineCov","hits":"18","order":"5730","possible_hits":"18",},
{"lineNum":"  378","line":"            nodeType,"},
{"lineNum":"  379","line":"            nodeData,","class":"lineCov","hits":"14","order":"5731","possible_hits":"14",},
{"lineNum":"  380","line":"        );"},
{"lineNum":"  381","line":"        defer std.testing.allocator.destroy(nd);","class":"linePartCov","hits":"18","order":"5742","possible_hits":"126",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        const res = inferExprType(&compiler, nd);","class":"lineCov","hits":"18","order":"5733","possible_hits":"18",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"        if (res.getType() != .Success and self.expectedTy != null)","class":"linePartCov","hits":"18","order":"5734","possible_hits":"36",},
{"lineNum":"  386","line":"            try res.Error.report(std.io.getStdErr().writer());","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"        if (self.expectedTy) |expectedTy| {","class":"linePartCov","hits":"31","order":"5735","possible_hits":"36",},
{"lineNum":"  389","line":"            try expectEqual(InferResult.Success, res.getType());","class":"linePartCov","hits":"13","order":"5736","possible_hits":"36",},
{"lineNum":"  390","line":"            try expectEqual(expectedTy, res.Success.getType());","class":"linePartCov","hits":"26","order":"5737","possible_hits":"54",},
{"lineNum":"  391","line":"            try expect(nd.ty != null);","class":"linePartCov","hits":"13","order":"5738","possible_hits":"36",},
{"lineNum":"  392","line":"            try expectEqual(expectedTy, nd.ty.?.getType());","class":"linePartCov","hits":"13","order":"5739","possible_hits":"54",},
{"lineNum":"  393","line":"        }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        if (self.check) |check|","class":"linePartCov","hits":"25","order":"5740","possible_hits":"36",},
{"lineNum":"  396","line":"            try check(compiler.scope, compiler.typebook, res);","class":"linePartCov","hits":"7","order":"5798","possible_hits":"36",},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":"};"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"test \"can infer type of int literal\" {","class":"lineCov","hits":"2","order":"5723","possible_hits":"2",},
{"lineNum":"  401","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5744","possible_hits":"1",},
{"lineNum":"  402","line":"        .expectedTy = .Number,"},
{"lineNum":"  403","line":"    }).run(.Int, \"1234\");","class":"lineCov","hits":"1","order":"5724","possible_hits":"1",},
{"lineNum":"  404","line":"}"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"test \"can infer type of float literal\" {","class":"lineCov","hits":"2","order":"5745","possible_hits":"2",},
{"lineNum":"  407","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5748","possible_hits":"1",},
{"lineNum":"  408","line":"        .expectedTy = .Number,"},
{"lineNum":"  409","line":"    }).run(.Float, \"1.234\");","class":"lineCov","hits":"1","order":"5746","possible_hits":"1",},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"test \"can infer type of string literals\" {","class":"lineCov","hits":"2","order":"5749","possible_hits":"2",},
{"lineNum":"  413","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5751","possible_hits":"1",},
{"lineNum":"  414","line":"        .expectedTy = .String,"},
{"lineNum":"  415","line":"    }).run(.String, \"\'a string\'\");","class":"lineCov","hits":"1","order":"5750","possible_hits":"1",},
{"lineNum":"  416","line":"}"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"test \"can infer type of template literals\" {","class":"lineCov","hits":"2","order":"5752","possible_hits":"2",},
{"lineNum":"  419","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5754","possible_hits":"1",},
{"lineNum":"  420","line":"        .expectedTy = .String,"},
{"lineNum":"  421","line":"    }).run(.Template, \"`a template`\");","class":"lineCov","hits":"1","order":"5753","possible_hits":"1",},
{"lineNum":"  422","line":"}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"test \"can infer type of booleans\" {","class":"lineCov","hits":"2","order":"5755","possible_hits":"2",},
{"lineNum":"  425","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5757","possible_hits":"1",},
{"lineNum":"  426","line":"        .expectedTy = .Boolean,"},
{"lineNum":"  427","line":"    }).run(.True, {});","class":"lineCov","hits":"1","order":"5756","possible_hits":"1",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5759","possible_hits":"1",},
{"lineNum":"  430","line":"        .expectedTy = .Boolean,"},
{"lineNum":"  431","line":"    }).run(.False, {});","class":"lineCov","hits":"1","order":"5758","possible_hits":"1",},
{"lineNum":"  432","line":"}"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"test \"can infer type of \'null\'\" {","class":"lineCov","hits":"2","order":"5760","possible_hits":"2",},
{"lineNum":"  435","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5762","possible_hits":"1",},
{"lineNum":"  436","line":"        .expectedTy = .Null,"},
{"lineNum":"  437","line":"    }).run(.Null, {});","class":"lineCov","hits":"1","order":"5761","possible_hits":"1",},
{"lineNum":"  438","line":"}"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"test \"can infer type of \'undefined\'\" {","class":"lineCov","hits":"2","order":"5763","possible_hits":"2",},
{"lineNum":"  441","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5765","possible_hits":"1",},
{"lineNum":"  442","line":"        .expectedTy = .Undefined,"},
{"lineNum":"  443","line":"    }).run(.Undefined, {});","class":"lineCov","hits":"1","order":"5764","possible_hits":"1",},
{"lineNum":"  444","line":"}"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"test \"can infer type of an identifier\" {","class":"lineCov","hits":"2","order":"5766","possible_hits":"2",},
{"lineNum":"  447","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5774","possible_hits":"1",},
{"lineNum":"  448","line":"        .expectedTy = .String,"},
{"lineNum":"  449","line":"        .setup = (struct {"},
{"lineNum":"  450","line":"            fn setup(","class":"lineCov","hits":"1","order":"5769","possible_hits":"1",},
{"lineNum":"  451","line":"                scope: *Scope,"},
{"lineNum":"  452","line":"                typebook: *TypeBook,"},
{"lineNum":"  453","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5773","possible_hits":"1",},
{"lineNum":"  454","line":"                scope.put(","class":"lineCov","hits":"2","order":"5770","possible_hits":"2",},
{"lineNum":"  455","line":"                    \"aVariable\","},
{"lineNum":"  456","line":"                    typebook.getString(),","class":"lineCov","hits":"1","order":"5771","possible_hits":"1",},
{"lineNum":"  457","line":"                    false,"},
{"lineNum":"  458","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5772","possible_hits":"1",},
{"lineNum":"  459","line":"                );"},
{"lineNum":"  460","line":"            }"},
{"lineNum":"  461","line":"        }).setup,"},
{"lineNum":"  462","line":"    }).run(.Ident, \"aVariable\");","class":"lineCov","hits":"1","order":"5767","possible_hits":"1",},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"test \"can infer type of a homogeneous ternary expression\" {","class":"lineCov","hits":"3","order":"5775","possible_hits":"3",},
{"lineNum":"  466","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  467","line":"    const csr = Cursor.new(0, 0);","class":"lineCov","hits":"1","order":"5776","possible_hits":"1",},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    const cond = makeNode(alloc, csr, .True, {});","class":"lineCov","hits":"1","order":"5777","possible_hits":"1",},
{"lineNum":"  470","line":"    const ifTrue = makeNode(alloc, csr, .Int, \"1\");","class":"lineCov","hits":"1","order":"5778","possible_hits":"1",},
{"lineNum":"  471","line":"    const ifFalse = makeNode(alloc, csr, .Int, \"2\");","class":"lineCov","hits":"1","order":"5779","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    defer alloc.destroy(cond);","class":"linePartCov","hits":"1","order":"5787","possible_hits":"2",},
{"lineNum":"  474","line":"    defer alloc.destroy(ifTrue);","class":"linePartCov","hits":"1","order":"5786","possible_hits":"2",},
{"lineNum":"  475","line":"    defer alloc.destroy(ifFalse);","class":"linePartCov","hits":"1","order":"5785","possible_hits":"2",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5784","possible_hits":"2",},
{"lineNum":"  478","line":"        .expectedTy = .Number,"},
{"lineNum":"  479","line":"    }).run(.Ternary, node.Ternary{","class":"lineCov","hits":"1","order":"5783","possible_hits":"1",},
{"lineNum":"  480","line":"        .cond = cond,","class":"lineCov","hits":"1","order":"5780","possible_hits":"1",},
{"lineNum":"  481","line":"        .ifTrue = ifTrue,","class":"lineCov","hits":"1","order":"5781","possible_hits":"1",},
{"lineNum":"  482","line":"        .ifFalse = ifFalse,","class":"lineCov","hits":"1","order":"5782","possible_hits":"1",},
{"lineNum":"  483","line":"    });"},
{"lineNum":"  484","line":"}"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"test \"can infer type of a non-homogeneous ternary expression\" {","class":"lineCov","hits":"3","order":"5788","possible_hits":"3",},
{"lineNum":"  487","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  488","line":"    const csr = Cursor.new(0, 0);","class":"lineCov","hits":"1","order":"5789","possible_hits":"1",},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"    const cond = makeNode(alloc, csr, .True, {});","class":"lineCov","hits":"1","order":"5790","possible_hits":"1",},
{"lineNum":"  491","line":"    const ifTrue = makeNode(alloc, csr, .Int, \"1\");","class":"lineCov","hits":"1","order":"5791","possible_hits":"1",},
{"lineNum":"  492","line":"    const ifFalse = makeNode(alloc, csr, .String, \"\'hello world\'\");","class":"lineCov","hits":"1","order":"5792","possible_hits":"1",},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    defer alloc.destroy(cond);","class":"linePartCov","hits":"1","order":"5809","possible_hits":"2",},
{"lineNum":"  495","line":"    defer alloc.destroy(ifTrue);","class":"linePartCov","hits":"1","order":"5808","possible_hits":"2",},
{"lineNum":"  496","line":"    defer alloc.destroy(ifFalse);","class":"linePartCov","hits":"1","order":"5807","possible_hits":"2",},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5806","possible_hits":"2",},
{"lineNum":"  499","line":"        .check = (struct {"},
{"lineNum":"  500","line":"            fn check(","class":"lineCov","hits":"1","order":"5799","possible_hits":"1",},
{"lineNum":"  501","line":"                scope: *Scope,"},
{"lineNum":"  502","line":"                typebook: *TypeBook,"},
{"lineNum":"  503","line":"                res: InferResult,"},
{"lineNum":"  504","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5805","possible_hits":"1",},
{"lineNum":"  505","line":"                _ = scope;"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"                const expectedTy = typebook.getUnion(&.{","class":"lineCov","hits":"2","order":"5800","possible_hits":"2",},
{"lineNum":"  508","line":"                    typebook.getNumber(),","class":"lineCov","hits":"1","order":"5801","possible_hits":"1",},
{"lineNum":"  509","line":"                    typebook.getString(),","class":"lineCov","hits":"1","order":"5802","possible_hits":"1",},
{"lineNum":"  510","line":"                });"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"5803","possible_hits":"1",},
{"lineNum":"  513","line":"                try expectEqual(expectedTy, res.Success);","class":"lineCov","hits":"2","order":"5804","possible_hits":"2",},
{"lineNum":"  514","line":"            }"},
{"lineNum":"  515","line":"        }).check,"},
{"lineNum":"  516","line":"    }).run(.Ternary, node.Ternary{","class":"lineCov","hits":"1","order":"5796","possible_hits":"1",},
{"lineNum":"  517","line":"        .cond = cond,","class":"lineCov","hits":"1","order":"5793","possible_hits":"1",},
{"lineNum":"  518","line":"        .ifTrue = ifTrue,","class":"lineCov","hits":"1","order":"5794","possible_hits":"1",},
{"lineNum":"  519","line":"        .ifFalse = ifFalse,","class":"lineCov","hits":"1","order":"5795","possible_hits":"1",},
{"lineNum":"  520","line":"    });"},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"test \"can infer type of function call with no arguments\" {","class":"lineCov","hits":"3","order":"5810","possible_hits":"3",},
{"lineNum":"  524","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"    const func = makeNode(alloc, Cursor.new(0, 0), .Ident, \"aFunction\");","class":"lineCov","hits":"1","order":"5811","possible_hits":"1",},
{"lineNum":"  527","line":"    defer alloc.destroy(func);","class":"linePartCov","hits":"1","order":"5820","possible_hits":"2",},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    const args = node.NodeList{};"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5819","possible_hits":"2",},
{"lineNum":"  532","line":"        .expectedTy = .Boolean,"},
{"lineNum":"  533","line":"        .setup = (struct {"},
{"lineNum":"  534","line":"            fn setup(","class":"lineCov","hits":"1","order":"5814","possible_hits":"1",},
{"lineNum":"  535","line":"                scope: *Scope,"},
{"lineNum":"  536","line":"                typebook: *TypeBook,"},
{"lineNum":"  537","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5818","possible_hits":"1",},
{"lineNum":"  538","line":"                scope.put(","class":"lineCov","hits":"2","order":"5815","possible_hits":"2",},
{"lineNum":"  539","line":"                    \"aFunction\","},
{"lineNum":"  540","line":"                    typebook.getFunction(typebook.getBoolean(), &[_]Type.Ptr{}),","class":"lineCov","hits":"1","order":"5816","possible_hits":"1",},
{"lineNum":"  541","line":"                    true,"},
{"lineNum":"  542","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5817","possible_hits":"1",},
{"lineNum":"  543","line":"                );"},
{"lineNum":"  544","line":"            }"},
{"lineNum":"  545","line":"        }).setup,"},
{"lineNum":"  546","line":"    }).run(.Call, .{","class":"lineCov","hits":"1","order":"5813","possible_hits":"1",},
{"lineNum":"  547","line":"        .expr = func,","class":"lineCov","hits":"1","order":"5812","possible_hits":"1",},
{"lineNum":"  548","line":"        .args = args,"},
{"lineNum":"  549","line":"    });"},
{"lineNum":"  550","line":"}"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"test \"can infer type of function call with arguments\" {","class":"lineCov","hits":"3","order":"5821","possible_hits":"3",},
{"lineNum":"  553","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    const func = makeNode(alloc, Cursor.new(0, 0), .Ident, \"aFunction\");","class":"lineCov","hits":"1","order":"5822","possible_hits":"1",},
{"lineNum":"  556","line":"    defer alloc.destroy(func);","class":"linePartCov","hits":"1","order":"5844","possible_hits":"4",},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"    const arg1 = makeNode(alloc, Cursor.new(0, 0), .Int, \"34\");","class":"lineCov","hits":"1","order":"5823","possible_hits":"1",},
{"lineNum":"  559","line":"    const arg2 = makeNode(alloc, Cursor.new(0, 0), .String, \"a string\");","class":"lineCov","hits":"1","order":"5824","possible_hits":"1",},
{"lineNum":"  560","line":"    defer alloc.destroy(arg1);","class":"linePartCov","hits":"1","order":"5843","possible_hits":"4",},
{"lineNum":"  561","line":"    defer alloc.destroy(arg2);","class":"linePartCov","hits":"1","order":"5842","possible_hits":"4",},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    var args = node.NodeList{};","class":"lineCov","hits":"1","order":"5825","possible_hits":"1",},
{"lineNum":"  564","line":"    defer args.deinit(alloc);","class":"linePartCov","hits":"1","order":"5841","possible_hits":"4",},
{"lineNum":"  565","line":"    try args.append(alloc, arg1);","class":"linePartCov","hits":"1","order":"5826","possible_hits":"2",},
{"lineNum":"  566","line":"    try args.append(alloc, arg2);","class":"linePartCov","hits":"1","order":"5827","possible_hits":"2",},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5840","possible_hits":"2",},
{"lineNum":"  569","line":"        .expectedTy = .Boolean,"},
{"lineNum":"  570","line":"        .setup = (struct {"},
{"lineNum":"  571","line":"            fn setup(","class":"lineCov","hits":"1","order":"5831","possible_hits":"1",},
{"lineNum":"  572","line":"                scope: *Scope,"},
{"lineNum":"  573","line":"                typebook: *TypeBook,"},
{"lineNum":"  574","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5839","possible_hits":"1",},
{"lineNum":"  575","line":"                scope.put(","class":"lineCov","hits":"2","order":"5832","possible_hits":"2",},
{"lineNum":"  576","line":"                    \"aFunction\","},
{"lineNum":"  577","line":"                    typebook.getFunction(","class":"lineCov","hits":"2","order":"5833","possible_hits":"2",},
{"lineNum":"  578","line":"                        typebook.getBoolean(),","class":"lineCov","hits":"1","order":"5834","possible_hits":"1",},
{"lineNum":"  579","line":"                        &[_]Type.Ptr{","class":"lineCov","hits":"1","order":"5837","possible_hits":"1",},
{"lineNum":"  580","line":"                            typebook.getNumber(),","class":"lineCov","hits":"1","order":"5835","possible_hits":"1",},
{"lineNum":"  581","line":"                            typebook.getString(),","class":"lineCov","hits":"1","order":"5836","possible_hits":"1",},
{"lineNum":"  582","line":"                        },"},
{"lineNum":"  583","line":"                    ),"},
{"lineNum":"  584","line":"                    true,"},
{"lineNum":"  585","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5838","possible_hits":"1",},
{"lineNum":"  586","line":"                );"},
{"lineNum":"  587","line":"            }"},
{"lineNum":"  588","line":"        }).setup,"},
{"lineNum":"  589","line":"    }).run(.Call, .{","class":"lineCov","hits":"1","order":"5830","possible_hits":"1",},
{"lineNum":"  590","line":"        .expr = func,","class":"lineCov","hits":"1","order":"5828","possible_hits":"1",},
{"lineNum":"  591","line":"        .args = args,","class":"lineCov","hits":"1","order":"5829","possible_hits":"1",},
{"lineNum":"  592","line":"    });"},
{"lineNum":"  593","line":"}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"test \"an error is thrown when calling a function with a wrong argument count\" {","class":"lineCov","hits":"3","order":"5845","possible_hits":"3",},
{"lineNum":"  596","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"    const func = makeNode(alloc, Cursor.new(0, 0), .Ident, \"aFunction\");","class":"lineCov","hits":"1","order":"5846","possible_hits":"1",},
{"lineNum":"  599","line":"    defer alloc.destroy(func);","class":"linePartCov","hits":"1","order":"5877","possible_hits":"3",},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    const arg = makeNode(alloc, Cursor.new(0, 0), .Int, \"34\");","class":"lineCov","hits":"1","order":"5847","possible_hits":"1",},
{"lineNum":"  602","line":"    defer alloc.destroy(arg);","class":"linePartCov","hits":"1","order":"5876","possible_hits":"3",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    var args = node.NodeList{};","class":"lineCov","hits":"1","order":"5848","possible_hits":"1",},
{"lineNum":"  605","line":"    defer args.deinit(alloc);","class":"linePartCov","hits":"1","order":"5875","possible_hits":"3",},
{"lineNum":"  606","line":"    try args.append(alloc, arg);","class":"linePartCov","hits":"1","order":"5849","possible_hits":"2",},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5874","possible_hits":"2",},
{"lineNum":"  609","line":"        .setup = (struct {"},
{"lineNum":"  610","line":"            fn setup(","class":"lineCov","hits":"1","order":"5853","possible_hits":"1",},
{"lineNum":"  611","line":"                scope: *Scope,"},
{"lineNum":"  612","line":"                typebook: *TypeBook,"},
{"lineNum":"  613","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5861","possible_hits":"1",},
{"lineNum":"  614","line":"                scope.put(","class":"lineCov","hits":"2","order":"5854","possible_hits":"2",},
{"lineNum":"  615","line":"                    \"aFunction\","},
{"lineNum":"  616","line":"                    typebook.getFunction(","class":"lineCov","hits":"2","order":"5855","possible_hits":"2",},
{"lineNum":"  617","line":"                        typebook.getBoolean(),","class":"lineCov","hits":"1","order":"5856","possible_hits":"1",},
{"lineNum":"  618","line":"                        &[_]Type.Ptr{","class":"lineCov","hits":"1","order":"5859","possible_hits":"1",},
{"lineNum":"  619","line":"                            typebook.getNumber(),","class":"lineCov","hits":"1","order":"5857","possible_hits":"1",},
{"lineNum":"  620","line":"                            typebook.getString(),","class":"lineCov","hits":"1","order":"5858","possible_hits":"1",},
{"lineNum":"  621","line":"                        },"},
{"lineNum":"  622","line":"                    ),"},
{"lineNum":"  623","line":"                    true,"},
{"lineNum":"  624","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5860","possible_hits":"1",},
{"lineNum":"  625","line":"                );"},
{"lineNum":"  626","line":"            }"},
{"lineNum":"  627","line":"        }).setup,"},
{"lineNum":"  628","line":"        .check = (struct {"},
{"lineNum":"  629","line":"            fn check(","class":"lineCov","hits":"1","order":"5867","possible_hits":"1",},
{"lineNum":"  630","line":"                scope: *Scope,"},
{"lineNum":"  631","line":"                typebook: *TypeBook,"},
{"lineNum":"  632","line":"                res: InferResult,"},
{"lineNum":"  633","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5873","possible_hits":"1",},
{"lineNum":"  634","line":"                _ = scope;"},
{"lineNum":"  635","line":"                _ = typebook;"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"                try expectEqual(InferResult.Variant.Error, res.getType());","class":"lineCov","hits":"1","order":"5868","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"                const err = res.Error;","class":"linePartCov","hits":"2","order":"5869","possible_hits":"3",},
{"lineNum":"  640","line":"                try expectEqual(CompileError.Type.GenericError, err.getType());","class":"linePartCov","hits":"1","order":"5870","possible_hits":"2",},
{"lineNum":"  641","line":"                try expectEqualStrings(","class":"linePartCov","hits":"1","order":"5872","possible_hits":"2",},
{"lineNum":"  642","line":"                    \"Function expected 2 arguments but found 1\","},
{"lineNum":"  643","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"5871","possible_hits":"3",},
{"lineNum":"  644","line":"                );"},
{"lineNum":"  645","line":"            }"},
{"lineNum":"  646","line":"        }).check,"},
{"lineNum":"  647","line":"    }).run(.Call, .{","class":"lineCov","hits":"1","order":"5852","possible_hits":"1",},
{"lineNum":"  648","line":"        .expr = func,","class":"lineCov","hits":"1","order":"5850","possible_hits":"1",},
{"lineNum":"  649","line":"        .args = args,","class":"lineCov","hits":"1","order":"5851","possible_hits":"1",},
{"lineNum":"  650","line":"    });"},
{"lineNum":"  651","line":"}"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"test \"an error is thrown if function arguments have incorrect types\" {","class":"lineCov","hits":"3","order":"5878","possible_hits":"3",},
{"lineNum":"  654","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    const func = makeNode(alloc, Cursor.new(0, 0), .Ident, \"aFunction\");","class":"lineCov","hits":"1","order":"5879","possible_hits":"1",},
{"lineNum":"  657","line":"    defer alloc.destroy(func);","class":"linePartCov","hits":"1","order":"5904","possible_hits":"3",},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    const arg = makeNode(alloc, Cursor.new(0, 0), .Int, \"34\");","class":"lineCov","hits":"1","order":"5880","possible_hits":"1",},
{"lineNum":"  660","line":"    defer alloc.destroy(arg);","class":"linePartCov","hits":"1","order":"5903","possible_hits":"3",},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    var args = node.NodeList{};","class":"lineCov","hits":"1","order":"5881","possible_hits":"1",},
{"lineNum":"  663","line":"    defer args.deinit(alloc);","class":"linePartCov","hits":"1","order":"5902","possible_hits":"3",},
{"lineNum":"  664","line":"    try args.append(alloc, arg);","class":"linePartCov","hits":"1","order":"5882","possible_hits":"2",},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5901","possible_hits":"2",},
{"lineNum":"  667","line":"        .setup = (struct {"},
{"lineNum":"  668","line":"            fn setup(","class":"lineCov","hits":"1","order":"5886","possible_hits":"1",},
{"lineNum":"  669","line":"                scope: *Scope,"},
{"lineNum":"  670","line":"                typebook: *TypeBook,"},
{"lineNum":"  671","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5891","possible_hits":"1",},
{"lineNum":"  672","line":"                scope.put(","class":"lineCov","hits":"2","order":"5887","possible_hits":"2",},
{"lineNum":"  673","line":"                    \"aFunction\","},
{"lineNum":"  674","line":"                    typebook.getFunction(typebook.getBoolean(), &[_]Type.Ptr{","class":"lineCov","hits":"2","order":"5888","possible_hits":"2",},
{"lineNum":"  675","line":"                        typebook.getString(),","class":"lineCov","hits":"1","order":"5889","possible_hits":"1",},
{"lineNum":"  676","line":"                    }),"},
{"lineNum":"  677","line":"                    true,"},
{"lineNum":"  678","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5890","possible_hits":"1",},
{"lineNum":"  679","line":"                );"},
{"lineNum":"  680","line":"            }"},
{"lineNum":"  681","line":"        }).setup,"},
{"lineNum":"  682","line":"        .check = (struct {"},
{"lineNum":"  683","line":"            fn check(","class":"lineCov","hits":"1","order":"5894","possible_hits":"1",},
{"lineNum":"  684","line":"                scope: *Scope,"},
{"lineNum":"  685","line":"                typebook: *TypeBook,"},
{"lineNum":"  686","line":"                res: InferResult,"},
{"lineNum":"  687","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5900","possible_hits":"1",},
{"lineNum":"  688","line":"                _ = scope;"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"                try expectEqual(InferResult.Variant.Error, res.getType());","class":"lineCov","hits":"1","order":"5895","possible_hits":"1",},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"                const err = res.Error;","class":"linePartCov","hits":"2","order":"5896","possible_hits":"3",},
{"lineNum":"  693","line":"                try expectEqual(CompileError.Type.TypeError, err.getType());","class":"linePartCov","hits":"1","order":"5897","possible_hits":"2",},
{"lineNum":"  694","line":"                try expectEqual(err.TypeError.valueTy, typebook.getNumber());","class":"lineCov","hits":"2","order":"5898","possible_hits":"2",},
{"lineNum":"  695","line":"                try expectEqual(err.TypeError.targetTy, typebook.getString());","class":"lineCov","hits":"2","order":"5899","possible_hits":"2",},
{"lineNum":"  696","line":"            }"},
{"lineNum":"  697","line":"        }).check,"},
{"lineNum":"  698","line":"    }).run(.Call, .{","class":"lineCov","hits":"1","order":"5885","possible_hits":"1",},
{"lineNum":"  699","line":"        .expr = func,","class":"lineCov","hits":"1","order":"5883","possible_hits":"1",},
{"lineNum":"  700","line":"        .args = args,","class":"lineCov","hits":"1","order":"5884","possible_hits":"1",},
{"lineNum":"  701","line":"    });"},
{"lineNum":"  702","line":"}"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"test \"can infer type of an empty array\" {","class":"lineCov","hits":"2","order":"5905","possible_hits":"2",},
{"lineNum":"  705","line":"    const items = node.NodeList{ .items = &[_]Node{} };"},
{"lineNum":"  706","line":"    try (InferTestCase{","class":"lineCov","hits":"1","order":"5910","possible_hits":"1",},
{"lineNum":"  707","line":"        .expectedTy = .Array,"},
{"lineNum":"  708","line":"    }).run(.Array, items);","class":"lineCov","hits":"1","order":"5906","possible_hits":"1",},
{"lineNum":"  709","line":"}"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"test \"can infer type of a homogeneous array\" {","class":"lineCov","hits":"3","order":"5911","possible_hits":"3",},
{"lineNum":"  712","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  713","line":"    const csr = Cursor.new(0, 0);","class":"lineCov","hits":"1","order":"5912","possible_hits":"1",},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"    const items = node.NodeList{ .items = &[_]Node{","class":"lineCov","hits":"1","order":"5915","possible_hits":"1",},
{"lineNum":"  716","line":"        makeNode(alloc, csr, .Int, \"1\"),","class":"lineCov","hits":"1","order":"5913","possible_hits":"1",},
{"lineNum":"  717","line":"        makeNode(alloc, csr, .Int, \"2\"),","class":"lineCov","hits":"1","order":"5914","possible_hits":"1",},
{"lineNum":"  718","line":"    } };"},
{"lineNum":"  719","line":"    defer alloc.destroy(items.items[0]);","class":"linePartCov","hits":"1","order":"5933","possible_hits":"2",},
{"lineNum":"  720","line":"    defer alloc.destroy(items.items[1]);","class":"linePartCov","hits":"1","order":"5932","possible_hits":"3",},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5931","possible_hits":"2",},
{"lineNum":"  723","line":"        .check = (struct {"},
{"lineNum":"  724","line":"            fn check(","class":"lineCov","hits":"1","order":"5925","possible_hits":"1",},
{"lineNum":"  725","line":"                scope: *Scope,"},
{"lineNum":"  726","line":"                typebook: *TypeBook,"},
{"lineNum":"  727","line":"                res: InferResult,"},
{"lineNum":"  728","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5930","possible_hits":"1",},
{"lineNum":"  729","line":"                _ = scope;"},
{"lineNum":"  730","line":"                _ = typebook;"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"5926","possible_hits":"1",},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"                const arr = res.Success;","class":"linePartCov","hits":"2","order":"5927","possible_hits":"3",},
{"lineNum":"  735","line":"                try expectEqual(Type.Type.Array, arr.getType());","class":"linePartCov","hits":"1","order":"5928","possible_hits":"2",},
{"lineNum":"  736","line":"                try expectEqual(Type.Type.Number, arr.Array.subtype.getType());","class":"lineCov","hits":"2","order":"5929","possible_hits":"2",},
{"lineNum":"  737","line":"            }"},
{"lineNum":"  738","line":"        }).check,"},
{"lineNum":"  739","line":"    }).run(.Array, items);","class":"lineCov","hits":"1","order":"5916","possible_hits":"1",},
{"lineNum":"  740","line":"}"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"test \"can infer type of an inhomogeneous array\" {","class":"lineCov","hits":"3","order":"5934","possible_hits":"3",},
{"lineNum":"  743","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  744","line":"    const csr = Cursor.new(0, 0);","class":"lineCov","hits":"1","order":"5935","possible_hits":"1",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    const items = node.NodeList{ .items = &[_]Node{","class":"lineCov","hits":"1","order":"5938","possible_hits":"1",},
{"lineNum":"  747","line":"        makeNode(alloc, csr, .Int, \"1\"),","class":"lineCov","hits":"1","order":"5936","possible_hits":"1",},
{"lineNum":"  748","line":"        makeNode(alloc, csr, .String, \"\'a\'\"),","class":"lineCov","hits":"1","order":"5937","possible_hits":"1",},
{"lineNum":"  749","line":"    } };"},
{"lineNum":"  750","line":"    defer alloc.destroy(items.items[0]);","class":"linePartCov","hits":"1","order":"5951","possible_hits":"2",},
{"lineNum":"  751","line":"    defer alloc.destroy(items.items[1]);","class":"linePartCov","hits":"1","order":"5950","possible_hits":"3",},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5949","possible_hits":"2",},
{"lineNum":"  754","line":"        .check = (struct {"},
{"lineNum":"  755","line":"            fn check(","class":"lineCov","hits":"1","order":"5940","possible_hits":"1",},
{"lineNum":"  756","line":"                scope: *Scope,"},
{"lineNum":"  757","line":"                typebook: *TypeBook,"},
{"lineNum":"  758","line":"                res: InferResult,"},
{"lineNum":"  759","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5948","possible_hits":"1",},
{"lineNum":"  760","line":"                _ = scope;"},
{"lineNum":"  761","line":"                _ = typebook;"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"5941","possible_hits":"1",},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"                const arr = res.Success;","class":"linePartCov","hits":"2","order":"5942","possible_hits":"3",},
{"lineNum":"  766","line":"                try expectEqual(Type.Type.Array, arr.getType());","class":"linePartCov","hits":"1","order":"5943","possible_hits":"2",},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"                const sub = arr.Array.subtype;","class":"linePartCov","hits":"2","order":"5944","possible_hits":"3",},
{"lineNum":"  769","line":"                try expectEqual(Type.Type.Union, sub.getType());","class":"linePartCov","hits":"1","order":"5945","possible_hits":"2",},
{"lineNum":"  770","line":"                try expectEqual(Type.Type.Number, sub.Union.tys[0].getType());","class":"lineCov","hits":"2","order":"5946","possible_hits":"2",},
{"lineNum":"  771","line":"                try expectEqual(Type.Type.String, sub.Union.tys[1].getType());","class":"lineCov","hits":"2","order":"5947","possible_hits":"2",},
{"lineNum":"  772","line":"            }"},
{"lineNum":"  773","line":"        }).check,"},
{"lineNum":"  774","line":"    }).run(.Array, items);","class":"lineCov","hits":"1","order":"5939","possible_hits":"1",},
{"lineNum":"  775","line":"}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"test \"can infer type of an array access\" {","class":"lineCov","hits":"3","order":"5952","possible_hits":"3",},
{"lineNum":"  778","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"  779","line":"    const csr = Cursor.new(0, 0);","class":"lineCov","hits":"1","order":"5953","possible_hits":"1",},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"    const expr = makeNode(alloc, csr, .Ident, \"anArray\");","class":"lineCov","hits":"1","order":"5954","possible_hits":"1",},
{"lineNum":"  782","line":"    const index = makeNode(alloc, csr, .Int, \"1\");","class":"lineCov","hits":"1","order":"5955","possible_hits":"1",},
{"lineNum":"  783","line":"    defer alloc.destroy(expr);","class":"linePartCov","hits":"1","order":"5980","possible_hits":"2",},
{"lineNum":"  784","line":"    defer alloc.destroy(index);","class":"linePartCov","hits":"1","order":"5979","possible_hits":"2",},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"5978","possible_hits":"2",},
{"lineNum":"  787","line":"        .setup = (struct {"},
{"lineNum":"  788","line":"            fn setup(","class":"lineCov","hits":"1","order":"5959","possible_hits":"1",},
{"lineNum":"  789","line":"                scope: *Scope,"},
{"lineNum":"  790","line":"                typebook: *TypeBook,"},
{"lineNum":"  791","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5963","possible_hits":"1",},
{"lineNum":"  792","line":"                scope.put(","class":"lineCov","hits":"2","order":"5960","possible_hits":"2",},
{"lineNum":"  793","line":"                    \"anArray\","},
{"lineNum":"  794","line":"                    typebook.getArray(typebook.getString()),","class":"lineCov","hits":"1","order":"5961","possible_hits":"1",},
{"lineNum":"  795","line":"                    true,"},
{"lineNum":"  796","line":"                    Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5962","possible_hits":"1",},
{"lineNum":"  797","line":"                );"},
{"lineNum":"  798","line":"            }"},
{"lineNum":"  799","line":"        }).setup,"},
{"lineNum":"  800","line":"        .check = (struct {"},
{"lineNum":"  801","line":"            fn check(","class":"lineCov","hits":"1","order":"5974","possible_hits":"1",},
{"lineNum":"  802","line":"                scope: *Scope,"},
{"lineNum":"  803","line":"                typebook: *TypeBook,"},
{"lineNum":"  804","line":"                res: InferResult,"},
{"lineNum":"  805","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"5977","possible_hits":"1",},
{"lineNum":"  806","line":"                _ = scope;"},
{"lineNum":"  807","line":"                _ = typebook;"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"5975","possible_hits":"1",},
{"lineNum":"  810","line":"                try expectEqual(Type.Type.String, res.Success.getType());","class":"lineCov","hits":"2","order":"5976","possible_hits":"2",},
{"lineNum":"  811","line":"            }"},
{"lineNum":"  812","line":"        }).check,"},
{"lineNum":"  813","line":"    }).run(.ArrayAccess, node.ArrayAccess{","class":"lineCov","hits":"1","order":"5958","possible_hits":"1",},
{"lineNum":"  814","line":"        .expr = expr,","class":"lineCov","hits":"1","order":"5956","possible_hits":"1",},
{"lineNum":"  815","line":"        .index = index,","class":"lineCov","hits":"1","order":"5957","possible_hits":"1",},
{"lineNum":"  816","line":"    });"},
{"lineNum":"  817","line":"}"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"test \"can infer type of a dot expression\" {","class":"lineCov","hits":"3","order":"5981","possible_hits":"3",},
{"lineNum":"  820","line":"    const nd = makeNode(","class":"lineCov","hits":"1","order":"5983","possible_hits":"1",},
{"lineNum":"  821","line":"        std.testing.allocator,"},
{"lineNum":"  822","line":"        Cursor.new(1, 1),","class":"lineCov","hits":"1","order":"5982","possible_hits":"1",},
{"lineNum":"  823","line":"        .Ident,"},
{"lineNum":"  824","line":"        \"console\","},
{"lineNum":"  825","line":"    );"},
{"lineNum":"  826","line":"    defer std.testing.allocator.destroy(nd);","class":"linePartCov","hits":"1","order":"6003","possible_hits":"2",},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"6002","possible_hits":"2",},
{"lineNum":"  829","line":"        .check = (struct {"},
{"lineNum":"  830","line":"            fn check(","class":"lineCov","hits":"1","order":"5993","possible_hits":"1",},
{"lineNum":"  831","line":"                scope: *Scope,"},
{"lineNum":"  832","line":"                typebook: *TypeBook,"},
{"lineNum":"  833","line":"                res: InferResult,"},
{"lineNum":"  834","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"6001","possible_hits":"1",},
{"lineNum":"  835","line":"                _ = scope;"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"5994","possible_hits":"1",},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"                const ty = res.Success;","class":"linePartCov","hits":"2","order":"5995","possible_hits":"3",},
{"lineNum":"  840","line":"                const consoleLogTy = typebook.getFunction(","class":"lineCov","hits":"2","order":"5996","possible_hits":"2",},
{"lineNum":"  841","line":"                    typebook.getVoid(),","class":"lineCov","hits":"1","order":"5997","possible_hits":"1",},
{"lineNum":"  842","line":"                    &[_]Type.Ptr{typebook.getAny()},","class":"lineCov","hits":"1","order":"5998","possible_hits":"1",},
{"lineNum":"  843","line":"                );"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"                try expectEqual(Type.Type.Function, ty.getType());","class":"linePartCov","hits":"1","order":"5999","possible_hits":"2",},
{"lineNum":"  846","line":"                try expectEqual(consoleLogTy, ty);","class":"lineCov","hits":"1","order":"6000","possible_hits":"1",},
{"lineNum":"  847","line":"            }"},
{"lineNum":"  848","line":"        }).check,"},
{"lineNum":"  849","line":"    }).run(.Dot, node.Dot{ .expr = nd, .ident = \"log\" });","class":"lineCov","hits":"1","order":"5984","possible_hits":"1",},
{"lineNum":"  850","line":"}"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"test \"can infer type of an object literal\" {","class":"lineCov","hits":"3","order":"6004","possible_hits":"3",},
{"lineNum":"  853","line":"    const nodes = [_]Node{"},
{"lineNum":"  854","line":"        makeNode(std.testing.allocator, Cursor.new(1, 1), .String, \"\'a\'\"),","class":"lineCov","hits":"1","order":"6005","possible_hits":"1",},
{"lineNum":"  855","line":"        makeNode(std.testing.allocator, Cursor.new(2, 1), .String, \"\'1\'\"),","class":"lineCov","hits":"1","order":"6006","possible_hits":"1",},
{"lineNum":"  856","line":"        makeNode(std.testing.allocator, Cursor.new(3, 1), .String, \"\'b\'\"),","class":"lineCov","hits":"1","order":"6007","possible_hits":"1",},
{"lineNum":"  857","line":"        makeNode(std.testing.allocator, Cursor.new(4, 1), .Int, \"2\"),","class":"lineCov","hits":"1","order":"6008","possible_hits":"1",},
{"lineNum":"  858","line":"    };"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"    defer for (nodes) |nd|","class":"linePartCov","hits":"2","order":"6036","possible_hits":"4",},
{"lineNum":"  861","line":"        std.testing.allocator.destroy(nd);","class":"linePartCov","hits":"1","order":"6037","possible_hits":"2",},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"    try (InferTestCase{","class":"linePartCov","hits":"1","order":"6035","possible_hits":"2",},
{"lineNum":"  864","line":"        .check = (struct {"},
{"lineNum":"  865","line":"            fn check(","class":"lineCov","hits":"1","order":"6025","possible_hits":"1",},
{"lineNum":"  866","line":"                scope: *Scope,"},
{"lineNum":"  867","line":"                typebook: *TypeBook,"},
{"lineNum":"  868","line":"                res: InferResult,"},
{"lineNum":"  869","line":"            ) anyerror!void {","class":"lineCov","hits":"1","order":"6034","possible_hits":"1",},
{"lineNum":"  870","line":"                _ = scope;"},
{"lineNum":"  871","line":"                _ = typebook;"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"                try expectEqual(InferResult.Variant.Success, res.getType());","class":"lineCov","hits":"1","order":"6026","possible_hits":"1",},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"                try expectEqual(Type.Type.Interface, res.Success.getType());","class":"lineCov","hits":"2","order":"6027","possible_hits":"2",},
{"lineNum":"  876","line":"                const members = res.Success.Interface.members;","class":"linePartCov","hits":"2","order":"6028","possible_hits":"3",},
{"lineNum":"  877","line":"                try expectEqual(@intCast(usize, 2), members.len);","class":"linePartCov","hits":"1","order":"6029","possible_hits":"2",},
{"lineNum":"  878","line":"                try expectEqualStrings(\"a\", members[0].name);","class":"linePartCov","hits":"1","order":"6030","possible_hits":"2",},
{"lineNum":"  879","line":"                try expectEqual(Type.Type.String, members[0].ty.getType());","class":"linePartCov","hits":"1","order":"6031","possible_hits":"2",},
{"lineNum":"  880","line":"                try expectEqualStrings(\"b\", members[1].name);","class":"linePartCov","hits":"1","order":"6032","possible_hits":"2",},
{"lineNum":"  881","line":"                try expectEqual(Type.Type.Number, members[1].ty.getType());","class":"linePartCov","hits":"1","order":"6033","possible_hits":"2",},
{"lineNum":"  882","line":"            }"},
{"lineNum":"  883","line":"        }).check,"},
{"lineNum":"  884","line":"    }).run(.Object, node.Object{","class":"lineCov","hits":"1","order":"6012","possible_hits":"1",},
{"lineNum":"  885","line":"        .items = &[_]node.ObjectProperty{","class":"lineCov","hits":"1","order":"6011","possible_hits":"1",},
{"lineNum":"  886","line":"            node.ObjectProperty.new(nodes[0], nodes[1]),","class":"lineCov","hits":"1","order":"6009","possible_hits":"1",},
{"lineNum":"  887","line":"            node.ObjectProperty.new(nodes[2], nodes[3]),","class":"lineCov","hits":"1","order":"6010","possible_hits":"1",},
{"lineNum":"  888","line":"        },"},
{"lineNum":"  889","line":"    });"},
{"lineNum":"  890","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-13 17:26:16", "instrumented" : 441, "covered" : 392,};
var merged_data = [];
