var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const expectError = std.testing.expectError;"},
{"lineNum":"   23","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   24","line":"const Token = @import(\"token.zig\").Token;"},
{"lineNum":"   25","line":"const Cursor = @import(\"cursor.zig\").Cursor;"},
{"lineNum":"   26","line":"const genericEql = @import(\"generic_eql.zig\");"},
{"lineNum":"   27","line":"const Type = @import(\"types/type.zig\").Type;"},
{"lineNum":"   28","line":"const allocate = @import(\"allocate.zig\");"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"const putInd = @import(\"node_data/indenter.zig\").putInd;"},
{"lineNum":"   31","line":"const DumpTestCase = @import(\"node_data/dump_test_case.zig\").DumpTestCase;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"pub const NodeList = std.ArrayListUnmanaged(Node);"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"const objectImp = @import(\"node_data/object.zig\");"},
{"lineNum":"   36","line":"pub const Object = objectImp.Object;"},
{"lineNum":"   37","line":"pub const ObjectProperty = objectImp.ObjectProperty;"},
{"lineNum":"   38","line":"pub const ObjectTypeMember = objectImp.ObjectTypeMember;"},
{"lineNum":"   39","line":"pub const ObjectType = objectImp.ObjectType;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"pub const Decl = @import(\"node_data/decl.zig\").Decl;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"pub const UnaryOp = @import(\"node_data/unary_op.zig\").UnaryOp;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"pub const BinaryOp = @import(\"node_data/binary_op.zig\").BinaryOp;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"pub const Ternary = @import(\"node_data/ternary.zig\").Ternary;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"pub const Alias = @import(\"node_data/alias.zig\").Alias;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"pub const Function = @import(\"node_data/function.zig\").Function;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"pub const If = @import(\"node_data/if.zig\").If;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"pub const For = @import(\"node_data/for.zig\").For;"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"pub const While = @import(\"node_data/while.zig\").While;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"pub const Do = @import(\"node_data/do.zig\").Do;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"pub const Labelled = @import(\"node_data/labelled.zig\").Labelled;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"pub const Try = @import(\"node_data/try.zig\").Try;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"pub const Switch = @import(\"node_data/switch.zig\").Switch;"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"pub const Dot = @import(\"node_data/dot.zig\").Dot;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"pub const ArrayAccess = @import(\"node_data/array_access.zig\").ArrayAccess;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"pub const Call = @import(\"node_data/call.zig\").Call;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"pub const NodeType = enum {"},
{"lineNum":"   74","line":"    EOF,"},
{"lineNum":"   75","line":"    Program,"},
{"lineNum":"   76","line":"    Decl,"},
{"lineNum":"   77","line":"    Int,"},
{"lineNum":"   78","line":"    Ident,"},
{"lineNum":"   79","line":"    String,"},
{"lineNum":"   80","line":"    Template,"},
{"lineNum":"   81","line":"    Comma,"},
{"lineNum":"   82","line":"    Array,"},
{"lineNum":"   83","line":"    Object,"},
{"lineNum":"   84","line":"    True,"},
{"lineNum":"   85","line":"    False,"},
{"lineNum":"   86","line":"    Null,"},
{"lineNum":"   87","line":"    Undefined,"},
{"lineNum":"   88","line":"    This,"},
{"lineNum":"   89","line":"    PostfixOp,"},
{"lineNum":"   90","line":"    PrefixOp,"},
{"lineNum":"   91","line":"    BinaryOp,"},
{"lineNum":"   92","line":"    Ternary,"},
{"lineNum":"   93","line":"    TypeName,"},
{"lineNum":"   94","line":"    UnionType,"},
{"lineNum":"   95","line":"    ArrayType,"},
{"lineNum":"   96","line":"    ObjectType,"},
{"lineNum":"   97","line":"    Alias,"},
{"lineNum":"   98","line":"    Function,"},
{"lineNum":"   99","line":"    Block,"},
{"lineNum":"  100","line":"    If,"},
{"lineNum":"  101","line":"    Switch,"},
{"lineNum":"  102","line":"    For,"},
{"lineNum":"  103","line":"    While,"},
{"lineNum":"  104","line":"    Do,"},
{"lineNum":"  105","line":"    Return,"},
{"lineNum":"  106","line":"    Break,"},
{"lineNum":"  107","line":"    Continue,"},
{"lineNum":"  108","line":"    Throw,"},
{"lineNum":"  109","line":"    Labelled,"},
{"lineNum":"  110","line":"    Try,"},
{"lineNum":"  111","line":"    Dot,"},
{"lineNum":"  112","line":"    ArrayAccess,"},
{"lineNum":"  113","line":"    Call,"},
{"lineNum":"  114","line":"};"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"pub const NodeData = union(NodeType) {"},
{"lineNum":"  117","line":"    EOF: void,"},
{"lineNum":"  118","line":"    Program: NodeList,"},
{"lineNum":"  119","line":"    Decl: Decl,"},
{"lineNum":"  120","line":"    Int: []const u8,"},
{"lineNum":"  121","line":"    Ident: []const u8,"},
{"lineNum":"  122","line":"    String: []const u8,"},
{"lineNum":"  123","line":"    Template: []const u8,"},
{"lineNum":"  124","line":"    Comma: NodeList,"},
{"lineNum":"  125","line":"    Array: NodeList,"},
{"lineNum":"  126","line":"    Object: Object,"},
{"lineNum":"  127","line":"    True: void,"},
{"lineNum":"  128","line":"    False: void,"},
{"lineNum":"  129","line":"    Null: void,"},
{"lineNum":"  130","line":"    Undefined: void,"},
{"lineNum":"  131","line":"    This: void,"},
{"lineNum":"  132","line":"    PostfixOp: UnaryOp,"},
{"lineNum":"  133","line":"    PrefixOp: UnaryOp,"},
{"lineNum":"  134","line":"    BinaryOp: BinaryOp,"},
{"lineNum":"  135","line":"    Ternary: Ternary,"},
{"lineNum":"  136","line":"    TypeName: []const u8,"},
{"lineNum":"  137","line":"    UnionType: NodeList,"},
{"lineNum":"  138","line":"    ArrayType: Node,"},
{"lineNum":"  139","line":"    ObjectType: ObjectType,"},
{"lineNum":"  140","line":"    Alias: Alias,"},
{"lineNum":"  141","line":"    Function: Function,"},
{"lineNum":"  142","line":"    Block: NodeList,"},
{"lineNum":"  143","line":"    If: If,"},
{"lineNum":"  144","line":"    Switch: Switch,"},
{"lineNum":"  145","line":"    For: For,"},
{"lineNum":"  146","line":"    While: While,"},
{"lineNum":"  147","line":"    Do: Do,"},
{"lineNum":"  148","line":"    Return: ?Node,"},
{"lineNum":"  149","line":"    Break: ?[]const u8,"},
{"lineNum":"  150","line":"    Continue: ?[]const u8,"},
{"lineNum":"  151","line":"    Throw: Node,"},
{"lineNum":"  152","line":"    Labelled: Labelled,"},
{"lineNum":"  153","line":"    Try: Try,"},
{"lineNum":"  154","line":"    Dot: Dot,"},
{"lineNum":"  155","line":"    ArrayAccess: ArrayAccess,"},
{"lineNum":"  156","line":"    Call: Call,"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    pub fn dump(","class":"linePartCov","hits":"1","order":"749","possible_hits":"2",},
{"lineNum":"  159","line":"        self: NodeData,"},
{"lineNum":"  160","line":"        writer: anytype,"},
{"lineNum":"  161","line":"        indent: usize,"},
{"lineNum":"  162","line":"    ) anyerror!void {","class":"linePartCov","hits":"1","order":"771","possible_hits":"2",},
{"lineNum":"  163","line":"        switch (self) {","class":"linePartCov","hits":"1","order":"750","possible_hits":"4",},
{"lineNum":"  164","line":"            .Decl => |decl| try decl.dump(writer, indent),","class":"linePartCov","hits":"1","order":"891","possible_hits":"2",},
{"lineNum":"  165","line":"            .Int, .TypeName, .Ident, .String, .Template => |s| try putInd(","class":"linePartCov","hits":"2","order":"767","possible_hits":"4",},
{"lineNum":"  166","line":"                writer,","class":"linePartCov","hits":"1","order":"768","possible_hits":"2",},
{"lineNum":"  167","line":"                indent,","class":"linePartCov","hits":"1","order":"769","possible_hits":"2",},
{"lineNum":"  168","line":"                \"{s}: \\\"{s}\\\"\\n\","},
{"lineNum":"  169","line":"                .{ @tagName(self), s },","class":"linePartCov","hits":"1","order":"770","possible_hits":"2",},
{"lineNum":"  170","line":"            ),"},
{"lineNum":"  171","line":"            .Program, .Comma, .UnionType, .Array, .Block => |list| {","class":"linePartCov","hits":"1","order":"751","possible_hits":"2",},
{"lineNum":"  172","line":"                try putInd(writer, indent, \"{s}\\n\", .{@tagName(self)});","class":"linePartCov","hits":"1","order":"752","possible_hits":"2",},
{"lineNum":"  173","line":"                for (list.items) |item|","class":"linePartCov","hits":"2","order":"758","possible_hits":"4",},
{"lineNum":"  174","line":"                    try item.dumpIndented(writer, indent + 2);","class":"linePartCov","hits":"1","order":"759","possible_hits":"4",},
{"lineNum":"  175","line":"            },"},
{"lineNum":"  176","line":"            .Object => |object| {","class":"linePartCov","hits":"1","order":"936","possible_hits":"2",},
{"lineNum":"  177","line":"                try putInd(writer, indent, \"Object\\n\", .{});","class":"linePartCov","hits":"1","order":"937","possible_hits":"2",},
{"lineNum":"  178","line":"                for (object.items) |item|","class":"linePartCov","hits":"2","order":"938","possible_hits":"4",},
{"lineNum":"  179","line":"                    try item.dump(writer, indent + 2);","class":"linePartCov","hits":"1","order":"939","possible_hits":"4",},
{"lineNum":"  180","line":"            },"},
{"lineNum":"  181","line":"            .EOF, .True, .False, .Null, .Undefined, .This => try putInd(","class":"linePartCov","hits":"1","order":"784","possible_hits":"2",},
{"lineNum":"  182","line":"                writer,","class":"linePartCov","hits":"1","order":"781","possible_hits":"2",},
{"lineNum":"  183","line":"                indent,","class":"linePartCov","hits":"1","order":"782","possible_hits":"2",},
{"lineNum":"  184","line":"                \"{s}\\n\","},
{"lineNum":"  185","line":"                .{@tagName(self)},","class":"linePartCov","hits":"1","order":"783","possible_hits":"2",},
{"lineNum":"  186","line":"            ),"},
{"lineNum":"  187","line":"            .PostfixOp, .PrefixOp => |unaryOp| {","class":"linePartCov","hits":"1","order":"1000","possible_hits":"2",},
{"lineNum":"  188","line":"                try putInd(writer, indent, \"{s}\\n\", .{@tagName(self)});","class":"linePartCov","hits":"1","order":"1001","possible_hits":"2",},
{"lineNum":"  189","line":"                try unaryOp.dump(writer, indent + 2);","class":"linePartCov","hits":"1","order":"1002","possible_hits":"4",},
{"lineNum":"  190","line":"            },"},
{"lineNum":"  191","line":"            .Return => |ret| {","class":"linePartCov","hits":"1","order":"791","possible_hits":"2",},
{"lineNum":"  192","line":"                try putInd(writer, indent, \"Return\\n\", .{});","class":"linePartCov","hits":"1","order":"792","possible_hits":"2",},
{"lineNum":"  193","line":"                if (ret) |expr|","class":"linePartCov","hits":"2","order":"793","possible_hits":"4",},
{"lineNum":"  194","line":"                    try expr.dumpIndented(writer, indent + 2);","class":"linePartCov","hits":"1","order":"794","possible_hits":"4",},
{"lineNum":"  195","line":"            },"},
{"lineNum":"  196","line":"            .Break, .Continue => |label| try putInd(","class":"linePartCov","hits":"2","order":"799","possible_hits":"4",},
{"lineNum":"  197","line":"                writer,","class":"linePartCov","hits":"1","order":"800","possible_hits":"2",},
{"lineNum":"  198","line":"                indent,","class":"linePartCov","hits":"1","order":"801","possible_hits":"2",},
{"lineNum":"  199","line":"                \"{s} \\\"{s}\\\"\\n\","},
{"lineNum":"  200","line":"                .{ @tagName(self), if (label) |l| l else \"\" },","class":"linePartCov","hits":"1","order":"802","possible_hits":"2",},
{"lineNum":"  201","line":"            ),"},
{"lineNum":"  202","line":"            .ArrayType, .Throw => |nd| {","class":"linePartCov","hits":"1","order":"809","possible_hits":"2",},
{"lineNum":"  203","line":"                try putInd(writer, indent, \"{s}\\n\", .{@tagName(self)});","class":"linePartCov","hits":"1","order":"810","possible_hits":"2",},
{"lineNum":"  204","line":"                try nd.dumpIndented(writer, indent + 2);","class":"linePartCov","hits":"1","order":"811","possible_hits":"4",},
{"lineNum":"  205","line":"            },"},
{"lineNum":"  206","line":"            .ObjectType => |objTy| {","class":"linePartCov","hits":"1","order":"980","possible_hits":"2",},
{"lineNum":"  207","line":"                try putInd(writer, indent, \"ObjectType\\n\", .{});","class":"linePartCov","hits":"1","order":"981","possible_hits":"2",},
{"lineNum":"  208","line":"                for (objTy.items) |member|","class":"linePartCov","hits":"2","order":"982","possible_hits":"4",},
{"lineNum":"  209","line":"                    try member.dump(writer, indent + 2);","class":"linePartCov","hits":"1","order":"983","possible_hits":"4",},
{"lineNum":"  210","line":"            },"},
{"lineNum":"  211","line":"            .BinaryOp => |binaryOp| try binaryOp.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1027","possible_hits":"2",},
{"lineNum":"  212","line":"            .Ternary => |ternary| try ternary.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1048","possible_hits":"2",},
{"lineNum":"  213","line":"            .Alias => |alias| try alias.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1068","possible_hits":"2",},
{"lineNum":"  214","line":"            .Function => |func| try func.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1112","possible_hits":"2",},
{"lineNum":"  215","line":"            .If => |stmt| try stmt.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1167","possible_hits":"2",},
{"lineNum":"  216","line":"            .Switch => |stmt| try stmt.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1227","possible_hits":"2",},
{"lineNum":"  217","line":"            .For => |loop| try loop.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1268","possible_hits":"2",},
{"lineNum":"  218","line":"            .While => |loop| try loop.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1318","possible_hits":"2",},
{"lineNum":"  219","line":"            .Do => |loop| try loop.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1339","possible_hits":"2",},
{"lineNum":"  220","line":"            .Try => |t| try t.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1401","possible_hits":"2",},
{"lineNum":"  221","line":"            .ArrayAccess => |aa| try aa.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1441","possible_hits":"2",},
{"lineNum":"  222","line":"            .Dot => |dot| try dot.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1424","possible_hits":"2",},
{"lineNum":"  223","line":"            .Call => |call| try call.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1460","possible_hits":"2",},
{"lineNum":"  224","line":"            .Labelled => |labelled| try labelled.dump(writer, indent),","class":"linePartCov","hits":"1","order":"1359","possible_hits":"2",},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    pub fn getType(self: NodeData) NodeType {","class":"lineCov","hits":"1","order":"3192","possible_hits":"1",},
{"lineNum":"  229","line":"        return @as(NodeType, self);","class":"lineCov","hits":"1","order":"3193","possible_hits":"1",},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":"};"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"test \"can dump Nodes with NodeList data\" {","class":"lineCov","hits":"3","order":"740","possible_hits":"3",},
{"lineNum":"  234","line":"    const node = makeNode(std.testing.allocator, Cursor.new(1, 1), .Int, \"1\");","class":"lineCov","hits":"1","order":"741","possible_hits":"1",},
{"lineNum":"  235","line":"    defer std.testing.allocator.destroy(node);","class":"linePartCov","hits":"1","order":"778","possible_hits":"2",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    try (DumpTestCase(NodeList, .Program){","class":"linePartCov","hits":"1","order":"777","possible_hits":"2",},
{"lineNum":"  238","line":"        .value = NodeList{ .items = &[_]Node{node} },","class":"lineCov","hits":"1","order":"742","possible_hits":"1",},
{"lineNum":"  239","line":"        .expected =","class":"lineCov","hits":"1","order":"743","possible_hits":"1",},
{"lineNum":"  240","line":"        \\\\Program"},
{"lineNum":"  241","line":"        \\\\  Int Node (1:1)"},
{"lineNum":"  242","line":"        \\\\    Int: \"1\""},
{"lineNum":"  243","line":"        \\\\"},
{"lineNum":"  244","line":"        ,"},
{"lineNum":"  245","line":"    }).run();","class":"lineCov","hits":"1","order":"744","possible_hits":"1",},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"test \"can dump Nodes with void data\" {","class":"lineCov","hits":"2","order":"779","possible_hits":"2",},
{"lineNum":"  249","line":"    try (DumpTestCase(void, .True){","class":"lineCov","hits":"1","order":"785","possible_hits":"1",},
{"lineNum":"  250","line":"        .value = {},"},
{"lineNum":"  251","line":"        .expected = \"True\\n\","},
{"lineNum":"  252","line":"    }).run();","class":"lineCov","hits":"1","order":"780","possible_hits":"1",},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"test \"can dump Nodes with ?Node data\" {","class":"lineCov","hits":"3","order":"786","possible_hits":"3",},
{"lineNum":"  256","line":"    const node = makeNode(std.testing.allocator, Cursor.new(1, 1), .Int, \"1\");","class":"lineCov","hits":"1","order":"787","possible_hits":"1",},
{"lineNum":"  257","line":"    defer std.testing.allocator.destroy(node);","class":"linePartCov","hits":"1","order":"796","possible_hits":"2",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    try (DumpTestCase(?Node, .Return){","class":"linePartCov","hits":"1","order":"795","possible_hits":"2",},
{"lineNum":"  260","line":"        .value = node,","class":"lineCov","hits":"1","order":"788","possible_hits":"1",},
{"lineNum":"  261","line":"        .expected =","class":"lineCov","hits":"1","order":"789","possible_hits":"1",},
{"lineNum":"  262","line":"        \\\\Return"},
{"lineNum":"  263","line":"        \\\\  Int Node (1:1)"},
{"lineNum":"  264","line":"        \\\\    Int: \"1\""},
{"lineNum":"  265","line":"        \\\\"},
{"lineNum":"  266","line":"        ,"},
{"lineNum":"  267","line":"    }).run();","class":"lineCov","hits":"1","order":"790","possible_hits":"1",},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"test \"can dump Nodes with ?[]const u8 data\" {","class":"lineCov","hits":"2","order":"797","possible_hits":"2",},
{"lineNum":"  271","line":"    try (DumpTestCase(?[]const u8, .Break){","class":"lineCov","hits":"1","order":"803","possible_hits":"1",},
{"lineNum":"  272","line":"        .value = \"aLabel\","},
{"lineNum":"  273","line":"        .expected = \"Break \\\"aLabel\\\"\\n\","},
{"lineNum":"  274","line":"    }).run();","class":"lineCov","hits":"1","order":"798","possible_hits":"1",},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"test \"can dump Nodes with Node data\" {","class":"lineCov","hits":"3","order":"804","possible_hits":"3",},
{"lineNum":"  278","line":"    const node = makeNode(std.testing.allocator, Cursor.new(1, 1), .Int, \"1\");","class":"lineCov","hits":"1","order":"805","possible_hits":"1",},
{"lineNum":"  279","line":"    defer std.testing.allocator.destroy(node);","class":"linePartCov","hits":"1","order":"813","possible_hits":"2",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    try (DumpTestCase(Node, .ArrayType){","class":"linePartCov","hits":"1","order":"812","possible_hits":"2",},
{"lineNum":"  282","line":"        .value = node,","class":"lineCov","hits":"1","order":"806","possible_hits":"1",},
{"lineNum":"  283","line":"        .expected =","class":"lineCov","hits":"1","order":"807","possible_hits":"1",},
{"lineNum":"  284","line":"        \\\\ArrayType"},
{"lineNum":"  285","line":"        \\\\  Int Node (1:1)"},
{"lineNum":"  286","line":"        \\\\    Int: \"1\""},
{"lineNum":"  287","line":"        \\\\"},
{"lineNum":"  288","line":"        ,"},
{"lineNum":"  289","line":"    }).run();","class":"lineCov","hits":"1","order":"808","possible_hits":"1",},
{"lineNum":"  290","line":"}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"pub const NodeImpl = struct {"},
{"lineNum":"  293","line":"    csr: Cursor,"},
{"lineNum":"  294","line":"    data: NodeData,"},
{"lineNum":"  295","line":"    ty: ?Type.Ptr = null,"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    pub fn getType(self: Node) NodeType {","class":"lineCov","hits":"1","order":"819","possible_hits":"1",},
{"lineNum":"  298","line":"        return @as(NodeType, self.data);","class":"lineCov","hits":"1","order":"820","possible_hits":"1",},
{"lineNum":"  299","line":"    }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    pub fn eql(self: Node, other: ?Node) bool {","class":"lineCov","hits":"1","order":"835","possible_hits":"1",},
{"lineNum":"  302","line":"        if (other) |n|","class":"lineCov","hits":"2","order":"836","possible_hits":"2",},
{"lineNum":"  303","line":"            return genericEql.eql(self.*, n.*);","class":"lineCov","hits":"1","order":"837","possible_hits":"1",},
{"lineNum":"  304","line":"        return false;","class":"lineCov","hits":"1","order":"861","possible_hits":"1",},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    pub fn dump(self: Node) void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"        const writer = std.io.getStdOut().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"        self.dumpIndented(writer, 0) catch unreachable;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"    }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    pub fn dumpIndented(","class":"linePartCov","hits":"1","order":"760","possible_hits":"2",},
{"lineNum":"  313","line":"        self: Node,"},
{"lineNum":"  314","line":"        writer: anytype,"},
{"lineNum":"  315","line":"        indent: usize,"},
{"lineNum":"  316","line":"    ) !void {","class":"linePartCov","hits":"1","order":"772","possible_hits":"2",},
{"lineNum":"  317","line":"        try putInd(writer, indent, \"{s} Node ({d}:{d})\\n\", .{","class":"linePartCov","hits":"2","order":"761","possible_hits":"4",},
{"lineNum":"  318","line":"            @tagName(self.data),","class":"linePartCov","hits":"1","order":"762","possible_hits":"2",},
{"lineNum":"  319","line":"            self.csr.ln,","class":"linePartCov","hits":"1","order":"763","possible_hits":"2",},
{"lineNum":"  320","line":"            self.csr.ch,","class":"linePartCov","hits":"1","order":"764","possible_hits":"2",},
{"lineNum":"  321","line":"        });"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"        try self.data.dump(writer, indent + 2);","class":"linePartCov","hits":"1","order":"766","possible_hits":"4",},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":"};"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"pub const Node = *NodeImpl;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"pub fn makeNode(","class":"lineCov","hits":"71","order":"657","possible_hits":"71",},
{"lineNum":"  330","line":"    alloc: Allocator,"},
{"lineNum":"  331","line":"    csr: Cursor,"},
{"lineNum":"  332","line":"    comptime ty: NodeType,"},
{"lineNum":"  333","line":"    data: anytype,"},
{"lineNum":"  334","line":") Node {"},
{"lineNum":"  335","line":"    var n = allocate.create(alloc, NodeImpl);","class":"lineCov","hits":"71","order":"658","possible_hits":"71",},
{"lineNum":"  336","line":"    n.csr = csr;","class":"lineCov","hits":"71","order":"659","possible_hits":"71",},
{"lineNum":"  337","line":"    n.data = @unionInit(NodeData, @tagName(ty), data);","class":"lineCov","hits":"71","order":"660","possible_hits":"71",},
{"lineNum":"  338","line":"    return n;","class":"lineCov","hits":"71","order":"661","possible_hits":"71",},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"test \"can generically initialize Nodes with makeNode\" {","class":"lineCov","hits":"3","order":"814","possible_hits":"3",},
{"lineNum":"  342","line":"    const name = \"aVariableName\";"},
{"lineNum":"  343","line":"    const node = makeNode(","class":"lineCov","hits":"1","order":"817","possible_hits":"1",},
{"lineNum":"  344","line":"        std.testing.allocator,"},
{"lineNum":"  345","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"815","possible_hits":"1",},
{"lineNum":"  346","line":"        NodeType.Decl,"},
{"lineNum":"  347","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"816","possible_hits":"1",},
{"lineNum":"  348","line":"    );"},
{"lineNum":"  349","line":"    defer std.testing.allocator.destroy(node);","class":"linePartCov","hits":"1","order":"823","possible_hits":"4",},
{"lineNum":"  350","line":"    try expectEqual(node.getType(), NodeType.Decl);","class":"linePartCov","hits":"1","order":"818","possible_hits":"2",},
{"lineNum":"  351","line":"    try expectEqual(node.data.Decl.scoping, .Var);","class":"linePartCov","hits":"2","order":"821","possible_hits":"3",},
{"lineNum":"  352","line":"    try expectEqualStrings(name, node.data.Decl.name);","class":"linePartCov","hits":"2","order":"822","possible_hits":"3",},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"test \"can compare Nodes for equality\" {","class":"lineCov","hits":"3","order":"824","possible_hits":"3",},
{"lineNum":"  356","line":"    const name = \"aVarName\";"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    const a = makeNode(","class":"lineCov","hits":"1","order":"827","possible_hits":"1",},
{"lineNum":"  359","line":"        std.testing.allocator,"},
{"lineNum":"  360","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"825","possible_hits":"1",},
{"lineNum":"  361","line":"        NodeType.Decl,"},
{"lineNum":"  362","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"826","possible_hits":"1",},
{"lineNum":"  363","line":"    );"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    const b = makeNode(","class":"lineCov","hits":"1","order":"830","possible_hits":"1",},
{"lineNum":"  366","line":"        std.testing.allocator,"},
{"lineNum":"  367","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"828","possible_hits":"1",},
{"lineNum":"  368","line":"        NodeType.Decl,"},
{"lineNum":"  369","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"829","possible_hits":"1",},
{"lineNum":"  370","line":"    );"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    const c = makeNode(","class":"lineCov","hits":"1","order":"833","possible_hits":"1",},
{"lineNum":"  373","line":"        std.testing.allocator,"},
{"lineNum":"  374","line":"        Cursor.new(1, 1),","class":"lineCov","hits":"1","order":"831","possible_hits":"1",},
{"lineNum":"  375","line":"        NodeType.Decl,"},
{"lineNum":"  376","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"832","possible_hits":"1",},
{"lineNum":"  377","line":"    );"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    defer std.testing.allocator.destroy(a);","class":"linePartCov","hits":"1","order":"864","possible_hits":"6",},
{"lineNum":"  380","line":"    defer std.testing.allocator.destroy(b);","class":"linePartCov","hits":"1","order":"863","possible_hits":"6",},
{"lineNum":"  381","line":"    defer std.testing.allocator.destroy(c);","class":"linePartCov","hits":"1","order":"862","possible_hits":"6",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    try expect(a.eql(b));","class":"linePartCov","hits":"1","order":"834","possible_hits":"2",},
{"lineNum":"  384","line":"    try expect(b.eql(a));","class":"linePartCov","hits":"1","order":"857","possible_hits":"2",},
{"lineNum":"  385","line":"    try expect(!a.eql(c));","class":"linePartCov","hits":"1","order":"858","possible_hits":"2",},
{"lineNum":"  386","line":"    try expect(!b.eql(c));","class":"linePartCov","hits":"1","order":"859","possible_hits":"2",},
{"lineNum":"  387","line":"    try expect(!a.eql(null));","class":"linePartCov","hits":"1","order":"860","possible_hits":"2",},
{"lineNum":"  388","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-05 21:30:20", "instrumented" : 128, "covered" : 125,};
var merged_data = [];
