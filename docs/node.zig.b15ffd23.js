var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Token = @import(\"token.zig\").Token;"},
{"lineNum":"   24","line":"const Cursor = @import(\"cursor.zig\").Cursor;"},
{"lineNum":"   25","line":"const genericEql = @import(\"generic_eql.zig\");"},
{"lineNum":"   26","line":"const Type = @import(\"types/type.zig\").Type;"},
{"lineNum":"   27","line":"const allocate = @import(\"allocate.zig\");"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"fn putInd("},
{"lineNum":"   30","line":"    writer: anytype,"},
{"lineNum":"   31","line":"    indent: usize,"},
{"lineNum":"   32","line":"    comptime fmt: []const u8,"},
{"lineNum":"   33","line":"    args: anytype,"},
{"lineNum":"   34","line":") std.os.WriteError!void {"},
{"lineNum":"   35","line":"    var i: usize = 0;"},
{"lineNum":"   36","line":"    while (i < indent) : (i += 1) {"},
{"lineNum":"   37","line":"        try writer.print(\" \", .{});"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    try writer.print(fmt, args);"},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"pub const NodeList = std.ArrayListUnmanaged(Node);"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"pub const Object = std.ArrayListUnmanaged(ObjectProperty);"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"pub const ObjectProperty = struct {"},
{"lineNum":"   48","line":"    key: Node,"},
{"lineNum":"   49","line":"    value: Node,"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    pub fn new(key: Node, value: Node) ObjectProperty {","class":"lineCov","hits":"1","order":"1914","possible_hits":"1",},
{"lineNum":"   52","line":"        return ObjectProperty{","class":"lineCov","hits":"1","order":"1917","possible_hits":"1",},
{"lineNum":"   53","line":"            .key = key,","class":"lineCov","hits":"1","order":"1915","possible_hits":"1",},
{"lineNum":"   54","line":"            .value = value,","class":"lineCov","hits":"1","order":"1916","possible_hits":"1",},
{"lineNum":"   55","line":"        };"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    pub fn dump("},
{"lineNum":"   59","line":"        self: ObjectProperty,"},
{"lineNum":"   60","line":"        writer: anytype,"},
{"lineNum":"   61","line":"        indent: usize,"},
{"lineNum":"   62","line":"    ) std.os.WriteError!void {"},
{"lineNum":"   63","line":"        try putInd(writer, indent, \"Property\\n\", .{});"},
{"lineNum":"   64","line":"        try self.key.dumpIndented(writer, indent + 2);"},
{"lineNum":"   65","line":"        try self.value.dumpIndented(writer, indent + 2);"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    pub fn eql(self: ObjectProperty, other: ObjectProperty) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"        return genericEql.eql(self, other);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    }"},
{"lineNum":"   71","line":"};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"pub const Decl = struct {"},
{"lineNum":"   74","line":"    pub const Scoping = enum {"},
{"lineNum":"   75","line":"        Var,"},
{"lineNum":"   76","line":"        Let,"},
{"lineNum":"   77","line":"        Const,"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        pub fn fromTokenType(tkn: Token.Type) !Scoping {"},
{"lineNum":"   80","line":"            return switch (tkn) {"},
{"lineNum":"   81","line":"                .Var => .Var,"},
{"lineNum":"   82","line":"                .Let => .Let,"},
{"lineNum":"   83","line":"                .Const => .Const,"},
{"lineNum":"   84","line":"            };"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        pub fn toString(self: Scoping) []const u8 {","class":"lineCov","hits":"1","order":"3801","possible_hits":"1",},
{"lineNum":"   88","line":"            return switch (self) {","class":"lineCov","hits":"4","order":"3802","possible_hits":"4",},
{"lineNum":"   89","line":"                .Var => \"var\",","class":"lineCov","hits":"1","order":"3803","possible_hits":"1",},
{"lineNum":"   90","line":"                .Let => \"let\",","class":"lineCov","hits":"1","order":"3817","possible_hits":"1",},
{"lineNum":"   91","line":"                .Const => \"const\",","class":"lineCov","hits":"1","order":"3821","possible_hits":"1",},
{"lineNum":"   92","line":"            };"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    };"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    scoping: Scoping,"},
{"lineNum":"   97","line":"    name: []const u8,"},
{"lineNum":"   98","line":"    ty: ?Node,"},
{"lineNum":"   99","line":"    value: ?Node,"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    pub fn new(","class":"lineCov","hits":"1","order":"632","possible_hits":"1",},
{"lineNum":"  102","line":"        scoping: Scoping,"},
{"lineNum":"  103","line":"        name: []const u8,"},
{"lineNum":"  104","line":"        ty: ?Node,"},
{"lineNum":"  105","line":"        value: ?Node,"},
{"lineNum":"  106","line":"    ) Decl {"},
{"lineNum":"  107","line":"        return Decl{","class":"lineCov","hits":"1","order":"637","possible_hits":"1",},
{"lineNum":"  108","line":"            .scoping = scoping,","class":"lineCov","hits":"1","order":"633","possible_hits":"1",},
{"lineNum":"  109","line":"            .name = name,","class":"lineCov","hits":"1","order":"634","possible_hits":"1",},
{"lineNum":"  110","line":"            .ty = ty,","class":"lineCov","hits":"1","order":"635","possible_hits":"1",},
{"lineNum":"  111","line":"            .value = value,","class":"lineCov","hits":"1","order":"636","possible_hits":"1",},
{"lineNum":"  112","line":"        };"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    pub fn dump("},
{"lineNum":"  116","line":"        self: Decl,"},
{"lineNum":"  117","line":"        writer: anytype,"},
{"lineNum":"  118","line":"        indent: usize,"},
{"lineNum":"  119","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  120","line":"        try putInd(writer, indent, \"{s} Decl \\\"{s}\\\"\\n\", .{"},
{"lineNum":"  121","line":"            @tagName(self.scoping),"},
{"lineNum":"  122","line":"            self.name,"},
{"lineNum":"  123","line":"        });"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        if (self.ty) |ty|"},
{"lineNum":"  126","line":"            try ty.dumpIndented(writer, indent + 2);"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"        if (self.value) |value|"},
{"lineNum":"  129","line":"            try value.dumpIndented(writer, indent + 2);"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":"};"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"pub const UnaryOp = struct {"},
{"lineNum":"  134","line":"    op: Token.Type,"},
{"lineNum":"  135","line":"    expr: Node,"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    pub fn new(op: Token.Type, expr: Node) UnaryOp {","class":"lineCov","hits":"1","order":"2198","possible_hits":"1",},
{"lineNum":"  138","line":"        return UnaryOp{","class":"lineCov","hits":"1","order":"2201","possible_hits":"1",},
{"lineNum":"  139","line":"            .op = op,","class":"lineCov","hits":"1","order":"2199","possible_hits":"1",},
{"lineNum":"  140","line":"            .expr = expr,","class":"lineCov","hits":"1","order":"2200","possible_hits":"1",},
{"lineNum":"  141","line":"        };"},
{"lineNum":"  142","line":"    }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    pub fn dump("},
{"lineNum":"  145","line":"        self: UnaryOp,"},
{"lineNum":"  146","line":"        writer: anytype,"},
{"lineNum":"  147","line":"        indent: usize,"},
{"lineNum":"  148","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  149","line":"        try putInd(writer, indent, \"{s} Unary Op\\n\", .{@tagName(self.op)});"},
{"lineNum":"  150","line":"        try self.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":"};"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"pub const BinaryOp = struct {"},
{"lineNum":"  155","line":"    op: Token.Type,"},
{"lineNum":"  156","line":"    left: Node,"},
{"lineNum":"  157","line":"    right: Node,"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    pub fn new(op: Token.Type, left: Node, right: Node) BinaryOp {","class":"lineCov","hits":"1","order":"2239","possible_hits":"1",},
{"lineNum":"  160","line":"        return BinaryOp{","class":"lineCov","hits":"1","order":"2243","possible_hits":"1",},
{"lineNum":"  161","line":"            .op = op,","class":"lineCov","hits":"1","order":"2240","possible_hits":"1",},
{"lineNum":"  162","line":"            .left = left,","class":"lineCov","hits":"1","order":"2241","possible_hits":"1",},
{"lineNum":"  163","line":"            .right = right,","class":"lineCov","hits":"1","order":"2242","possible_hits":"1",},
{"lineNum":"  164","line":"        };"},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    pub fn dump("},
{"lineNum":"  168","line":"        self: BinaryOp,"},
{"lineNum":"  169","line":"        writer: anytype,"},
{"lineNum":"  170","line":"        indent: usize,"},
{"lineNum":"  171","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  172","line":"        try putInd(writer, indent, \"{s} Binary Op\\n\", .{@tagName(self.op)});"},
{"lineNum":"  173","line":"        try self.left.dumpIndented(writer, indent + 2);"},
{"lineNum":"  174","line":"        try self.right.dumpIndented(writer, indent + 2);"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":"};"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"pub const Ternary = struct {"},
{"lineNum":"  179","line":"    cond: Node,"},
{"lineNum":"  180","line":"    ifTrue: Node,"},
{"lineNum":"  181","line":"    ifFalse: Node,"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    pub fn new(cond: Node, ifTrue: Node, ifFalse: Node) Ternary {","class":"lineCov","hits":"1","order":"2310","possible_hits":"1",},
{"lineNum":"  184","line":"        return Ternary{","class":"lineCov","hits":"1","order":"2314","possible_hits":"1",},
{"lineNum":"  185","line":"            .cond = cond,","class":"lineCov","hits":"1","order":"2311","possible_hits":"1",},
{"lineNum":"  186","line":"            .ifTrue = ifTrue,","class":"lineCov","hits":"1","order":"2312","possible_hits":"1",},
{"lineNum":"  187","line":"            .ifFalse = ifFalse,","class":"lineCov","hits":"1","order":"2313","possible_hits":"1",},
{"lineNum":"  188","line":"        };"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    pub fn dump("},
{"lineNum":"  192","line":"        self: Ternary,"},
{"lineNum":"  193","line":"        writer: anytype,"},
{"lineNum":"  194","line":"        indent: usize,"},
{"lineNum":"  195","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  196","line":"        try putInd(writer, indent, \"Ternary Expression\\n\", .{});"},
{"lineNum":"  197","line":"        try self.cond.dumpIndented(writer, indent + 2);"},
{"lineNum":"  198","line":"        try self.ifTrue.dumpIndented(writer, indent + 2);"},
{"lineNum":"  199","line":"        try self.ifFalse.dumpIndented(writer, indent + 2);"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":"};"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"pub const Alias = struct {"},
{"lineNum":"  204","line":"    name: []const u8,"},
{"lineNum":"  205","line":"    value: Node,"},
{"lineNum":"  206","line":"};"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"pub const Function = struct {"},
{"lineNum":"  209","line":"    pub const Arg = struct {"},
{"lineNum":"  210","line":"        csr: Cursor,"},
{"lineNum":"  211","line":"        name: []const u8,"},
{"lineNum":"  212","line":"        ty: ?Node,"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        pub fn eql(a: Arg, b: Arg) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"            return genericEql.eql(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"        }"},
{"lineNum":"  217","line":"    };"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    pub const ArgList = std.ArrayListUnmanaged(Arg);"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    isArrow: bool,"},
{"lineNum":"  222","line":"    name: ?[]const u8,"},
{"lineNum":"  223","line":"    retTy: ?Node,"},
{"lineNum":"  224","line":"    args: ArgList,"},
{"lineNum":"  225","line":"    body: Node,"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    pub fn dump("},
{"lineNum":"  228","line":"        self: Function,"},
{"lineNum":"  229","line":"        writer: anytype,"},
{"lineNum":"  230","line":"        indent: usize,"},
{"lineNum":"  231","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  232","line":"        const arrow = if (self.isArrow) \"Arrow \" else \"\";"},
{"lineNum":"  233","line":"        const name = if (self.name) |name| name else \"<anonymous>\";"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        try putInd(writer, indent, \"{s}Function: {s}\\n\", .{ arrow, name });"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        if (self.retTy) |retTy|"},
{"lineNum":"  238","line":"            try retTy.dumpIndented(writer, indent + 2);"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        try putInd(writer, indent, \"Arguments:\\n\", .{});"},
{"lineNum":"  241","line":"        for (self.args.items) |arg| {"},
{"lineNum":"  242","line":"            try putInd(writer, indent + 2, \"\'{s}\'\\n\", .{arg.name});"},
{"lineNum":"  243","line":"            if (arg.ty) |ty|"},
{"lineNum":"  244","line":"                try ty.dumpIndented(writer, indent + 4);"},
{"lineNum":"  245","line":"        }"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"        try putInd(writer, indent, \"Body:\\n\", .{});"},
{"lineNum":"  248","line":"        try self.body.dumpIndented(writer, indent + 2);"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"};"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"pub const If = struct {"},
{"lineNum":"  253","line":"    pub const Branch = struct {"},
{"lineNum":"  254","line":"        cond: Node,"},
{"lineNum":"  255","line":"        ifTrue: Node,"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        pub fn eql(a: Branch, b: Branch) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"            return genericEql.eql(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":"    };"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    pub const BranchList = std.ArrayListUnmanaged(Branch);"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    branches: BranchList,"},
{"lineNum":"  265","line":"    elseBranch: ?Node,"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    pub fn dump("},
{"lineNum":"  268","line":"        self: If,"},
{"lineNum":"  269","line":"        writer: anytype,"},
{"lineNum":"  270","line":"        indent: usize,"},
{"lineNum":"  271","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  272","line":"        try putInd(writer, indent, \"If:\\n\", .{});"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        for (self.branches.items) |item| {"},
{"lineNum":"  275","line":"            try putInd(writer, indent + 2, \"Cond:\\n\", .{});"},
{"lineNum":"  276","line":"            try item.cond.dumpIndented(writer, indent + 4);"},
{"lineNum":"  277","line":"            try putInd(writer, indent + 2, \"Branch:\\n\", .{});"},
{"lineNum":"  278","line":"            try item.ifTrue.dumpIndented(writer, indent + 4);"},
{"lineNum":"  279","line":"        }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"        if (self.elseBranch) |branch| {"},
{"lineNum":"  282","line":"            try putInd(writer, indent + 2, \"Else:\\n\", .{});"},
{"lineNum":"  283","line":"            try branch.dumpIndented(writer, indent + 4);"},
{"lineNum":"  284","line":"        }"},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":"};"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"pub const For = struct {"},
{"lineNum":"  289","line":"    pub const Clause = union(Clause.Type) {"},
{"lineNum":"  290","line":"        pub const Type = enum {"},
{"lineNum":"  291","line":"            CStyle,"},
{"lineNum":"  292","line":"            Each,"},
{"lineNum":"  293","line":"        };"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        pub const CStyleClause = struct {"},
{"lineNum":"  296","line":"            pre: Node,"},
{"lineNum":"  297","line":"            cond: Node,"},
{"lineNum":"  298","line":"            post: Node,"},
{"lineNum":"  299","line":"        };"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"        pub const EachClause = struct {"},
{"lineNum":"  302","line":"            pub const Variant = enum {"},
{"lineNum":"  303","line":"                Of,"},
{"lineNum":"  304","line":"                In,"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"                pub fn toString(self: Variant) []const u8 {","class":"lineCov","hits":"1","order":"4012","possible_hits":"1",},
{"lineNum":"  307","line":"                    return switch (self) {","class":"linePartCov","hits":"2","order":"4013","possible_hits":"3",},
{"lineNum":"  308","line":"                        .Of => \"of\",","class":"lineCov","hits":"1","order":"4014","possible_hits":"1",},
{"lineNum":"  309","line":"                        .In => \"in\",","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"                    };"},
{"lineNum":"  311","line":"                }"},
{"lineNum":"  312","line":"            };"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"            scoping: Decl.Scoping,"},
{"lineNum":"  315","line":"            variant: Variant,"},
{"lineNum":"  316","line":"            name: []const u8,"},
{"lineNum":"  317","line":"            expr: Node,"},
{"lineNum":"  318","line":"        };"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"        CStyle: CStyleClause,"},
{"lineNum":"  321","line":"        Each: EachClause,"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"        pub fn getType(self: Clause) Clause.Type {","class":"lineCov","hits":"1","order":"2800","possible_hits":"1",},
{"lineNum":"  324","line":"            return @as(Clause.Type, self);","class":"lineCov","hits":"1","order":"2801","possible_hits":"1",},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        pub fn dump("},
{"lineNum":"  328","line":"            self: While,"},
{"lineNum":"  329","line":"            writer: anytype,"},
{"lineNum":"  330","line":"            indent: usize,"},
{"lineNum":"  331","line":"        ) std.os.WriteError!void {"},
{"lineNum":"  332","line":"            try putInd(writer, indent, \"{s}:\\n\", .{@tagName(self)});"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"            switch (self) {"},
{"lineNum":"  335","line":"                .CStyle => |cs| {"},
{"lineNum":"  336","line":"                    try cs.pre.dumpIndented(writer, indent + 2);"},
{"lineNum":"  337","line":"                    try cs.cond.dumpIndented(writer, indent + 2);"},
{"lineNum":"  338","line":"                    try cs.post.dumpIndented(writer, indent + 2);"},
{"lineNum":"  339","line":"                },"},
{"lineNum":"  340","line":"                .Each => |each| {"},
{"lineNum":"  341","line":"                    try putInd(writer, indent + 2, \"{s}\\n\", .{"},
{"lineNum":"  342","line":"                        @tagName(each.scoping),"},
{"lineNum":"  343","line":"                    });"},
{"lineNum":"  344","line":"                    try putInd(writer, indent + 2, \"{s}\\n\", .{each.name});"},
{"lineNum":"  345","line":"                    try putInd(writer, indent + 2, \"{s}\\n\", .{"},
{"lineNum":"  346","line":"                        @tagName(each.variant),"},
{"lineNum":"  347","line":"                    });"},
{"lineNum":"  348","line":"                    try each.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  349","line":"                },"},
{"lineNum":"  350","line":"            }"},
{"lineNum":"  351","line":"        }"},
{"lineNum":"  352","line":"    };"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    clause: Clause,"},
{"lineNum":"  355","line":"    body: Node,"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    pub fn getType(self: For) Clause.Type {","class":"lineCov","hits":"1","order":"2798","possible_hits":"1",},
{"lineNum":"  358","line":"        return self.clause.getType();","class":"lineCov","hits":"1","order":"2799","possible_hits":"1",},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    pub fn dump("},
{"lineNum":"  362","line":"        self: While,"},
{"lineNum":"  363","line":"        writer: anytype,"},
{"lineNum":"  364","line":"        indent: usize,"},
{"lineNum":"  365","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  366","line":"        try putInd(writer, indent, \"For:\\n\", .{});"},
{"lineNum":"  367","line":"        try self.clause.dump(writer, indent + 2);"},
{"lineNum":"  368","line":"        try putInd(writer, indent + 2, \"Body:\\n\", .{});"},
{"lineNum":"  369","line":"        for (self.body) |stmt|"},
{"lineNum":"  370","line":"            try stmt.dumpIndented(writer, indent + 4);"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":"};"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"pub const While = struct {"},
{"lineNum":"  375","line":"    cond: Node,"},
{"lineNum":"  376","line":"    body: Node,"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"    pub fn dump("},
{"lineNum":"  379","line":"        self: While,"},
{"lineNum":"  380","line":"        writer: anytype,"},
{"lineNum":"  381","line":"        indent: usize,"},
{"lineNum":"  382","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  383","line":"        try putInd(writer, indent, \"While:\\n\", .{});"},
{"lineNum":"  384","line":"        try self.cond.dumpIndented(writer, indent + 2);"},
{"lineNum":"  385","line":"        try self.body.dumpIndented(writer, indent + 2);"},
{"lineNum":"  386","line":"    }"},
{"lineNum":"  387","line":"};"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"pub const Do = struct {"},
{"lineNum":"  390","line":"    body: Node,"},
{"lineNum":"  391","line":"    cond: Node,"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    pub fn dump("},
{"lineNum":"  394","line":"        self: Do,"},
{"lineNum":"  395","line":"        writer: anytype,"},
{"lineNum":"  396","line":"        indent: usize,"},
{"lineNum":"  397","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  398","line":"        try putInd(writer, indent, \"Do:\\n\", .{});"},
{"lineNum":"  399","line":"        try self.body.dumpIndented(writer, indent + 2);"},
{"lineNum":"  400","line":"        try self.cond.dumpIndented(writer, indent + 2);"},
{"lineNum":"  401","line":"    }"},
{"lineNum":"  402","line":"};"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"pub const Labelled = struct {"},
{"lineNum":"  405","line":"    label: []const u8,"},
{"lineNum":"  406","line":"    stmt: Node,"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    pub fn dump("},
{"lineNum":"  409","line":"        self: Labelled,"},
{"lineNum":"  410","line":"        writer: anytype,"},
{"lineNum":"  411","line":"        indent: usize,"},
{"lineNum":"  412","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  413","line":"        try putInd(writer, indent, \"Labelled \\\"{s}\\\":\\n\", .{self.label});"},
{"lineNum":"  414","line":"        try self.stmt.dumpIndented(writer, indent + 2);"},
{"lineNum":"  415","line":"    }"},
{"lineNum":"  416","line":"};"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"pub const Try = struct {"},
{"lineNum":"  419","line":"    pub const Catch = struct {"},
{"lineNum":"  420","line":"        name: []const u8,"},
{"lineNum":"  421","line":"        block: Node,"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"        pub fn eql(a: Catch, b: Catch) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":"            return genericEql.eql(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"        }"},
{"lineNum":"  426","line":"    };"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    pub const CatchList = std.ArrayListUnmanaged(Catch);"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    tryBlock: Node,"},
{"lineNum":"  431","line":"    catchBlocks: CatchList,"},
{"lineNum":"  432","line":"    finallyBlock: ?Node,"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"    pub fn dump("},
{"lineNum":"  435","line":"        self: Try,"},
{"lineNum":"  436","line":"        writer: anytype,"},
{"lineNum":"  437","line":"        indent: usize,"},
{"lineNum":"  438","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  439","line":"        try putInd(writer, indent, \"Try:\\n\", .{});"},
{"lineNum":"  440","line":"        try self.tryBlock.dumpIndented(writer, indent + 2);"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"        for (self.catchBlocks.items) |item| {"},
{"lineNum":"  443","line":"            try putInd(writer, indent, \"Catch \\\"{s}\\\":\\n\", .{item.name});"},
{"lineNum":"  444","line":"            try item.block.dumpIndented(writer, indent + 2);"},
{"lineNum":"  445","line":"        }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        if (self.finallyBlock) |finally| {"},
{"lineNum":"  448","line":"            try putInd(writer, indent, \"Finally:\\n\", .{});"},
{"lineNum":"  449","line":"            try finally.dumpIndented(writer, indent + 2);"},
{"lineNum":"  450","line":"        }"},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":"};"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"pub const Switch = struct {"},
{"lineNum":"  455","line":"    pub const Case = struct {"},
{"lineNum":"  456","line":"        value: Node,"},
{"lineNum":"  457","line":"        stmts: NodeList,"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"        pub fn eql(a: Case, b: Case) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"            return genericEql.eql(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"        }"},
{"lineNum":"  462","line":"    };"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    pub const CaseList = std.ArrayListUnmanaged(Case);"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    expr: Node,"},
{"lineNum":"  467","line":"    cases: CaseList,"},
{"lineNum":"  468","line":"    default: ?NodeList,"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    pub fn dump("},
{"lineNum":"  471","line":"        self: Try,"},
{"lineNum":"  472","line":"        writer: anytype,"},
{"lineNum":"  473","line":"        indent: usize,"},
{"lineNum":"  474","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  475","line":"        try putInd(writer, indent, \"Switch:\\n\", .{});"},
{"lineNum":"  476","line":"        try self.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"        for (self.cases.items) |item| {"},
{"lineNum":"  479","line":"            try putInd(writer, indent + 2, \"Case:\\n\", .{});"},
{"lineNum":"  480","line":"            try item.value.dumpIndented(writer, indent + 4);"},
{"lineNum":"  481","line":"            for (item.stmts) |stmt|"},
{"lineNum":"  482","line":"                try stmt.dumpIndented(writer, indent + 4);"},
{"lineNum":"  483","line":"        }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        if (self.default) |default| {"},
{"lineNum":"  486","line":"            try putInd(writer, indent + 2, \"Default:\\n\", .{});"},
{"lineNum":"  487","line":"            for (default.items) |stmt|"},
{"lineNum":"  488","line":"                try stmt.dumpIndented(writer, indent + 4);"},
{"lineNum":"  489","line":"        }"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":"};"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"pub const Dot = struct {"},
{"lineNum":"  494","line":"    expr: Node,"},
{"lineNum":"  495","line":"    ident: []const u8,"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    pub fn dump("},
{"lineNum":"  498","line":"        self: Dot,"},
{"lineNum":"  499","line":"        writer: anytype,"},
{"lineNum":"  500","line":"        indent: usize,"},
{"lineNum":"  501","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  502","line":"        try putInd(writer, indent, \"Dot \\\"{s}\\\":\\n\", .{self.ident});"},
{"lineNum":"  503","line":"        try self.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  504","line":"    }"},
{"lineNum":"  505","line":"};"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"pub const ArrayAccess = struct {"},
{"lineNum":"  508","line":"    expr: Node,"},
{"lineNum":"  509","line":"    index: Node,"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"    pub fn dump("},
{"lineNum":"  512","line":"        self: ArrayAccess,"},
{"lineNum":"  513","line":"        writer: anytype,"},
{"lineNum":"  514","line":"        indent: usize,"},
{"lineNum":"  515","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  516","line":"        try putInd(writer, indent, \"Array Access:\\n\", .{});"},
{"lineNum":"  517","line":"        try self.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  518","line":"        try self.index.dumpIndented(writer, indent + 2);"},
{"lineNum":"  519","line":"    }"},
{"lineNum":"  520","line":"};"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"pub const Call = struct {"},
{"lineNum":"  523","line":"    expr: Node,"},
{"lineNum":"  524","line":"    args: NodeList,"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"    pub fn dump("},
{"lineNum":"  527","line":"        self: Call,"},
{"lineNum":"  528","line":"        writer: anytype,"},
{"lineNum":"  529","line":"        indent: usize,"},
{"lineNum":"  530","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  531","line":"        try putInd(writer, indent, \"Call:\\n\", .{});"},
{"lineNum":"  532","line":"        try self.expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"        try putInd(writer, indent, \"Args:\\n\", .{});"},
{"lineNum":"  535","line":"        for (self.args.items) |arg|"},
{"lineNum":"  536","line":"            try arg.dumpIndented(writer, indent + 4);"},
{"lineNum":"  537","line":"    }"},
{"lineNum":"  538","line":"};"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"pub const NodeType = enum {"},
{"lineNum":"  541","line":"    EOF,"},
{"lineNum":"  542","line":"    Program,"},
{"lineNum":"  543","line":"    Decl,"},
{"lineNum":"  544","line":"    Int,"},
{"lineNum":"  545","line":"    Ident,"},
{"lineNum":"  546","line":"    String,"},
{"lineNum":"  547","line":"    Template,"},
{"lineNum":"  548","line":"    Comma,"},
{"lineNum":"  549","line":"    Array,"},
{"lineNum":"  550","line":"    Object,"},
{"lineNum":"  551","line":"    True,"},
{"lineNum":"  552","line":"    False,"},
{"lineNum":"  553","line":"    Null,"},
{"lineNum":"  554","line":"    Undefined,"},
{"lineNum":"  555","line":"    This,"},
{"lineNum":"  556","line":"    PostfixOp,"},
{"lineNum":"  557","line":"    PrefixOp,"},
{"lineNum":"  558","line":"    BinaryOp,"},
{"lineNum":"  559","line":"    Ternary,"},
{"lineNum":"  560","line":"    TypeName,"},
{"lineNum":"  561","line":"    UnionType,"},
{"lineNum":"  562","line":"    ArrayType,"},
{"lineNum":"  563","line":"    Alias,"},
{"lineNum":"  564","line":"    Function,"},
{"lineNum":"  565","line":"    Block,"},
{"lineNum":"  566","line":"    If,"},
{"lineNum":"  567","line":"    Switch,"},
{"lineNum":"  568","line":"    For,"},
{"lineNum":"  569","line":"    While,"},
{"lineNum":"  570","line":"    Do,"},
{"lineNum":"  571","line":"    Return,"},
{"lineNum":"  572","line":"    Break,"},
{"lineNum":"  573","line":"    Continue,"},
{"lineNum":"  574","line":"    Throw,"},
{"lineNum":"  575","line":"    Labelled,"},
{"lineNum":"  576","line":"    Try,"},
{"lineNum":"  577","line":"    Dot,"},
{"lineNum":"  578","line":"    ArrayAccess,"},
{"lineNum":"  579","line":"    Call,"},
{"lineNum":"  580","line":"};"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"pub const NodeData = union(NodeType) {"},
{"lineNum":"  583","line":"    EOF: void,"},
{"lineNum":"  584","line":"    Program: NodeList,"},
{"lineNum":"  585","line":"    Decl: Decl,"},
{"lineNum":"  586","line":"    Int: []const u8,"},
{"lineNum":"  587","line":"    Ident: []const u8,"},
{"lineNum":"  588","line":"    String: []const u8,"},
{"lineNum":"  589","line":"    Template: []const u8,"},
{"lineNum":"  590","line":"    Comma: NodeList,"},
{"lineNum":"  591","line":"    Array: NodeList,"},
{"lineNum":"  592","line":"    Object: Object,"},
{"lineNum":"  593","line":"    True: void,"},
{"lineNum":"  594","line":"    False: void,"},
{"lineNum":"  595","line":"    Null: void,"},
{"lineNum":"  596","line":"    Undefined: void,"},
{"lineNum":"  597","line":"    This: void,"},
{"lineNum":"  598","line":"    PostfixOp: UnaryOp,"},
{"lineNum":"  599","line":"    PrefixOp: UnaryOp,"},
{"lineNum":"  600","line":"    BinaryOp: BinaryOp,"},
{"lineNum":"  601","line":"    Ternary: Ternary,"},
{"lineNum":"  602","line":"    TypeName: []const u8,"},
{"lineNum":"  603","line":"    UnionType: NodeList,"},
{"lineNum":"  604","line":"    ArrayType: Node,"},
{"lineNum":"  605","line":"    Alias: Alias,"},
{"lineNum":"  606","line":"    Function: Function,"},
{"lineNum":"  607","line":"    Block: NodeList,"},
{"lineNum":"  608","line":"    If: If,"},
{"lineNum":"  609","line":"    Switch: Switch,"},
{"lineNum":"  610","line":"    For: For,"},
{"lineNum":"  611","line":"    While: While,"},
{"lineNum":"  612","line":"    Do: Do,"},
{"lineNum":"  613","line":"    Return: ?Node,"},
{"lineNum":"  614","line":"    Break: ?[]const u8,"},
{"lineNum":"  615","line":"    Continue: ?[]const u8,"},
{"lineNum":"  616","line":"    Throw: Node,"},
{"lineNum":"  617","line":"    Labelled: Labelled,"},
{"lineNum":"  618","line":"    Try: Try,"},
{"lineNum":"  619","line":"    Dot: Dot,"},
{"lineNum":"  620","line":"    ArrayAccess: ArrayAccess,"},
{"lineNum":"  621","line":"    Call: Call,"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    pub fn dump("},
{"lineNum":"  624","line":"        self: NodeData,"},
{"lineNum":"  625","line":"        writer: anytype,"},
{"lineNum":"  626","line":"        indent: usize,"},
{"lineNum":"  627","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  628","line":"        switch (self) {"},
{"lineNum":"  629","line":"            .Decl => |decl| try decl.dump(writer, indent),"},
{"lineNum":"  630","line":"            .Int, .TypeName, .Ident, .String, .Template => |s| try putInd("},
{"lineNum":"  631","line":"                writer,"},
{"lineNum":"  632","line":"                indent,"},
{"lineNum":"  633","line":"                \"{s}: \\\"{s}\\\"\\n\","},
{"lineNum":"  634","line":"                .{ @tagName(self), s },"},
{"lineNum":"  635","line":"            ),"},
{"lineNum":"  636","line":"            .Program, .Comma, .UnionType, .Array, .Block => |list| {"},
{"lineNum":"  637","line":"                try putInd(writer, indent, \"{s}\\n\", .{@tagName(self)});"},
{"lineNum":"  638","line":"                for (list.items) |item|"},
{"lineNum":"  639","line":"                    try item.dumpIndented(writer, indent + 2);"},
{"lineNum":"  640","line":"            },"},
{"lineNum":"  641","line":"            .Object => |object| {"},
{"lineNum":"  642","line":"                try putInd(writer, indent, \"Object\\n\", .{});"},
{"lineNum":"  643","line":"                for (object.items) |item|"},
{"lineNum":"  644","line":"                    try item.dump(writer, indent + 2);"},
{"lineNum":"  645","line":"            },"},
{"lineNum":"  646","line":"            .EOF, .True, .False, .Null, .Undefined, .This => try putInd("},
{"lineNum":"  647","line":"                writer,"},
{"lineNum":"  648","line":"                indent,"},
{"lineNum":"  649","line":"                \"{s}\\n\","},
{"lineNum":"  650","line":"                .{@tagName(self)},"},
{"lineNum":"  651","line":"            ),"},
{"lineNum":"  652","line":"            .PostfixOp, .PrefixOp => |unaryOp| {"},
{"lineNum":"  653","line":"                try putInd(writer, indent, \"{s}\\n\", .{@tagName(self)});"},
{"lineNum":"  654","line":"                try unaryOp.dump(writer, indent);"},
{"lineNum":"  655","line":"            },"},
{"lineNum":"  656","line":"            .Return => |ret| {"},
{"lineNum":"  657","line":"                try putInd(writer, indent, \"Return\\n\", .{});"},
{"lineNum":"  658","line":"                if (ret) |expr|"},
{"lineNum":"  659","line":"                    try expr.dumpIndented(writer, indent + 2);"},
{"lineNum":"  660","line":"            },"},
{"lineNum":"  661","line":"            .Break, .Continue => |label| try putInd("},
{"lineNum":"  662","line":"                writer,"},
{"lineNum":"  663","line":"                indent,"},
{"lineNum":"  664","line":"                \"{s} {s}\\n\","},
{"lineNum":"  665","line":"                .{ @tagName(self), if (label) |l| l else \"\" },"},
{"lineNum":"  666","line":"            ),"},
{"lineNum":"  667","line":"            .ArrayType => |nd| {"},
{"lineNum":"  668","line":"                try putInd(writer, indent, \"ArrayType\\n\", .{});"},
{"lineNum":"  669","line":"                try nd.dumpIndented(writer, indent + 2);"},
{"lineNum":"  670","line":"            },"},
{"lineNum":"  671","line":"            .Throw => |nd| try putInd("},
{"lineNum":"  672","line":"                writer,"},
{"lineNum":"  673","line":"                indent,"},
{"lineNum":"  674","line":"                \"{s} {s}\\n\","},
{"lineNum":"  675","line":"                .{ @tagName(self), nd },"},
{"lineNum":"  676","line":"            ),"},
{"lineNum":"  677","line":"            .BinaryOp => |binaryOp| try binaryOp.dump(writer, indent),"},
{"lineNum":"  678","line":"            .Ternary => |ternary| try ternary.dump(writer, indent),"},
{"lineNum":"  679","line":"            .Function => |func| try func.dump(writer, indent),"},
{"lineNum":"  680","line":"            .If => |stmt| try stmt.dump(writer, indent),"},
{"lineNum":"  681","line":"            .Switch => |stmt| try stmt.dump(writer, indent),"},
{"lineNum":"  682","line":"            .For => |loop| try loop.dump(writer, indent),"},
{"lineNum":"  683","line":"            .While => |loop| try loop.dump(writer, indent),"},
{"lineNum":"  684","line":"            .Do => |loop| try loop.dump(writer, indent),"},
{"lineNum":"  685","line":"            .Try => |t| try t.dump(writer, indent),"},
{"lineNum":"  686","line":"            .ArrayAccess => |aa| try aa.dump(writer, indent),"},
{"lineNum":"  687","line":"            .Dot => |dot| try dot.dump(writer, indent),"},
{"lineNum":"  688","line":"            .Call => |call| try call.dump(writer, indent),"},
{"lineNum":"  689","line":"            .Labelled => |labelled| try labelled.dump(writer, indent),"},
{"lineNum":"  690","line":"        }"},
{"lineNum":"  691","line":"    }"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    pub fn getType(self: NodeData) NodeType {","class":"lineCov","hits":"1","order":"2367","possible_hits":"1",},
{"lineNum":"  694","line":"        return @as(NodeType, self);","class":"lineCov","hits":"1","order":"2368","possible_hits":"1",},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":"};"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"pub const NodeImpl = struct {"},
{"lineNum":"  699","line":"    csr: Cursor,"},
{"lineNum":"  700","line":"    data: NodeData,"},
{"lineNum":"  701","line":"    ty: ?Type.Ptr = null,"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"    pub fn getType(self: Node) NodeType {","class":"lineCov","hits":"1","order":"727","possible_hits":"1",},
{"lineNum":"  704","line":"        return @as(NodeType, self.data);","class":"lineCov","hits":"1","order":"728","possible_hits":"1",},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    pub fn eql(self: Node, other: ?Node) bool {","class":"lineCov","hits":"1","order":"743","possible_hits":"1",},
{"lineNum":"  708","line":"        if (other) |n|","class":"lineCov","hits":"2","order":"744","possible_hits":"2",},
{"lineNum":"  709","line":"            return genericEql.eql(self.*, n.*);","class":"lineCov","hits":"1","order":"745","possible_hits":"1",},
{"lineNum":"  710","line":"        return false;","class":"lineCov","hits":"1","order":"769","possible_hits":"1",},
{"lineNum":"  711","line":"    }"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"    pub fn dump(self: Node) void {"},
{"lineNum":"  714","line":"        const writer = std.io.getStdOut().writer();"},
{"lineNum":"  715","line":"        self.dumpIndented(writer, 0) catch unreachable;"},
{"lineNum":"  716","line":"    }"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"    pub fn dumpIndented("},
{"lineNum":"  719","line":"        self: Node,"},
{"lineNum":"  720","line":"        writer: anytype,"},
{"lineNum":"  721","line":"        indent: usize,"},
{"lineNum":"  722","line":"    ) std.os.WriteError!void {"},
{"lineNum":"  723","line":"        try putInd(writer, indent, \"{s} Node ({d}:{d})\\n\", .{"},
{"lineNum":"  724","line":"            @tagName(self.data),"},
{"lineNum":"  725","line":"            self.csr.ln,"},
{"lineNum":"  726","line":"            self.csr.ch,"},
{"lineNum":"  727","line":"        });"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"        try self.data.dump(writer, indent + 2);"},
{"lineNum":"  730","line":"    }"},
{"lineNum":"  731","line":"};"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"pub const Node = *NodeImpl;"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"pub fn makeNode(","class":"lineCov","hits":"65","order":"639","possible_hits":"65",},
{"lineNum":"  736","line":"    alloc: Allocator,"},
{"lineNum":"  737","line":"    csr: Cursor,"},
{"lineNum":"  738","line":"    comptime ty: NodeType,"},
{"lineNum":"  739","line":"    data: anytype,"},
{"lineNum":"  740","line":") Node {"},
{"lineNum":"  741","line":"    var n = allocate.create(alloc, NodeImpl);","class":"lineCov","hits":"65","order":"640","possible_hits":"65",},
{"lineNum":"  742","line":"    n.csr = csr;","class":"lineCov","hits":"65","order":"641","possible_hits":"65",},
{"lineNum":"  743","line":"    n.data = @unionInit(NodeData, @tagName(ty), data);","class":"lineCov","hits":"65","order":"642","possible_hits":"65",},
{"lineNum":"  744","line":"    return n;","class":"lineCov","hits":"65","order":"643","possible_hits":"65",},
{"lineNum":"  745","line":"}"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"test \"can initialize a var node\" {","class":"lineCov","hits":"3","order":"722","possible_hits":"3",},
{"lineNum":"  748","line":"    const name = \"aVariableName\";"},
{"lineNum":"  749","line":"    const node = makeNode(","class":"lineCov","hits":"1","order":"725","possible_hits":"1",},
{"lineNum":"  750","line":"        std.testing.allocator,"},
{"lineNum":"  751","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"723","possible_hits":"1",},
{"lineNum":"  752","line":"        NodeType.Decl,"},
{"lineNum":"  753","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"724","possible_hits":"1",},
{"lineNum":"  754","line":"    );"},
{"lineNum":"  755","line":"    defer std.testing.allocator.destroy(node);","class":"linePartCov","hits":"1","order":"731","possible_hits":"4",},
{"lineNum":"  756","line":"    try expectEqual(node.getType(), NodeType.Decl);","class":"linePartCov","hits":"1","order":"726","possible_hits":"2",},
{"lineNum":"  757","line":"    try expectEqual(node.data.Decl.scoping, .Var);","class":"linePartCov","hits":"2","order":"729","possible_hits":"3",},
{"lineNum":"  758","line":"    try expectEqualStrings(name, node.data.Decl.name);","class":"linePartCov","hits":"2","order":"730","possible_hits":"3",},
{"lineNum":"  759","line":"}"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"test \"can compare Nodes for equality\" {","class":"lineCov","hits":"3","order":"732","possible_hits":"3",},
{"lineNum":"  762","line":"    const name = \"aVarName\";"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    const a = makeNode(","class":"lineCov","hits":"1","order":"735","possible_hits":"1",},
{"lineNum":"  765","line":"        std.testing.allocator,"},
{"lineNum":"  766","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"733","possible_hits":"1",},
{"lineNum":"  767","line":"        NodeType.Decl,"},
{"lineNum":"  768","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"734","possible_hits":"1",},
{"lineNum":"  769","line":"    );"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"    const b = makeNode(","class":"lineCov","hits":"1","order":"738","possible_hits":"1",},
{"lineNum":"  772","line":"        std.testing.allocator,"},
{"lineNum":"  773","line":"        Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"736","possible_hits":"1",},
{"lineNum":"  774","line":"        NodeType.Decl,"},
{"lineNum":"  775","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"737","possible_hits":"1",},
{"lineNum":"  776","line":"    );"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"    const c = makeNode(","class":"lineCov","hits":"1","order":"741","possible_hits":"1",},
{"lineNum":"  779","line":"        std.testing.allocator,"},
{"lineNum":"  780","line":"        Cursor.new(1, 1),","class":"lineCov","hits":"1","order":"739","possible_hits":"1",},
{"lineNum":"  781","line":"        NodeType.Decl,"},
{"lineNum":"  782","line":"        Decl.new(.Var, name, null, null),","class":"lineCov","hits":"1","order":"740","possible_hits":"1",},
{"lineNum":"  783","line":"    );"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"    defer std.testing.allocator.destroy(a);","class":"linePartCov","hits":"1","order":"772","possible_hits":"6",},
{"lineNum":"  786","line":"    defer std.testing.allocator.destroy(b);","class":"linePartCov","hits":"1","order":"771","possible_hits":"6",},
{"lineNum":"  787","line":"    defer std.testing.allocator.destroy(c);","class":"linePartCov","hits":"1","order":"770","possible_hits":"6",},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    try expect(a.eql(b));","class":"linePartCov","hits":"1","order":"742","possible_hits":"2",},
{"lineNum":"  790","line":"    try expect(b.eql(a));","class":"linePartCov","hits":"1","order":"765","possible_hits":"2",},
{"lineNum":"  791","line":"    try expect(!a.eql(c));","class":"linePartCov","hits":"1","order":"766","possible_hits":"2",},
{"lineNum":"  792","line":"    try expect(!b.eql(c));","class":"linePartCov","hits":"1","order":"767","possible_hits":"2",},
{"lineNum":"  793","line":"    try expect(!a.eql(null));","class":"linePartCov","hits":"1","order":"768","possible_hits":"2",},
{"lineNum":"  794","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 12:37:28", "instrumented" : 86, "covered" : 75,};
var merged_data = [];
