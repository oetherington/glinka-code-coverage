var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const Compiler = @import(\"compiler.zig\").Compiler;"},
{"lineNum":"   20","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   21","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   22","line":"const Node = node.Node;"},
{"lineNum":"   23","line":"const NodeType = node.NodeType;"},
{"lineNum":"   24","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   25","line":"const TypeError = @import(\"errors/type_error.zig\").TypeError;"},
{"lineNum":"   26","line":"const RedefinitionError = @import(\"errors/redefinition_error.zig\").RedefinitionError;"},
{"lineNum":"   27","line":"const GenericError = @import(\"errors/generic_error.zig\").GenericError;"},
{"lineNum":"   28","line":"const CompileError = @import(\"errors/compile_error.zig\").CompileError;"},
{"lineNum":"   29","line":"const CompilerTestCase = @import(\"compiler_test_case.zig\").CompilerTestCase;"},
{"lineNum":"   30","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"fn declWithAssign(cmp: *Compiler, csr: Cursor, decl: node.Decl) void {","class":"lineCov","hits":"2","order":"3284","possible_hits":"2",},
{"lineNum":"   33","line":"    std.debug.assert(decl.value != null);","class":"lineCov","hits":"1","order":"3285","possible_hits":"1",},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    if (cmp.inferExprType(decl.value.?)) |valueTy| {","class":"linePartCov","hits":"2","order":"3286","possible_hits":"3",},
{"lineNum":"   36","line":"        const isConst = decl.scoping == .Const;","class":"lineCov","hits":"1","order":"3306","possible_hits":"1",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        if (decl.ty) |annotationNode| {","class":"lineCov","hits":"2","order":"3307","possible_hits":"2",},
{"lineNum":"   39","line":"            if (cmp.findType(annotationNode)) |annotation| {","class":"lineCov","hits":"2","order":"5313","possible_hits":"2",},
{"lineNum":"   40","line":"                if (!valueTy.isAssignableTo(annotation)) {","class":"linePartCov","hits":"1","order":"5314","possible_hits":"2",},
{"lineNum":"   41","line":"                    cmp.errors.append(CompileError.typeError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   42","line":"                        TypeError.new(csr, valueTy, annotation),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"                    )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"                }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"                cmp.scope.put(decl.name, annotation, isConst, csr);","class":"lineCov","hits":"1","order":"5315","possible_hits":"1",},
{"lineNum":"   47","line":"            } else {"},
{"lineNum":"   48","line":"                cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"                    GenericError.new(csr, \"Invalid type annotation\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"                )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"                cmp.scope.put(decl.name, valueTy, isConst, csr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"            }"},
{"lineNum":"   53","line":"        } else {"},
{"lineNum":"   54","line":"            cmp.scope.put(decl.name, valueTy, isConst, csr);","class":"lineCov","hits":"1","order":"3308","possible_hits":"1",},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":"}"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"fn declWithoutAssign(cmp: *Compiler, csr: Cursor, decl: node.Decl) void {","class":"lineCov","hits":"2","order":"5269","possible_hits":"2",},
{"lineNum":"   60","line":"    std.debug.assert(decl.value == null);","class":"lineCov","hits":"1","order":"5270","possible_hits":"1",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    if (decl.scoping == .Const) {","class":"lineCov","hits":"2","order":"5271","possible_hits":"2",},
{"lineNum":"   63","line":"        cmp.errors.append(CompileError.genericError(","class":"lineCov","hits":"2","order":"5272","possible_hits":"2",},
{"lineNum":"   64","line":"            GenericError.new(csr, \"Constant value must be initialized\"),","class":"lineCov","hits":"1","order":"5273","possible_hits":"1",},
{"lineNum":"   65","line":"        )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"5274","possible_hits":"1",},
{"lineNum":"   66","line":"        return;","class":"lineCov","hits":"1","order":"5275","possible_hits":"1",},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    const annotation = if (decl.ty) |ty|","class":"lineCov","hits":"2","order":"5286","possible_hits":"2",},
{"lineNum":"   70","line":"        cmp.findType(ty)","class":"lineCov","hits":"1","order":"5306","possible_hits":"1",},
{"lineNum":"   71","line":"    else"},
{"lineNum":"   72","line":"        cmp.implicitAny(csr, decl.name);","class":"lineCov","hits":"1","order":"5287","possible_hits":"1",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    if (annotation) |ty| {","class":"lineCov","hits":"3","order":"5294","possible_hits":"3",},
{"lineNum":"   75","line":"        cmp.scope.put(decl.name, ty, false, csr);","class":"lineCov","hits":"1","order":"5295","possible_hits":"1",},
{"lineNum":"   76","line":"    } else {"},
{"lineNum":"   77","line":"        cmp.errors.append(CompileError.genericError(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"            GenericError.new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"                csr,"},
{"lineNum":"   80","line":"                cmp.fmt(\"Invalid type for variable \'{s}\'\", .{decl.name}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            ),"},
{"lineNum":"   82","line":"        )) catch allocate.reportAndExit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":"}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"pub fn processDecl(cmp: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3278","possible_hits":"2",},
{"lineNum":"   87","line":"    std.debug.assert(nd.getType() == NodeType.Decl);","class":"lineCov","hits":"1","order":"3279","possible_hits":"1",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    const decl = nd.data.Decl;","class":"linePartCov","hits":"2","order":"3280","possible_hits":"3",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    if (cmp.scope.getLocal(decl.name)) |previous| {","class":"lineCov","hits":"3","order":"3281","possible_hits":"3",},
{"lineNum":"   92","line":"        cmp.errors.append(CompileError.redefinitionError(","class":"lineCov","hits":"2","order":"3566","possible_hits":"2",},
{"lineNum":"   93","line":"            RedefinitionError.new(decl.name, previous.csr, nd.csr),","class":"lineCov","hits":"1","order":"3567","possible_hits":"1",},
{"lineNum":"   94","line":"        )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3568","possible_hits":"1",},
{"lineNum":"   95","line":"        return;","class":"lineCov","hits":"1","order":"3569","possible_hits":"1",},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    if (decl.value) |_|","class":"lineCov","hits":"2","order":"3282","possible_hits":"2",},
{"lineNum":"   99","line":"        declWithAssign(cmp, nd.csr, decl)","class":"lineCov","hits":"1","order":"3283","possible_hits":"1",},
{"lineNum":"  100","line":"    else"},
{"lineNum":"  101","line":"        declWithoutAssign(cmp, nd.csr, decl);","class":"lineCov","hits":"1","order":"5268","possible_hits":"1",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"test \"constants must be initialized\" {","class":"lineCov","hits":"2","order":"5266","possible_hits":"2",},
{"lineNum":"  105","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5283","possible_hits":"1",},
{"lineNum":"  106","line":"        .code = \"const aVariable;\","},
{"lineNum":"  107","line":"        .check = (struct {"},
{"lineNum":"  108","line":"            fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"5276","possible_hits":"2",},
{"lineNum":"  109","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"5277","possible_hits":"1",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"5278","possible_hits":"1",},
{"lineNum":"  112","line":"                try case.expectEqual(","class":"lineCov","hits":"1","order":"5280","possible_hits":"1",},
{"lineNum":"  113","line":"                    CompileError.Type.GenericError,"},
{"lineNum":"  114","line":"                    err.getType(),","class":"lineCov","hits":"1","order":"5279","possible_hits":"1",},
{"lineNum":"  115","line":"                );"},
{"lineNum":"  116","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"5282","possible_hits":"2",},
{"lineNum":"  117","line":"                    \"Constant value must be initialized\","},
{"lineNum":"  118","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"5281","possible_hits":"3",},
{"lineNum":"  119","line":"                );"},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":"        }).check,"},
{"lineNum":"  122","line":"    }).run();","class":"lineCov","hits":"1","order":"5267","possible_hits":"1",},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"test \"uninitialized and untyped variable has implicit any type\" {","class":"lineCov","hits":"2","order":"5284","possible_hits":"2",},
{"lineNum":"  126","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5303","possible_hits":"1",},
{"lineNum":"  127","line":"        .code = \"let aVariable;\","},
{"lineNum":"  128","line":"        .check = (struct {"},
{"lineNum":"  129","line":"            fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"5296","possible_hits":"2",},
{"lineNum":"  130","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"5297","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"5298","possible_hits":"1",},
{"lineNum":"  133","line":"                try case.expectEqual(","class":"lineCov","hits":"1","order":"5300","possible_hits":"1",},
{"lineNum":"  134","line":"                    CompileError.Type.ImplicitAnyError,"},
{"lineNum":"  135","line":"                    err.getType(),","class":"lineCov","hits":"1","order":"5299","possible_hits":"1",},
{"lineNum":"  136","line":"                );"},
{"lineNum":"  137","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"5302","possible_hits":"2",},
{"lineNum":"  138","line":"                    \"aVariable\","},
{"lineNum":"  139","line":"                    err.ImplicitAnyError.symbol,","class":"linePartCov","hits":"2","order":"5301","possible_hits":"3",},
{"lineNum":"  140","line":"                );"},
{"lineNum":"  141","line":"            }"},
{"lineNum":"  142","line":"        }).check,"},
{"lineNum":"  143","line":"    }).run();","class":"lineCov","hits":"1","order":"5285","possible_hits":"1",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"test \"can compile a \'let\' declaration without assigning a value\" {","class":"lineCov","hits":"2","order":"5304","possible_hits":"2",},
{"lineNum":"  147","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5307","possible_hits":"1",},
{"lineNum":"  148","line":"        .code = \"let aVariable: number;\","},
{"lineNum":"  149","line":"    }).run();","class":"lineCov","hits":"1","order":"5305","possible_hits":"1",},
{"lineNum":"  150","line":"}"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"test \"can compile a \'var\' declaration without assigning a value\" {","class":"lineCov","hits":"2","order":"5308","possible_hits":"2",},
{"lineNum":"  153","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5310","possible_hits":"1",},
{"lineNum":"  154","line":"        .code = \"var aVariable: string;\","},
{"lineNum":"  155","line":"    }).run();","class":"lineCov","hits":"1","order":"5309","possible_hits":"1",},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"test \"can compile a \'const\' declaration with an assigned value\" {","class":"lineCov","hits":"2","order":"5311","possible_hits":"2",},
{"lineNum":"  159","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5316","possible_hits":"1",},
{"lineNum":"  160","line":"        .code = \"const aVariable: string = \'hello world\';\","},
{"lineNum":"  161","line":"    }).run();","class":"lineCov","hits":"1","order":"5312","possible_hits":"1",},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"test \"can compile a \'let\' declaration with an assigned value\" {","class":"lineCov","hits":"2","order":"5317","possible_hits":"2",},
{"lineNum":"  165","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5319","possible_hits":"1",},
{"lineNum":"  166","line":"        .code = \"let aVariable: number = 3;\","},
{"lineNum":"  167","line":"    }).run();","class":"lineCov","hits":"1","order":"5318","possible_hits":"1",},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"test \"can compile a \'var\' declaration with an assigned value\" {","class":"lineCov","hits":"2","order":"5320","possible_hits":"2",},
{"lineNum":"  171","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5322","possible_hits":"1",},
{"lineNum":"  172","line":"        .code = \"var aVariable: boolean = true;\","},
{"lineNum":"  173","line":"    }).run();","class":"lineCov","hits":"1","order":"5321","possible_hits":"1",},
{"lineNum":"  174","line":"}"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"test \"can compile a \'const\' declaration with an inferred type\" {","class":"lineCov","hits":"2","order":"5323","possible_hits":"2",},
{"lineNum":"  177","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5325","possible_hits":"1",},
{"lineNum":"  178","line":"        .code = \"const aVariable = \'hello world\';\","},
{"lineNum":"  179","line":"    }).run();","class":"lineCov","hits":"1","order":"5324","possible_hits":"1",},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"test \"can compile a \'let\' declaration with an inferred type\" {","class":"lineCov","hits":"2","order":"5326","possible_hits":"2",},
{"lineNum":"  183","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5328","possible_hits":"1",},
{"lineNum":"  184","line":"        .code = \"let aVariable = 1234;\","},
{"lineNum":"  185","line":"    }).run();","class":"lineCov","hits":"1","order":"5327","possible_hits":"1",},
{"lineNum":"  186","line":"}"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"test \"can compile a \'var\' declaration with an inferred type\" {","class":"lineCov","hits":"2","order":"5329","possible_hits":"2",},
{"lineNum":"  189","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5331","possible_hits":"1",},
{"lineNum":"  190","line":"        .code = \"var aVariable = false;\","},
{"lineNum":"  191","line":"    }).run();","class":"lineCov","hits":"1","order":"5330","possible_hits":"1",},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"test \"declarations cannot be redefined in the same scope\" {","class":"lineCov","hits":"2","order":"5332","possible_hits":"2",},
{"lineNum":"  195","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5348","possible_hits":"1",},
{"lineNum":"  196","line":"        .code = \"let a = 3; let a = 4;\","},
{"lineNum":"  197","line":"        .check = (struct {"},
{"lineNum":"  198","line":"            fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"5334","possible_hits":"2",},
{"lineNum":"  199","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"5335","possible_hits":"1",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"5336","possible_hits":"1",},
{"lineNum":"  202","line":"                try case.expectEqual(","class":"lineCov","hits":"1","order":"5338","possible_hits":"1",},
{"lineNum":"  203","line":"                    CompileError.Type.RedefinitionError,"},
{"lineNum":"  204","line":"                    err.getType(),","class":"lineCov","hits":"1","order":"5337","possible_hits":"1",},
{"lineNum":"  205","line":"                );"},
{"lineNum":"  206","line":"                try case.expectEqualStrings(\"a\", err.RedefinitionError.name);","class":"lineCov","hits":"2","order":"5339","possible_hits":"2",},
{"lineNum":"  207","line":"                try case.expectEqual(","class":"linePartCov","hits":"1","order":"5341","possible_hits":"2",},
{"lineNum":"  208","line":"                    @intCast(u32, 1),"},
{"lineNum":"  209","line":"                    err.RedefinitionError.firstDefined.ln,","class":"linePartCov","hits":"2","order":"5340","possible_hits":"3",},
{"lineNum":"  210","line":"                );"},
{"lineNum":"  211","line":"                try case.expectEqual(","class":"linePartCov","hits":"1","order":"5343","possible_hits":"2",},
{"lineNum":"  212","line":"                    @intCast(u32, 1),"},
{"lineNum":"  213","line":"                    err.RedefinitionError.firstDefined.ch,","class":"linePartCov","hits":"2","order":"5342","possible_hits":"3",},
{"lineNum":"  214","line":"                );"},
{"lineNum":"  215","line":"                try case.expectEqual(","class":"linePartCov","hits":"1","order":"5345","possible_hits":"2",},
{"lineNum":"  216","line":"                    @intCast(u32, 1),"},
{"lineNum":"  217","line":"                    err.RedefinitionError.secondDefined.ln,","class":"linePartCov","hits":"2","order":"5344","possible_hits":"3",},
{"lineNum":"  218","line":"                );"},
{"lineNum":"  219","line":"                try case.expectEqual(","class":"linePartCov","hits":"1","order":"5347","possible_hits":"2",},
{"lineNum":"  220","line":"                    @intCast(u32, 12),"},
{"lineNum":"  221","line":"                    err.RedefinitionError.secondDefined.ch,","class":"linePartCov","hits":"2","order":"5346","possible_hits":"3",},
{"lineNum":"  222","line":"                );"},
{"lineNum":"  223","line":"            }"},
{"lineNum":"  224","line":"        }).check,"},
{"lineNum":"  225","line":"    }).run();","class":"lineCov","hits":"1","order":"5333","possible_hits":"1",},
{"lineNum":"  226","line":"}"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"test \"declarations can be redefined in different scopes\" {","class":"lineCov","hits":"2","order":"5349","possible_hits":"2",},
{"lineNum":"  229","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5351","possible_hits":"1",},
{"lineNum":"  230","line":"        .code = \"let a = 3; { let a = 4; }\","},
{"lineNum":"  231","line":"    }).run();","class":"lineCov","hits":"1","order":"5350","possible_hits":"1",},
{"lineNum":"  232","line":"}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"test \"\'var\' declarations can be assign to\" {","class":"lineCov","hits":"2","order":"5352","possible_hits":"2",},
{"lineNum":"  235","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5354","possible_hits":"1",},
{"lineNum":"  236","line":"        .code = \"var a = 0; a = 1;\","},
{"lineNum":"  237","line":"    }).run();","class":"lineCov","hits":"1","order":"5353","possible_hits":"1",},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"test \"\'let\' declarations can be assign to\" {","class":"lineCov","hits":"2","order":"5355","possible_hits":"2",},
{"lineNum":"  241","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5357","possible_hits":"1",},
{"lineNum":"  242","line":"        .code = \"let a = 0; a = 1;\","},
{"lineNum":"  243","line":"    }).run();","class":"lineCov","hits":"1","order":"5356","possible_hits":"1",},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"test \"\'const\' declarations cannot be assign to\" {","class":"lineCov","hits":"2","order":"5358","possible_hits":"2",},
{"lineNum":"  247","line":"    try (CompilerTestCase{","class":"lineCov","hits":"1","order":"5369","possible_hits":"1",},
{"lineNum":"  248","line":"        .code = \"const a = 0; a = 1\","},
{"lineNum":"  249","line":"        .check = (struct {"},
{"lineNum":"  250","line":"            fn check(case: CompilerTestCase, cmp: Compiler) anyerror!void {","class":"lineCov","hits":"2","order":"5362","possible_hits":"2",},
{"lineNum":"  251","line":"                try case.expectEqual(@intCast(usize, 1), cmp.errors.count());","class":"lineCov","hits":"1","order":"5363","possible_hits":"1",},
{"lineNum":"  252","line":"                const err = cmp.getError(0);","class":"lineCov","hits":"1","order":"5364","possible_hits":"1",},
{"lineNum":"  253","line":"                try case.expectEqual(","class":"lineCov","hits":"1","order":"5366","possible_hits":"1",},
{"lineNum":"  254","line":"                    CompileError.Type.GenericError,"},
{"lineNum":"  255","line":"                    err.getType(),","class":"lineCov","hits":"1","order":"5365","possible_hits":"1",},
{"lineNum":"  256","line":"                );"},
{"lineNum":"  257","line":"                try case.expectEqualStrings(","class":"linePartCov","hits":"1","order":"5368","possible_hits":"2",},
{"lineNum":"  258","line":"                    \"Invalid assignment - \'a\' is const\","},
{"lineNum":"  259","line":"                    err.GenericError.msg,","class":"linePartCov","hits":"2","order":"5367","possible_hits":"3",},
{"lineNum":"  260","line":"                );"},
{"lineNum":"  261","line":"            }"},
{"lineNum":"  262","line":"        }).check,"},
{"lineNum":"  263","line":"    }).run();","class":"lineCov","hits":"1","order":"5359","possible_hits":"1",},
{"lineNum":"  264","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-13 15:43:06", "instrumented" : 123, "covered" : 112,};
var merged_data = [];
