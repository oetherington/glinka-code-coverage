var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const node = @import(\"../../common/node.zig\");"},
{"lineNum":"   20","line":"const Node = node.Node;"},
{"lineNum":"   21","line":"const Cursor = @import(\"../../common/cursor.zig\").Cursor;"},
{"lineNum":"   22","line":"const Backend = @import(\"../../common/backend.zig\").Backend;"},
{"lineNum":"   23","line":"const JsBackend = @import(\"js_backend.zig\").JsBackend;"},
{"lineNum":"   24","line":"const EmitTestCase = @import(\"emit_test_case.zig\").EmitTestCase;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"pub fn emitFunc(self: *JsBackend, func: node.Function) Backend.Error!void {","class":"lineCov","hits":"2","order":"5054","possible_hits":"2",},
{"lineNum":"   27","line":"    std.debug.assert(!func.isArrow); // TODO: Implement arrow functions","class":"lineCov","hits":"1","order":"5055","possible_hits":"1",},
{"lineNum":"   28","line":"    std.debug.assert(func.body.getType() == .Block);","class":"lineCov","hits":"1","order":"5056","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    try self.out.print(\"function {s}(\", .{if (func.name) |name| name else \"\"});","class":"lineCov","hits":"1","order":"5057","possible_hits":"1",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    var prefix: []const u8 = \"\";","class":"lineCov","hits":"1","order":"5058","possible_hits":"1",},
{"lineNum":"   33","line":"    for (func.args.items) |arg| {","class":"lineCov","hits":"2","order":"5059","possible_hits":"2",},
{"lineNum":"   34","line":"        try self.out.print(\"{s}{s}\", .{ prefix, arg.name });","class":"lineCov","hits":"1","order":"5060","possible_hits":"1",},
{"lineNum":"   35","line":"        prefix = \", \";","class":"lineCov","hits":"1","order":"5061","possible_hits":"1",},
{"lineNum":"   36","line":"    }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    try self.out.print(\") \", .{});","class":"lineCov","hits":"1","order":"5062","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    try self.emitNode(func.body);","class":"lineCov","hits":"1","order":"5063","possible_hits":"1",},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"test \"JsBackend can emit function\" {","class":"lineCov","hits":"3","order":"5035","possible_hits":"3",},
{"lineNum":"   44","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    var func = node.Function{"},
{"lineNum":"   47","line":"        .isArrow = false,","class":"lineCov","hits":"1","order":"5037","possible_hits":"1",},
{"lineNum":"   48","line":"        .name = \"aFunction\",","class":"lineCov","hits":"1","order":"5038","possible_hits":"1",},
{"lineNum":"   49","line":"        .retTy = null,","class":"lineCov","hits":"1","order":"5039","possible_hits":"1",},
{"lineNum":"   50","line":"        .args = .{},","class":"lineCov","hits":"1","order":"5040","possible_hits":"1",},
{"lineNum":"   51","line":"        .body = EmitTestCase.makeNode(.Block, node.NodeList{}),","class":"lineCov","hits":"1","order":"5036","possible_hits":"1",},
{"lineNum":"   52","line":"    };"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    defer alloc.destroy(func.body);","class":"linePartCov","hits":"1","order":"5065","possible_hits":"4",},
{"lineNum":"   55","line":"    defer func.args.deinit(alloc);","class":"linePartCov","hits":"1","order":"5064","possible_hits":"4",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    try func.args.append(alloc, .{","class":"linePartCov","hits":"2","order":"5041","possible_hits":"3",},
{"lineNum":"   58","line":"        .csr = Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5042","possible_hits":"1",},
{"lineNum":"   59","line":"        .name = \"a\",","class":"lineCov","hits":"1","order":"5043","possible_hits":"1",},
{"lineNum":"   60","line":"        .ty = null,","class":"lineCov","hits":"1","order":"5044","possible_hits":"1",},
{"lineNum":"   61","line":"    });"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    try func.args.append(alloc, .{","class":"linePartCov","hits":"2","order":"5045","possible_hits":"3",},
{"lineNum":"   64","line":"        .csr = Cursor.new(0, 0),","class":"lineCov","hits":"1","order":"5046","possible_hits":"1",},
{"lineNum":"   65","line":"        .name = \"b\",","class":"lineCov","hits":"1","order":"5047","possible_hits":"1",},
{"lineNum":"   66","line":"        .ty = null,","class":"lineCov","hits":"1","order":"5048","possible_hits":"1",},
{"lineNum":"   67","line":"    });"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    try (EmitTestCase{","class":"linePartCov","hits":"2","order":"5051","possible_hits":"3",},
{"lineNum":"   70","line":"        .inputNode = EmitTestCase.makeNode(.Function, func),","class":"lineCov","hits":"1","order":"5049","possible_hits":"1",},
{"lineNum":"   71","line":"        .expectedOutput = \"function aFunction(a, b) {\\n}\\n\",","class":"lineCov","hits":"1","order":"5050","possible_hits":"1",},
{"lineNum":"   72","line":"    }).run();","class":"lineCov","hits":"1","order":"5052","possible_hits":"1",},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"pub fn emitReturn(self: *JsBackend, expr: ?Node) Backend.Error!void {","class":"lineCov","hits":"2","order":"4862","possible_hits":"2",},
{"lineNum":"   76","line":"    if (expr) |val| {","class":"lineCov","hits":"2","order":"4863","possible_hits":"2",},
{"lineNum":"   77","line":"        try self.out.print(\"return \", .{});","class":"lineCov","hits":"1","order":"5077","possible_hits":"1",},
{"lineNum":"   78","line":"        try self.emitExpr(val);","class":"lineCov","hits":"1","order":"5078","possible_hits":"1",},
{"lineNum":"   79","line":"        try self.out.print(\";\\n\", .{});","class":"lineCov","hits":"1","order":"5079","possible_hits":"1",},
{"lineNum":"   80","line":"    } else {"},
{"lineNum":"   81","line":"        try self.out.print(\"return;\\n\", .{});","class":"lineCov","hits":"1","order":"4864","possible_hits":"1",},
{"lineNum":"   82","line":"    }"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"test \"JsBackend can emit return without a value\" {","class":"lineCov","hits":"2","order":"5066","possible_hits":"2",},
{"lineNum":"   86","line":"    try (EmitTestCase{","class":"lineCov","hits":"2","order":"5069","possible_hits":"2",},
{"lineNum":"   87","line":"        .inputNode = EmitTestCase.makeNode(.Return, null),","class":"lineCov","hits":"1","order":"5067","possible_hits":"1",},
{"lineNum":"   88","line":"        .expectedOutput = \"return;\\n\",","class":"lineCov","hits":"1","order":"5068","possible_hits":"1",},
{"lineNum":"   89","line":"    }).run();","class":"lineCov","hits":"1","order":"5070","possible_hits":"1",},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"test \"JsBackend can emit return with a value\" {","class":"lineCov","hits":"3","order":"5071","possible_hits":"3",},
{"lineNum":"   93","line":"    const alloc = std.testing.allocator;"},
{"lineNum":"   94","line":"    const value = EmitTestCase.makeNode(.Null, {});","class":"lineCov","hits":"1","order":"5072","possible_hits":"1",},
{"lineNum":"   95","line":"    defer alloc.destroy(value);","class":"linePartCov","hits":"1","order":"5080","possible_hits":"2",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    try (EmitTestCase{","class":"linePartCov","hits":"2","order":"5075","possible_hits":"3",},
{"lineNum":"   98","line":"        .inputNode = EmitTestCase.makeNode(.Return, value),","class":"lineCov","hits":"1","order":"5073","possible_hits":"1",},
{"lineNum":"   99","line":"        .expectedOutput = \"return null;\\n\",","class":"lineCov","hits":"1","order":"5074","possible_hits":"1",},
{"lineNum":"  100","line":"    }).run();","class":"lineCov","hits":"1","order":"5076","possible_hits":"1",},
{"lineNum":"  101","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-03 22:01:04", "instrumented" : 48, "covered" : 48,};
var merged_data = [];
