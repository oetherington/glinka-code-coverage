var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const genericEql = @import(\"../generic_eql.zig\").eql;"},
{"lineNum":"   20","line":"const Type = @import(\"type.zig\").Type;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"pub const InterfaceType = struct {"},
{"lineNum":"   23","line":"    pub const Member = struct {"},
{"lineNum":"   24","line":"        name: []const u8,"},
{"lineNum":"   25","line":"        ty: Type.Ptr,"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        pub fn eql(a: Member, b: Member) bool {","class":"lineCov","hits":"1","order":"1950","possible_hits":"1",},
{"lineNum":"   28","line":"            return genericEql(a, b);","class":"lineCov","hits":"1","order":"1951","possible_hits":"1",},
{"lineNum":"   29","line":"        }"},
{"lineNum":"   30","line":"    };"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    members: []Member,"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    pub fn new(members: []Member) InterfaceType {","class":"lineCov","hits":"1","order":"1540","possible_hits":"1",},
{"lineNum":"   35","line":"        return InterfaceType{","class":"lineCov","hits":"1","order":"1542","possible_hits":"1",},
{"lineNum":"   36","line":"            .members = members,","class":"lineCov","hits":"1","order":"1541","possible_hits":"1",},
{"lineNum":"   37","line":"        };"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    pub fn hash(self: InterfaceType) usize {","class":"lineCov","hits":"1","order":"1969","possible_hits":"1",},
{"lineNum":"   41","line":"        var result: usize = 0xe75f7630fbf1ff65;","class":"lineCov","hits":"1","order":"1970","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        for (self.members) |mem|","class":"lineCov","hits":"2","order":"1971","possible_hits":"2",},
{"lineNum":"   44","line":"            result ^= std.hash.Wyhash.hash(0, mem.name) ^ @ptrToInt(mem.ty);","class":"lineCov","hits":"1","order":"1972","possible_hits":"1",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        return result;","class":"lineCov","hits":"1","order":"1973","possible_hits":"1",},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    pub fn write(self: InterfaceType, writer: anytype) !void {","class":"linePartCov","hits":"2","order":"1878","possible_hits":"4",},
{"lineNum":"   50","line":"        try writer.print(\"{{ \", .{});","class":"linePartCov","hits":"1","order":"1879","possible_hits":"2",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        for (self.members) |mem| {","class":"linePartCov","hits":"2","order":"1880","possible_hits":"4",},
{"lineNum":"   53","line":"            try writer.print(\"{s}: \", .{mem.name});","class":"linePartCov","hits":"1","order":"1881","possible_hits":"2",},
{"lineNum":"   54","line":"            try mem.ty.write(writer);","class":"linePartCov","hits":"1","order":"1882","possible_hits":"2",},
{"lineNum":"   55","line":"            try writer.print(\", \", .{});","class":"linePartCov","hits":"1","order":"1883","possible_hits":"2",},
{"lineNum":"   56","line":"        }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        try writer.print(\"}}\", .{});","class":"linePartCov","hits":"1","order":"1884","possible_hits":"2",},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"test \"can check InterfaceType.Member equality\" {","class":"lineCov","hits":"2","order":"1942","possible_hits":"2",},
{"lineNum":"   63","line":"    const number = Type.newNumber();","class":"lineCov","hits":"1","order":"1943","possible_hits":"1",},
{"lineNum":"   64","line":"    const boolean = Type.newBoolean();","class":"lineCov","hits":"1","order":"1944","possible_hits":"1",},
{"lineNum":"   65","line":"    const a = InterfaceType.Member{ .name = \"a\", .ty = &number };","class":"lineCov","hits":"1","order":"1945","possible_hits":"1",},
{"lineNum":"   66","line":"    const b = InterfaceType.Member{ .name = \"a\", .ty = &number };","class":"lineCov","hits":"1","order":"1946","possible_hits":"1",},
{"lineNum":"   67","line":"    const c = InterfaceType.Member{ .name = \"b\", .ty = &number };","class":"lineCov","hits":"1","order":"1947","possible_hits":"1",},
{"lineNum":"   68","line":"    const d = InterfaceType.Member{ .name = \"a\", .ty = &boolean };","class":"lineCov","hits":"1","order":"1948","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    try std.testing.expect(a.eql(a));","class":"lineCov","hits":"1","order":"1949","possible_hits":"1",},
{"lineNum":"   71","line":"    try std.testing.expect(a.eql(b));","class":"lineCov","hits":"1","order":"1952","possible_hits":"1",},
{"lineNum":"   72","line":"    try std.testing.expect(!a.eql(c));","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"   73","line":"    try std.testing.expect(!a.eql(d));","class":"lineCov","hits":"1","order":"1954","possible_hits":"1",},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"test \"can hash an InterfaceType\" {","class":"lineCov","hits":"2","order":"1955","possible_hits":"2",},
{"lineNum":"   77","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"   78","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1957","possible_hits":"1",},
{"lineNum":"   79","line":"    const never = Type.newNever();","class":"lineCov","hits":"1","order":"1958","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    const a = Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1961","possible_hits":"1",},
{"lineNum":"   82","line":"        Type.InterfaceType.Member{ .name = \"a\", .ty = &num },","class":"lineCov","hits":"1","order":"1959","possible_hits":"1",},
{"lineNum":"   83","line":"        Type.InterfaceType.Member{ .name = \"b\", .ty = &str },","class":"lineCov","hits":"1","order":"1960","possible_hits":"1",},
{"lineNum":"   84","line":"    });"},
{"lineNum":"   85","line":"    const b = Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1964","possible_hits":"1",},
{"lineNum":"   86","line":"        Type.InterfaceType.Member{ .name = \"b\", .ty = &str },","class":"lineCov","hits":"1","order":"1962","possible_hits":"1",},
{"lineNum":"   87","line":"        Type.InterfaceType.Member{ .name = \"a\", .ty = &num },","class":"lineCov","hits":"1","order":"1963","possible_hits":"1",},
{"lineNum":"   88","line":"    });"},
{"lineNum":"   89","line":"    const c = Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1967","possible_hits":"1",},
{"lineNum":"   90","line":"        Type.InterfaceType.Member{ .name = \"a\", .ty = &num },","class":"lineCov","hits":"1","order":"1965","possible_hits":"1",},
{"lineNum":"   91","line":"        Type.InterfaceType.Member{ .name = \"b\", .ty = &never },","class":"lineCov","hits":"1","order":"1966","possible_hits":"1",},
{"lineNum":"   92","line":"    });"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    try std.testing.expectEqual(a.hash(), a.hash());","class":"lineCov","hits":"1","order":"1968","possible_hits":"1",},
{"lineNum":"   95","line":"    try std.testing.expectEqual(a.hash(), b.hash());","class":"lineCov","hits":"1","order":"1974","possible_hits":"1",},
{"lineNum":"   96","line":"    try std.testing.expect(a.hash() != c.hash());","class":"lineCov","hits":"1","order":"1975","possible_hits":"1",},
{"lineNum":"   97","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-08 20:31:10", "instrumented" : 44, "covered" : 44,};
var merged_data = [];
