var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const Type = @import(\"../../common/types/type.zig\").Type;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"pub const InferContext = struct {"},
{"lineNum":"   22","line":"    pub const Variant = enum {"},
{"lineNum":"   23","line":"        None,"},
{"lineNum":"   24","line":"        New,"},
{"lineNum":"   25","line":"        Class,"},
{"lineNum":"   26","line":"    };"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    pub const Data = union(Variant) {"},
{"lineNum":"   29","line":"        None: void,"},
{"lineNum":"   30","line":"        New: void,"},
{"lineNum":"   31","line":"        Class: Type.Ptr,"},
{"lineNum":"   32","line":"    };"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    parent: ?*const InferContext,"},
{"lineNum":"   35","line":"    data: Data,"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    pub fn none(parent: ?*const InferContext) InferContext {","class":"lineCov","hits":"1","order":"3186","possible_hits":"1",},
{"lineNum":"   38","line":"        return InferContext{","class":"lineCov","hits":"1","order":"3189","possible_hits":"1",},
{"lineNum":"   39","line":"            .parent = parent,","class":"lineCov","hits":"1","order":"3187","possible_hits":"1",},
{"lineNum":"   40","line":"            .data = Data{ .None = {} },","class":"lineCov","hits":"1","order":"3188","possible_hits":"1",},
{"lineNum":"   41","line":"        };"},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    pub fn new(parent: ?*const InferContext) InferContext {","class":"lineCov","hits":"1","order":"6413","possible_hits":"1",},
{"lineNum":"   45","line":"        return InferContext{","class":"lineCov","hits":"1","order":"6416","possible_hits":"1",},
{"lineNum":"   46","line":"            .parent = parent,","class":"lineCov","hits":"1","order":"6414","possible_hits":"1",},
{"lineNum":"   47","line":"            .data = Data{ .New = {} },","class":"lineCov","hits":"1","order":"6415","possible_hits":"1",},
{"lineNum":"   48","line":"        };"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    pub fn class(parent: ?*const InferContext, ty: Type.Ptr) InferContext {","class":"lineCov","hits":"1","order":"6421","possible_hits":"1",},
{"lineNum":"   52","line":"        return InferContext{","class":"lineCov","hits":"1","order":"6424","possible_hits":"1",},
{"lineNum":"   53","line":"            .parent = parent,","class":"lineCov","hits":"1","order":"6422","possible_hits":"1",},
{"lineNum":"   54","line":"            .data = Data{ .Class = ty },","class":"lineCov","hits":"1","order":"6423","possible_hits":"1",},
{"lineNum":"   55","line":"        };"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    pub fn getType(self: InferContext) Variant {","class":"lineCov","hits":"1","order":"5026","possible_hits":"1",},
{"lineNum":"   59","line":"        return @as(Variant, self.data);","class":"lineCov","hits":"1","order":"5027","possible_hits":"1",},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    pub fn isConstructible(self: InferContext) bool {","class":"lineCov","hits":"1","order":"5024","possible_hits":"1",},
{"lineNum":"   63","line":"        return self.getType() == .New;","class":"lineCov","hits":"1","order":"5025","possible_hits":"1",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"test \"can create a \'None\' InferContext\" {","class":"lineCov","hits":"2","order":"6408","possible_hits":"2",},
{"lineNum":"   68","line":"    const ctx = InferContext.none(null);","class":"lineCov","hits":"1","order":"6409","possible_hits":"1",},
{"lineNum":"   69","line":"    try std.testing.expectEqual(InferContext.Variant.None, ctx.getType());","class":"lineCov","hits":"1","order":"6410","possible_hits":"1",},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"test \"can create a \'New\' InferContext\" {","class":"lineCov","hits":"2","order":"6411","possible_hits":"2",},
{"lineNum":"   73","line":"    const ctx = InferContext.new(null);","class":"lineCov","hits":"1","order":"6412","possible_hits":"1",},
{"lineNum":"   74","line":"    try std.testing.expectEqual(InferContext.Variant.New, ctx.getType());","class":"lineCov","hits":"1","order":"6417","possible_hits":"1",},
{"lineNum":"   75","line":"}"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"test \"can create a \'Class\' InferContext\" {","class":"lineCov","hits":"2","order":"6418","possible_hits":"2",},
{"lineNum":"   78","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"6419","possible_hits":"1",},
{"lineNum":"   79","line":"    const ctx = InferContext.class(null, &num);","class":"lineCov","hits":"1","order":"6420","possible_hits":"1",},
{"lineNum":"   80","line":"    try std.testing.expectEqual(InferContext.Variant.Class, ctx.getType());","class":"lineCov","hits":"1","order":"6425","possible_hits":"1",},
{"lineNum":"   81","line":"    try std.testing.expectEqual(&num, ctx.data.Class);","class":"lineCov","hits":"2","order":"6426","possible_hits":"2",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"test \"only \'New\' InferContext is constructible\" {","class":"lineCov","hits":"2","order":"6427","possible_hits":"2",},
{"lineNum":"   85","line":"    const newCtx = InferContext.new(null);","class":"lineCov","hits":"1","order":"6428","possible_hits":"1",},
{"lineNum":"   86","line":"    const noneCtx = InferContext.none(null);","class":"lineCov","hits":"1","order":"6429","possible_hits":"1",},
{"lineNum":"   87","line":"    const childCtx = InferContext.none(&newCtx);","class":"lineCov","hits":"1","order":"6430","possible_hits":"1",},
{"lineNum":"   88","line":"    try std.testing.expect(newCtx.isConstructible());","class":"lineCov","hits":"1","order":"6431","possible_hits":"1",},
{"lineNum":"   89","line":"    try std.testing.expect(!noneCtx.isConstructible());","class":"lineCov","hits":"1","order":"6432","possible_hits":"1",},
{"lineNum":"   90","line":"    try std.testing.expect(!childCtx.isConstructible());","class":"lineCov","hits":"1","order":"6433","possible_hits":"1",},
{"lineNum":"   91","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-01 21:28:32", "instrumented" : 34, "covered" : 34,};
var merged_data = [];
