var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   20","line":"const Type = @import(\"type.zig\").Type;"},
{"lineNum":"   21","line":"const allocate = @import(\"../../common/allocate.zig\");"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"const MapContext = struct {"},
{"lineNum":"   24","line":"    pub fn hash(self: @This(), tys: []Type.Ptr) u64 {","class":"lineCov","hits":"1","order":"225","possible_hits":"1",},
{"lineNum":"   25","line":"        _ = self;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        var res: u64 = 0;","class":"lineCov","hits":"1","order":"226","possible_hits":"1",},
{"lineNum":"   28","line":"        for (tys) |ty|","class":"lineCov","hits":"2","order":"227","possible_hits":"2",},
{"lineNum":"   29","line":"            res ^= @ptrToInt(ty);","class":"lineCov","hits":"1","order":"228","possible_hits":"1",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        return res;","class":"lineCov","hits":"1","order":"229","possible_hits":"1",},
{"lineNum":"   32","line":"    }"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    pub fn eql(self: @This(), a: []Type.Ptr, b: []Type.Ptr) bool {","class":"lineCov","hits":"1","order":"1378","possible_hits":"1",},
{"lineNum":"   35","line":"        _ = self;"},
{"lineNum":"   36","line":"        return std.mem.eql(Type.Ptr, a, b);","class":"lineCov","hits":"1","order":"1379","possible_hits":"1",},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":"};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"const UnionTypeMap = struct {"},
{"lineNum":"   41","line":"    const Map = std.HashMap("},
{"lineNum":"   42","line":"        []Type.Ptr,"},
{"lineNum":"   43","line":"        Type.Ptr,"},
{"lineNum":"   44","line":"        MapContext,"},
{"lineNum":"   45","line":"        std.hash_map.default_max_load_percentage,"},
{"lineNum":"   46","line":"    );"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    map: Map,"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    pub fn new(alloc: Allocator) UnionTypeMap {","class":"lineCov","hits":"1","order":"177","possible_hits":"1",},
{"lineNum":"   51","line":"        return UnionTypeMap{","class":"lineCov","hits":"1","order":"179","possible_hits":"1",},
{"lineNum":"   52","line":"            .map = Map.init(alloc),","class":"lineCov","hits":"1","order":"178","possible_hits":"1",},
{"lineNum":"   53","line":"        };"},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    pub fn deinit(self: *UnionTypeMap) void {","class":"lineCov","hits":"2","order":"306","possible_hits":"2",},
{"lineNum":"   57","line":"        var it = self.map.valueIterator();","class":"lineCov","hits":"1","order":"307","possible_hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        while (it.next()) |val| {","class":"lineCov","hits":"2","order":"308","possible_hits":"2",},
{"lineNum":"   60","line":"            const unionTy = val.*.*;","class":"lineCov","hits":"1","order":"309","possible_hits":"1",},
{"lineNum":"   61","line":"            std.debug.assert(std.meta.activeTag(unionTy) == .Union);","class":"lineCov","hits":"1","order":"310","possible_hits":"1",},
{"lineNum":"   62","line":"            self.map.allocator.free(unionTy.Union.tys);","class":"linePartCov","hits":"2","order":"311","possible_hits":"3",},
{"lineNum":"   63","line":"            self.map.allocator.destroy(val.*);","class":"lineCov","hits":"1","order":"312","possible_hits":"1",},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        self.map.deinit();","class":"lineCov","hits":"1","order":"313","possible_hits":"1",},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    const TypeList = std.ArrayList(Type.Ptr);"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    fn flattenTypes(out: *TypeList, in: []Type.Ptr) void {","class":"lineCov","hits":"2","order":"210","possible_hits":"2",},
{"lineNum":"   72","line":"        for (in) |ty| {","class":"lineCov","hits":"2","order":"211","possible_hits":"2",},
{"lineNum":"   73","line":"            switch (ty.*) {","class":"lineCov","hits":"2","order":"212","possible_hits":"2",},
{"lineNum":"   74","line":"                .Union => |un| UnionTypeMap.flattenTypes(out, un.tys),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                else => out.append(ty) catch allocate.reportAndExit(),","class":"lineCov","hits":"1","order":"213","possible_hits":"1",},
{"lineNum":"   76","line":"            }"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub fn get(self: *UnionTypeMap, tys_: []Type.Ptr) Type.Ptr {","class":"lineCov","hits":"1","order":"206","possible_hits":"1",},
{"lineNum":"   81","line":"        const Context = struct {"},
{"lineNum":"   82","line":"            pub fn lessThan(_: @This(), lhs: Type.Ptr, rhs: Type.Ptr) bool {","class":"lineCov","hits":"1","order":"216","possible_hits":"1",},
{"lineNum":"   83","line":"                return @ptrToInt(lhs) < @ptrToInt(rhs);","class":"lineCov","hits":"1","order":"217","possible_hits":"1",},
{"lineNum":"   84","line":"            }"},
{"lineNum":"   85","line":"        };"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        var flattened = TypeList.init(self.map.allocator);","class":"lineCov","hits":"1","order":"207","possible_hits":"1",},
{"lineNum":"   88","line":"        flattened.ensureTotalCapacity(tys_.len) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"208","possible_hits":"1",},
{"lineNum":"   89","line":"        UnionTypeMap.flattenTypes(&flattened, tys_);","class":"lineCov","hits":"1","order":"209","possible_hits":"1",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        const tys = flattened.items;","class":"lineCov","hits":"1","order":"214","possible_hits":"1",},
{"lineNum":"   92","line":"        std.sort.insertionSort(Type.Ptr, tys, Context{}, Context.lessThan);","class":"lineCov","hits":"1","order":"215","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        const existing = self.map.get(tys);","class":"lineCov","hits":"1","order":"218","possible_hits":"1",},
{"lineNum":"   95","line":"        if (existing) |ty| {","class":"lineCov","hits":"2","order":"219","possible_hits":"2",},
{"lineNum":"   96","line":"            flattened.deinit();","class":"lineCov","hits":"1","order":"1380","possible_hits":"1",},
{"lineNum":"   97","line":"            return ty;","class":"lineCov","hits":"1","order":"1381","possible_hits":"1",},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        var ty = allocate.create(self.map.allocator, Type);","class":"lineCov","hits":"1","order":"220","possible_hits":"1",},
{"lineNum":"  101","line":"        ty.* = Type{ .Union = Type.UnionType{ .tys = tys } };","class":"lineCov","hits":"1","order":"223","possible_hits":"1",},
{"lineNum":"  102","line":"        self.map.put(tys, ty) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"  103","line":"        return ty;","class":"lineCov","hits":"1","order":"230","possible_hits":"1",},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":"};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"pub const UnionType = struct {"},
{"lineNum":"  108","line":"    pub const Map = UnionTypeMap;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    tys: []Type.Ptr,"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    pub fn contains(self: UnionType, ty: Type.Ptr) bool {"},
{"lineNum":"  113","line":"        for (self.tys) |t|"},
{"lineNum":"  114","line":"            if (t == ty)"},
{"lineNum":"  115","line":"                return true;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        return false;"},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    pub fn write(self: UnionType, writer: anytype) !void {","class":"linePartCov","hits":"2","order":"1064","possible_hits":"4",},
{"lineNum":"  121","line":"        var prefix: []const u8 = \"\";","class":"linePartCov","hits":"1","order":"1065","possible_hits":"2",},
{"lineNum":"  122","line":"        for (self.tys) |ty| {","class":"linePartCov","hits":"2","order":"1066","possible_hits":"4",},
{"lineNum":"  123","line":"            try writer.print(\"{s}\", .{prefix});","class":"linePartCov","hits":"1","order":"1067","possible_hits":"2",},
{"lineNum":"  124","line":"            try ty.write(writer);","class":"linePartCov","hits":"1","order":"1068","possible_hits":"2",},
{"lineNum":"  125","line":"            prefix = \"|\";","class":"linePartCov","hits":"1","order":"1069","possible_hits":"2",},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 19:23:58", "instrumented" : 45, "covered" : 44,};
var merged_data = [];
