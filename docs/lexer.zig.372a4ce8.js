var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const assert = std.debug.assert;"},
{"lineNum":"   23","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   24","line":"const Token = @import(\"../common/token.zig\").Token;"},
{"lineNum":"   25","line":"const lexOperator = @import(\"operator_lexer.zig\").lexOperator;"},
{"lineNum":"   26","line":"const lexNumber = @import(\"number_lexer.zig\").lexNumber;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"const keywordMap = std.ComptimeStringMap(Token.Type, .{"},
{"lineNum":"   29","line":"    .{ \"var\", .Var },"},
{"lineNum":"   30","line":"    .{ \"let\", .Let },"},
{"lineNum":"   31","line":"    .{ \"const\", .Const },"},
{"lineNum":"   32","line":"    .{ \"function\", .Function },"},
{"lineNum":"   33","line":"    .{ \"void\", .Void },"},
{"lineNum":"   34","line":"    .{ \"async\", .Async },"},
{"lineNum":"   35","line":"    .{ \"await\", .Await },"},
{"lineNum":"   36","line":"    .{ \"yield\", .Yield },"},
{"lineNum":"   37","line":"    .{ \"declare\", .Declare },"},
{"lineNum":"   38","line":"    .{ \"new\", .New },"},
{"lineNum":"   39","line":"    .{ \"delete\", .Delete },"},
{"lineNum":"   40","line":"    .{ \"class\", .Class },"},
{"lineNum":"   41","line":"    .{ \"extends\", .Extends },"},
{"lineNum":"   42","line":"    .{ \"implements\", .Implements },"},
{"lineNum":"   43","line":"    .{ \"constructor\", .Constructor },"},
{"lineNum":"   44","line":"    .{ \"static\", .Static },"},
{"lineNum":"   45","line":"    .{ \"readonly\", .ReadOnly },"},
{"lineNum":"   46","line":"    .{ \"public\", .Public },"},
{"lineNum":"   47","line":"    .{ \"protected\", .Protected },"},
{"lineNum":"   48","line":"    .{ \"private\", .Private },"},
{"lineNum":"   49","line":"    .{ \"enum\", .Enum },"},
{"lineNum":"   50","line":"    .{ \"interface\", .Interface },"},
{"lineNum":"   51","line":"    .{ \"import\", .Import },"},
{"lineNum":"   52","line":"    .{ \"export\", .Export },"},
{"lineNum":"   53","line":"    .{ \"true\", .True },"},
{"lineNum":"   54","line":"    .{ \"false\", .False },"},
{"lineNum":"   55","line":"    .{ \"null\", .Null },"},
{"lineNum":"   56","line":"    .{ \"undefined\", .Undefined },"},
{"lineNum":"   57","line":"    .{ \"typeof\", .TypeOf },"},
{"lineNum":"   58","line":"    .{ \"instanceof\", .InstanceOf },"},
{"lineNum":"   59","line":"    .{ \"if\", .If },"},
{"lineNum":"   60","line":"    .{ \"else\", .Else },"},
{"lineNum":"   61","line":"    .{ \"do\", .Do },"},
{"lineNum":"   62","line":"    .{ \"while\", .While },"},
{"lineNum":"   63","line":"    .{ \"for\", .For },"},
{"lineNum":"   64","line":"    .{ \"in\", .In },"},
{"lineNum":"   65","line":"    .{ \"of\", .Of },"},
{"lineNum":"   66","line":"    .{ \"break\", .Break },"},
{"lineNum":"   67","line":"    .{ \"continue\", .Continue },"},
{"lineNum":"   68","line":"    .{ \"switch\", .Switch },"},
{"lineNum":"   69","line":"    .{ \"case\", .Case },"},
{"lineNum":"   70","line":"    .{ \"default\", .Default },"},
{"lineNum":"   71","line":"    .{ \"return\", .Return },"},
{"lineNum":"   72","line":"    .{ \"with\", .With },"},
{"lineNum":"   73","line":"    .{ \"throw\", .Throw },"},
{"lineNum":"   74","line":"    .{ \"try\", .Try },"},
{"lineNum":"   75","line":"    .{ \"catch\", .Catch },"},
{"lineNum":"   76","line":"    .{ \"finally\", .Finally },"},
{"lineNum":"   77","line":"    .{ \"type\", .Type },"},
{"lineNum":"   78","line":"});"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"fn getIdentTokenType(ident: []const u8) Token.Type {","class":"lineCov","hits":"1","order":"42","possible_hits":"1",},
{"lineNum":"   81","line":"    return keywordMap.get(ident) orelse .Ident;","class":"lineCov","hits":"1","order":"43","possible_hits":"1",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"fn isIdent0(c: u8) bool {","class":"lineCov","hits":"1","order":"30","possible_hits":"1",},
{"lineNum":"   85","line":"    return (c >= \'a\' and c <= \'z\') or (c >= \'A\' and c <= \'Z\') or c == \'_\' or c == \'$\';","class":"lineCov","hits":"1","order":"31","possible_hits":"1",},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"fn isNum(c: u8) bool {","class":"lineCov","hits":"1","order":"38","possible_hits":"1",},
{"lineNum":"   89","line":"    return c >= \'0\' and c <= \'9\';","class":"lineCov","hits":"1","order":"39","possible_hits":"1",},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"fn isIdent(c: u8) bool {","class":"lineCov","hits":"1","order":"35","possible_hits":"1",},
{"lineNum":"   93","line":"    return isIdent0(c) or isNum(c);","class":"lineCov","hits":"1","order":"36","possible_hits":"1",},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"pub const Lexer = struct {"},
{"lineNum":"   97","line":"    const Context = struct {"},
{"lineNum":"   98","line":"        index: u64,"},
{"lineNum":"   99","line":"        csr: Cursor,"},
{"lineNum":"  100","line":"        token: Token,"},
{"lineNum":"  101","line":"    };"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    code: []const u8,"},
{"lineNum":"  104","line":"    index: u64,"},
{"lineNum":"  105","line":"    csr: Cursor,"},
{"lineNum":"  106","line":"    token: Token,"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    pub fn new(code: []const u8) Lexer {","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"  109","line":"        return Lexer{","class":"lineCov","hits":"1","order":"22","possible_hits":"1",},
{"lineNum":"  110","line":"            .code = code,","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  111","line":"            .index = 0,","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":"  112","line":"            .csr = Cursor.new(1, 1),","class":"lineCov","hits":"1","order":"9","possible_hits":"1",},
{"lineNum":"  113","line":"            .token = Token.newInvalid(),","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"  114","line":"        };"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    pub fn save(self: Lexer) Context {","class":"lineCov","hits":"1","order":"686","possible_hits":"1",},
{"lineNum":"  118","line":"        return Context{","class":"lineCov","hits":"1","order":"690","possible_hits":"1",},
{"lineNum":"  119","line":"            .index = self.index,","class":"lineCov","hits":"1","order":"687","possible_hits":"1",},
{"lineNum":"  120","line":"            .csr = self.csr,","class":"lineCov","hits":"1","order":"688","possible_hits":"1",},
{"lineNum":"  121","line":"            .token = self.token,","class":"lineCov","hits":"1","order":"689","possible_hits":"1",},
{"lineNum":"  122","line":"        };"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    pub fn restore(self: *Lexer, ctx: Context) void {","class":"lineCov","hits":"2","order":"697","possible_hits":"2",},
{"lineNum":"  126","line":"        self.index = ctx.index;","class":"lineCov","hits":"1","order":"698","possible_hits":"1",},
{"lineNum":"  127","line":"        self.csr = ctx.csr;","class":"lineCov","hits":"1","order":"699","possible_hits":"1",},
{"lineNum":"  128","line":"        self.token = ctx.token;","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    fn atom(self: *Lexer, ty: Token.Type) Token {","class":"lineCov","hits":"1","order":"447","possible_hits":"1",},
{"lineNum":"  132","line":"        self.token = Token.new(ty, self.csr);","class":"lineCov","hits":"1","order":"448","possible_hits":"1",},
{"lineNum":"  133","line":"        self.csr.ch += 1;","class":"lineCov","hits":"1","order":"449","possible_hits":"1",},
{"lineNum":"  134","line":"        self.index += 1;","class":"lineCov","hits":"1","order":"450","possible_hits":"1",},
{"lineNum":"  135","line":"        return self.token;","class":"lineCov","hits":"1","order":"451","possible_hits":"1",},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    fn atomData(self: *Lexer, ty: Token.Type) Token {","class":"lineCov","hits":"1","order":"506","possible_hits":"1",},
{"lineNum":"  139","line":"        const data = self.code[self.index .. self.index + 1];","class":"lineCov","hits":"1","order":"507","possible_hits":"1",},
{"lineNum":"  140","line":"        self.token = Token.newData(ty, self.csr, data);","class":"lineCov","hits":"1","order":"508","possible_hits":"1",},
{"lineNum":"  141","line":"        self.csr.ch += 1;","class":"lineCov","hits":"1","order":"509","possible_hits":"1",},
{"lineNum":"  142","line":"        self.index += 1;","class":"lineCov","hits":"1","order":"510","possible_hits":"1",},
{"lineNum":"  143","line":"        return self.token;","class":"lineCov","hits":"1","order":"511","possible_hits":"1",},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    fn ident(self: *Lexer) Token {","class":"lineCov","hits":"1","order":"28","possible_hits":"1",},
{"lineNum":"  147","line":"        assert(isIdent0(self.code[self.index]));","class":"linePartCov","hits":"1","order":"29","possible_hits":"2",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        const start = self.index;","class":"lineCov","hits":"1","order":"32","possible_hits":"1",},
{"lineNum":"  150","line":"        self.index += 1;","class":"lineCov","hits":"1","order":"33","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"        while (self.index < self.code.len and isIdent(self.code[self.index])) {","class":"lineCov","hits":"3","order":"34","possible_hits":"3",},
{"lineNum":"  153","line":"            self.index += 1;","class":"linePartCov","hits":"1","order":"37","possible_hits":"2",},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"        const data = self.code[start..self.index];","class":"linePartCov","hits":"1","order":"40","possible_hits":"2",},
{"lineNum":"  157","line":"        self.token = Token.newData(getIdentTokenType(data), self.csr, data);","class":"lineCov","hits":"1","order":"41","possible_hits":"1",},
{"lineNum":"  158","line":"        self.csr.ch += @intCast(u32, self.index - start);","class":"lineCov","hits":"1","order":"49","possible_hits":"1",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        return self.token;","class":"lineCov","hits":"1","order":"50","possible_hits":"1",},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    fn string(self: *Lexer) Token {","class":"lineCov","hits":"1","order":"632","possible_hits":"1",},
{"lineNum":"  164","line":"        const delim = self.code[self.index];","class":"linePartCov","hits":"1","order":"633","possible_hits":"2",},
{"lineNum":"  165","line":"        assert(delim == \'\\\'\' or delim == \'\"\' or delim == \'`\');","class":"lineCov","hits":"2","order":"634","possible_hits":"2",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        const csr = self.csr;","class":"lineCov","hits":"1","order":"635","possible_hits":"1",},
{"lineNum":"  168","line":"        const start = self.index;","class":"lineCov","hits":"1","order":"636","possible_hits":"1",},
{"lineNum":"  169","line":"        self.index += 1;","class":"linePartCov","hits":"1","order":"637","possible_hits":"2",},
{"lineNum":"  170","line":"        self.csr.ch += 1;","class":"lineCov","hits":"1","order":"638","possible_hits":"1",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        var slashes: usize = 0;","class":"lineCov","hits":"1","order":"639","possible_hits":"1",},
{"lineNum":"  173","line":"        while (self.index < self.code.len) {","class":"lineCov","hits":"3","order":"640","possible_hits":"3",},
{"lineNum":"  174","line":"            const ch = self.code[self.index];","class":"linePartCov","hits":"1","order":"641","possible_hits":"2",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"            if (ch == \'\\\\\') {","class":"lineCov","hits":"2","order":"642","possible_hits":"2",},
{"lineNum":"  177","line":"                slashes += 1;","class":"linePartCov","hits":"1","order":"665","possible_hits":"2",},
{"lineNum":"  178","line":"                self.index += 1;","class":"lineCov","hits":"1","order":"666","possible_hits":"1",},
{"lineNum":"  179","line":"                self.csr.ch += 1;","class":"lineCov","hits":"1","order":"667","possible_hits":"1",},
{"lineNum":"  180","line":"                continue;","class":"lineCov","hits":"1","order":"668","possible_hits":"1",},
{"lineNum":"  181","line":"            } else if (ch == \'\\n\') {","class":"lineCov","hits":"3","order":"643","possible_hits":"3",},
{"lineNum":"  182","line":"                // TODO: New lines should only be valid inside templates"},
{"lineNum":"  183","line":"                self.csr.ln += 1;","class":"linePartCov","hits":"1","order":"672","possible_hits":"2",},
{"lineNum":"  184","line":"                self.csr.ch = 1;","class":"lineCov","hits":"1","order":"673","possible_hits":"1",},
{"lineNum":"  185","line":"            } else if (ch == delim and slashes & 1 == 0) {","class":"lineCov","hits":"2","order":"644","possible_hits":"2",},
{"lineNum":"  186","line":"                break;","class":"lineCov","hits":"1","order":"648","possible_hits":"1",},
{"lineNum":"  187","line":"            } else {"},
{"lineNum":"  188","line":"                self.csr.ch += 1;","class":"linePartCov","hits":"1","order":"645","possible_hits":"2",},
{"lineNum":"  189","line":"            }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            self.index += 1;","class":"linePartCov","hits":"1","order":"646","possible_hits":"2",},
{"lineNum":"  192","line":"            slashes = 0;","class":"lineCov","hits":"1","order":"647","possible_hits":"1",},
{"lineNum":"  193","line":"        }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        if (self.index >= self.code.len or self.code[self.index] != delim) {","class":"linePartCov","hits":"2","order":"649","possible_hits":"3",},
{"lineNum":"  196","line":"            self.token = Token.new(.Invalid, csr);","class":"lineCov","hits":"1","order":"678","possible_hits":"1",},
{"lineNum":"  197","line":"            return self.token;","class":"lineCov","hits":"1","order":"679","possible_hits":"1",},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        self.index += 1;","class":"linePartCov","hits":"1","order":"650","possible_hits":"2",},
{"lineNum":"  201","line":"        self.csr.ch += 1;","class":"lineCov","hits":"1","order":"651","possible_hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        const ty: Token.Type = if (delim == \'`\') .Template else .String;","class":"lineCov","hits":"2","order":"652","possible_hits":"2",},
{"lineNum":"  204","line":"        const data = self.code[start..self.index];","class":"linePartCov","hits":"1","order":"653","possible_hits":"2",},
{"lineNum":"  205","line":"        self.token = Token.newData(ty, csr, data);","class":"lineCov","hits":"1","order":"654","possible_hits":"1",},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        return self.token;","class":"lineCov","hits":"1","order":"655","possible_hits":"1",},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    pub fn operator(self: *Lexer) Token {","class":"lineCov","hits":"1","order":"472","possible_hits":"1",},
{"lineNum":"  211","line":"        if (lexOperator(self.code[self.index..])) |res| {","class":"linePartCov","hits":"1","order":"473","possible_hits":"2",},
{"lineNum":"  212","line":"            self.token = Token.new(res.ty, self.csr);","class":"lineCov","hits":"1","order":"490","possible_hits":"1",},
{"lineNum":"  213","line":"            self.index += res.len;","class":"linePartCov","hits":"1","order":"491","possible_hits":"2",},
{"lineNum":"  214","line":"            self.csr.ch += res.len;","class":"lineCov","hits":"1","order":"492","possible_hits":"1",},
{"lineNum":"  215","line":"            return self.token;","class":"lineCov","hits":"1","order":"493","possible_hits":"1",},
{"lineNum":"  216","line":"        } else {"},
{"lineNum":"  217","line":"            return self.atomData(Token.Type.Invalid);","class":"lineCov","hits":"1","order":"505","possible_hits":"1",},
{"lineNum":"  218","line":"        }"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    pub fn next(self: *Lexer) Token {","class":"lineCov","hits":"1","order":"24","possible_hits":"1",},
{"lineNum":"  222","line":"        nextLoop: while (self.index < self.code.len) {","class":"lineCov","hits":"2","order":"25","possible_hits":"2",},
{"lineNum":"  223","line":"            switch (self.code[self.index]) {","class":"linePartCov","hits":"4","order":"26","possible_hits":"5",},
{"lineNum":"  224","line":"                0 => break :nextLoop,","class":"lineCov","hits":"1","order":"456","possible_hits":"1",},
{"lineNum":"  225","line":"                \' \', \'\\t\', \'\\r\' => {"},
{"lineNum":"  226","line":"                    self.index += 1;","class":"linePartCov","hits":"1","order":"556","possible_hits":"2",},
{"lineNum":"  227","line":"                    self.csr.ch += 1;","class":"lineCov","hits":"1","order":"557","possible_hits":"1",},
{"lineNum":"  228","line":"                },"},
{"lineNum":"  229","line":"                \'\\n\' => {"},
{"lineNum":"  230","line":"                    self.index += 1;","class":"linePartCov","hits":"1","order":"558","possible_hits":"2",},
{"lineNum":"  231","line":"                    self.csr.ln += 1;","class":"lineCov","hits":"1","order":"559","possible_hits":"1",},
{"lineNum":"  232","line":"                    self.csr.ch = 1;","class":"lineCov","hits":"1","order":"560","possible_hits":"1",},
{"lineNum":"  233","line":"                },"},
{"lineNum":"  234","line":"                \'a\'...\'z\', \'A\'...\'Z\', \'_\' => return self.ident(),","class":"lineCov","hits":"2","order":"27","possible_hits":"2",},
{"lineNum":"  235","line":"                \'0\'...\'9\' => return lexNumber(self),","class":"lineCov","hits":"1","order":"455","possible_hits":"1",},
{"lineNum":"  236","line":"                \'\\\'\', \'\"\', \'`\' => return self.string(),","class":"lineCov","hits":"1","order":"631","possible_hits":"1",},
{"lineNum":"  237","line":"                \'{\' => return self.atom(Token.Type.LBrace),","class":"lineCov","hits":"1","order":"461","possible_hits":"1",},
{"lineNum":"  238","line":"                \'}\' => return self.atom(Token.Type.RBrace),","class":"lineCov","hits":"1","order":"3135","possible_hits":"1",},
{"lineNum":"  239","line":"                \'[\' => return self.atom(Token.Type.LBrack),","class":"lineCov","hits":"1","order":"3311","possible_hits":"1",},
{"lineNum":"  240","line":"                \']\' => return self.atom(Token.Type.RBrack),","class":"lineCov","hits":"1","order":"3331","possible_hits":"1",},
{"lineNum":"  241","line":"                \'(\' => return self.atom(Token.Type.LParen),","class":"lineCov","hits":"1","order":"3226","possible_hits":"1",},
{"lineNum":"  242","line":"                \')\' => return self.atom(Token.Type.RParen),","class":"lineCov","hits":"1","order":"3261","possible_hits":"1",},
{"lineNum":"  243","line":"                \',\' => return self.atom(Token.Type.Comma),","class":"lineCov","hits":"1","order":"3321","possible_hits":"1",},
{"lineNum":"  244","line":"                \':\' => return self.atom(Token.Type.Colon),","class":"lineCov","hits":"1","order":"3119","possible_hits":"1",},
{"lineNum":"  245","line":"                \';\' => return self.atom(Token.Type.Semi),","class":"lineCov","hits":"1","order":"692","possible_hits":"1",},
{"lineNum":"  246","line":"                \'/\' => {"},
{"lineNum":"  247","line":"                    if (self.index + 1 >= self.code.len)","class":"linePartCov","hits":"2","order":"516","possible_hits":"3",},
{"lineNum":"  248","line":"                        return self.operator();","class":"lineCov","hits":"1","order":"517","possible_hits":"1",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"                    self.index += 1;","class":"linePartCov","hits":"1","order":"522","possible_hits":"2",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"                    switch (self.code[self.index]) {","class":"lineCov","hits":"1","order":"523","possible_hits":"1",},
{"lineNum":"  253","line":"                        \'*\' => {"},
{"lineNum":"  254","line":"                            self.index += 1;","class":"linePartCov","hits":"1","order":"524","possible_hits":"2",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"                            while (self.index < self.code.len) {","class":"lineCov","hits":"3","order":"525","possible_hits":"3",},
{"lineNum":"  257","line":"                                if (self.code[self.index] == \'/\' and self.code[self.index - 1] == \'*\') {","class":"linePartCov","hits":"2","order":"526","possible_hits":"3",},
{"lineNum":"  258","line":"                                    break;","class":"lineCov","hits":"1","order":"532","possible_hits":"1",},
{"lineNum":"  259","line":"                                } else if (self.code[self.index] == \'\\n\') {","class":"linePartCov","hits":"3","order":"527","possible_hits":"4",},
{"lineNum":"  260","line":"                                    self.csr.ln += 1;","class":"linePartCov","hits":"1","order":"530","possible_hits":"2",},
{"lineNum":"  261","line":"                                    self.csr.ch = 1;","class":"lineCov","hits":"1","order":"531","possible_hits":"1",},
{"lineNum":"  262","line":"                                }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"                                self.index += 1;","class":"linePartCov","hits":"1","order":"528","possible_hits":"2",},
{"lineNum":"  265","line":"                                self.csr.ch += 1;","class":"lineCov","hits":"1","order":"529","possible_hits":"1",},
{"lineNum":"  266","line":"                            }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"                            self.index += 1;","class":"linePartCov","hits":"1","order":"533","possible_hits":"2",},
{"lineNum":"  269","line":"                            continue :nextLoop;","class":"lineCov","hits":"1","order":"534","possible_hits":"1",},
{"lineNum":"  270","line":"                        },"},
{"lineNum":"  271","line":"                        \'/\' => {"},
{"lineNum":"  272","line":"                            self.index += 1;","class":"linePartCov","hits":"1","order":"541","possible_hits":"2",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"                            while (self.index < self.code.len) {","class":"lineCov","hits":"3","order":"542","possible_hits":"3",},
{"lineNum":"  275","line":"                                if (self.code[self.index] == \'\\n\')","class":"linePartCov","hits":"2","order":"543","possible_hits":"3",},
{"lineNum":"  276","line":"                                    break;","class":"lineCov","hits":"1","order":"545","possible_hits":"1",},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"                                self.index += 1;","class":"linePartCov","hits":"1","order":"544","possible_hits":"2",},
{"lineNum":"  279","line":"                            }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"                            self.index += 1;","class":"linePartCov","hits":"1","order":"546","possible_hits":"2",},
{"lineNum":"  282","line":"                            self.csr.ln += 1;","class":"lineCov","hits":"1","order":"547","possible_hits":"1",},
{"lineNum":"  283","line":"                            self.csr.ch = 1;","class":"lineCov","hits":"1","order":"548","possible_hits":"1",},
{"lineNum":"  284","line":"                            continue :nextLoop;","class":"lineCov","hits":"1","order":"549","possible_hits":"1",},
{"lineNum":"  285","line":"                        },"},
{"lineNum":"  286","line":"                        else => {"},
{"lineNum":"  287","line":"                            self.index -= 1;","class":"linePartCov","hits":"1","order":"3727","possible_hits":"2",},
{"lineNum":"  288","line":"                            return self.operator();","class":"lineCov","hits":"1","order":"3728","possible_hits":"1",},
{"lineNum":"  289","line":"                        },"},
{"lineNum":"  290","line":"                    }"},
{"lineNum":"  291","line":"                },"},
{"lineNum":"  292","line":"                \'.\',"},
{"lineNum":"  293","line":"                \'=\',"},
{"lineNum":"  294","line":"                \'+\',"},
{"lineNum":"  295","line":"                \'-\',"},
{"lineNum":"  296","line":"                \'*\',"},
{"lineNum":"  297","line":"                \'%\',"},
{"lineNum":"  298","line":"                \'!\',"},
{"lineNum":"  299","line":"                \'>\',"},
{"lineNum":"  300","line":"                \'<\',"},
{"lineNum":"  301","line":"                \'&\',"},
{"lineNum":"  302","line":"                \'|\',"},
{"lineNum":"  303","line":"                \'~\',"},
{"lineNum":"  304","line":"                \'^\',"},
{"lineNum":"  305","line":"                \'?\',"},
{"lineNum":"  306","line":"                => return self.operator(),","class":"lineCov","hits":"1","order":"471","possible_hits":"1",},
{"lineNum":"  307","line":"                else => return self.atomData(Token.Type.Invalid),","class":"lineCov","hits":"1","order":"567","possible_hits":"1",},
{"lineNum":"  308","line":"            }"},
{"lineNum":"  309","line":"        }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"        return self.atom(Token.Type.EOF);","class":"lineCov","hits":"1","order":"446","possible_hits":"1",},
{"lineNum":"  312","line":"    }"},
{"lineNum":"  313","line":"};"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"test \"can classify keywords\" {","class":"lineCov","hits":"2","order":"411","possible_hits":"2",},
{"lineNum":"  316","line":"    try expectEqual(Token.Type.Ident, getIdentTokenType(\"not_a_keyword\"));","class":"lineCov","hits":"1","order":"412","possible_hits":"1",},
{"lineNum":"  317","line":"    try expectEqual(Token.Type.Class, getIdentTokenType(\"class\"));","class":"lineCov","hits":"1","order":"413","possible_hits":"1",},
{"lineNum":"  318","line":"    try expectEqual(Token.Type.True, getIdentTokenType(\"true\"));","class":"lineCov","hits":"1","order":"414","possible_hits":"1",},
{"lineNum":"  319","line":"}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"test \"can classify identifier characters\" {","class":"lineCov","hits":"2","order":"415","possible_hits":"2",},
{"lineNum":"  322","line":"    var c: u8 = \'a\';","class":"lineCov","hits":"1","order":"416","possible_hits":"1",},
{"lineNum":"  323","line":"    while (c <= \'z\') : (c += 1) {","class":"linePartCov","hits":"2","order":"417","possible_hits":"3",},
{"lineNum":"  324","line":"        try expect(isIdent0(c));","class":"lineCov","hits":"1","order":"418","possible_hits":"1",},
{"lineNum":"  325","line":"        try expect(isIdent(c));","class":"lineCov","hits":"1","order":"419","possible_hits":"1",},
{"lineNum":"  326","line":"    }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    c = \'A\';","class":"lineCov","hits":"1","order":"420","possible_hits":"1",},
{"lineNum":"  329","line":"    while (c <= \'Z\') : (c += 1) {","class":"linePartCov","hits":"2","order":"421","possible_hits":"3",},
{"lineNum":"  330","line":"        try expect(isIdent0(c));","class":"lineCov","hits":"1","order":"422","possible_hits":"1",},
{"lineNum":"  331","line":"        try expect(isIdent(c));","class":"lineCov","hits":"1","order":"423","possible_hits":"1",},
{"lineNum":"  332","line":"    }"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    c = \'0\';","class":"lineCov","hits":"1","order":"424","possible_hits":"1",},
{"lineNum":"  335","line":"    while (c <= \'9\') : (c += 1) {","class":"linePartCov","hits":"2","order":"425","possible_hits":"3",},
{"lineNum":"  336","line":"        try expect(!isIdent0(c));","class":"lineCov","hits":"1","order":"426","possible_hits":"1",},
{"lineNum":"  337","line":"        try expect(isIdent(c));","class":"lineCov","hits":"1","order":"427","possible_hits":"1",},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    try expect(isIdent0(\'_\'));","class":"lineCov","hits":"1","order":"428","possible_hits":"1",},
{"lineNum":"  341","line":"    try expect(isIdent(\'_\'));","class":"lineCov","hits":"1","order":"429","possible_hits":"1",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    try expect(isIdent0(\'$\'));","class":"lineCov","hits":"1","order":"430","possible_hits":"1",},
{"lineNum":"  344","line":"    try expect(isIdent(\'$\'));","class":"lineCov","hits":"1","order":"431","possible_hits":"1",},
{"lineNum":"  345","line":"}"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"test \"can classify integer characters\" {","class":"lineCov","hits":"2","order":"432","possible_hits":"2",},
{"lineNum":"  348","line":"    var c: u8 = \'0\';","class":"lineCov","hits":"1","order":"433","possible_hits":"1",},
{"lineNum":"  349","line":"    while (c <= \'9\') : (c += 1) {","class":"linePartCov","hits":"2","order":"434","possible_hits":"3",},
{"lineNum":"  350","line":"        try expect(isNum(c));","class":"lineCov","hits":"1","order":"435","possible_hits":"1",},
{"lineNum":"  351","line":"    }"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"test \"lexer can be initialized\" {","class":"lineCov","hits":"2","order":"436","possible_hits":"2",},
{"lineNum":"  355","line":"    const code: []const u8 = \"some sample code\";"},
{"lineNum":"  356","line":"    const lexer = Lexer.new(code);","class":"lineCov","hits":"1","order":"437","possible_hits":"1",},
{"lineNum":"  357","line":"    try expectEqual(code, lexer.code);","class":"lineCov","hits":"1","order":"438","possible_hits":"1",},
{"lineNum":"  358","line":"    try expectEqual(@intCast(u64, 0), lexer.index);","class":"lineCov","hits":"1","order":"439","possible_hits":"1",},
{"lineNum":"  359","line":"    try expectEqual(@intCast(u64, 1), lexer.csr.ln);","class":"lineCov","hits":"1","order":"440","possible_hits":"1",},
{"lineNum":"  360","line":"    try expectEqual(@intCast(u64, 1), lexer.csr.ch);","class":"lineCov","hits":"1","order":"441","possible_hits":"1",},
{"lineNum":"  361","line":"    try expectEqual(Token.Type.Invalid, lexer.token.ty);","class":"lineCov","hits":"1","order":"442","possible_hits":"1",},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"test \"lexer can detect EOF\" {","class":"lineCov","hits":"2","order":"443","possible_hits":"2",},
{"lineNum":"  365","line":"    const code = \"\";"},
{"lineNum":"  366","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"444","possible_hits":"1",},
{"lineNum":"  367","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"445","possible_hits":"1",},
{"lineNum":"  368","line":"    try expectEqual(Token.Type.EOF, tkn.ty);","class":"lineCov","hits":"1","order":"452","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    const nullTerminated = \"\\x00 this is never lexed\";"},
{"lineNum":"  371","line":"    lexer = Lexer.new(nullTerminated);","class":"lineCov","hits":"1","order":"453","possible_hits":"1",},
{"lineNum":"  372","line":"    const tkn2 = lexer.next();","class":"lineCov","hits":"1","order":"454","possible_hits":"1",},
{"lineNum":"  373","line":"    try expectEqual(Token.Type.EOF, tkn2.ty);","class":"lineCov","hits":"1","order":"457","possible_hits":"1",},
{"lineNum":"  374","line":"}"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"test \"lexer can lex simple atoms\" {","class":"lineCov","hits":"2","order":"458","possible_hits":"2",},
{"lineNum":"  377","line":"    const code = \"{\";"},
{"lineNum":"  378","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"459","possible_hits":"1",},
{"lineNum":"  379","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"460","possible_hits":"1",},
{"lineNum":"  380","line":"    try expectEqual(Token.Type.LBrace, tkn.ty);","class":"lineCov","hits":"1","order":"462","possible_hits":"1",},
{"lineNum":"  381","line":"    try expectEqual(@intCast(u64, 1), tkn.csr.ln);","class":"lineCov","hits":"1","order":"463","possible_hits":"1",},
{"lineNum":"  382","line":"    try expectEqual(@intCast(u64, 1), tkn.csr.ch);","class":"lineCov","hits":"1","order":"464","possible_hits":"1",},
{"lineNum":"  383","line":"    try expectEqual(@intCast(u64, 1), lexer.csr.ln);","class":"lineCov","hits":"1","order":"465","possible_hits":"1",},
{"lineNum":"  384","line":"    try expectEqual(@intCast(u64, 2), lexer.csr.ch);","class":"lineCov","hits":"1","order":"466","possible_hits":"1",},
{"lineNum":"  385","line":"    try expectEqual(@intCast(u64, 1), lexer.index);","class":"lineCov","hits":"1","order":"467","possible_hits":"1",},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"test \"lexer can lex operators\" {","class":"lineCov","hits":"2","order":"468","possible_hits":"2",},
{"lineNum":"  389","line":"    const code = \"++\";"},
{"lineNum":"  390","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"469","possible_hits":"1",},
{"lineNum":"  391","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"470","possible_hits":"1",},
{"lineNum":"  392","line":"    try expectEqual(Token.Type.Inc, tkn.ty);","class":"lineCov","hits":"1","order":"494","possible_hits":"1",},
{"lineNum":"  393","line":"    try expectEqual(@intCast(u64, 1), tkn.csr.ln);","class":"lineCov","hits":"1","order":"495","possible_hits":"1",},
{"lineNum":"  394","line":"    try expectEqual(@intCast(u64, 1), tkn.csr.ch);","class":"lineCov","hits":"1","order":"496","possible_hits":"1",},
{"lineNum":"  395","line":"    try expectEqual(@intCast(u64, 1), lexer.csr.ln);","class":"lineCov","hits":"1","order":"497","possible_hits":"1",},
{"lineNum":"  396","line":"    try expectEqual(@intCast(u64, 3), lexer.csr.ch);","class":"lineCov","hits":"1","order":"498","possible_hits":"1",},
{"lineNum":"  397","line":"    try expectEqual(@intCast(u64, 2), lexer.index);","class":"lineCov","hits":"1","order":"499","possible_hits":"1",},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    lexer.code = \"c\";","class":"lineCov","hits":"1","order":"500","possible_hits":"1",},
{"lineNum":"  400","line":"    lexer.index = 0;","class":"lineCov","hits":"1","order":"501","possible_hits":"1",},
{"lineNum":"  401","line":"    const inv = lexer.operator();","class":"lineCov","hits":"1","order":"502","possible_hits":"1",},
{"lineNum":"  402","line":"    try expectEqual(Token.Type.Invalid, inv.ty);","class":"lineCov","hits":"1","order":"512","possible_hits":"1",},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"test \"lexer can lex divide\" {","class":"lineCov","hits":"2","order":"513","possible_hits":"2",},
{"lineNum":"  406","line":"    const code = \"/\";"},
{"lineNum":"  407","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"514","possible_hits":"1",},
{"lineNum":"  408","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"515","possible_hits":"1",},
{"lineNum":"  409","line":"    try expectEqual(Token.Type.Div, tkn.ty);","class":"lineCov","hits":"1","order":"518","possible_hits":"1",},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"test \"lexer can skip C-style comments\" {","class":"lineCov","hits":"2","order":"519","possible_hits":"2",},
{"lineNum":"  413","line":"    const code = \"/* A \\ncomment*/.\";"},
{"lineNum":"  414","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"520","possible_hits":"1",},
{"lineNum":"  415","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"521","possible_hits":"1",},
{"lineNum":"  416","line":"    try expectEqual(Token.Type.Dot, tkn.ty);","class":"lineCov","hits":"1","order":"535","possible_hits":"1",},
{"lineNum":"  417","line":"    try expectEqual(@intCast(u64, 2), tkn.csr.ln);","class":"lineCov","hits":"1","order":"536","possible_hits":"1",},
{"lineNum":"  418","line":"    try expectEqual(@intCast(u64, 10), tkn.csr.ch);","class":"lineCov","hits":"1","order":"537","possible_hits":"1",},
{"lineNum":"  419","line":"}"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"test \"lexer can skip C++-style comments\" {","class":"lineCov","hits":"2","order":"538","possible_hits":"2",},
{"lineNum":"  422","line":"    const code = \"// A comment\\n.\";"},
{"lineNum":"  423","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"539","possible_hits":"1",},
{"lineNum":"  424","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"540","possible_hits":"1",},
{"lineNum":"  425","line":"    try expectEqual(Token.Type.Dot, tkn.ty);","class":"lineCov","hits":"1","order":"550","possible_hits":"1",},
{"lineNum":"  426","line":"    try expectEqual(@intCast(u64, 2), tkn.csr.ln);","class":"lineCov","hits":"1","order":"551","possible_hits":"1",},
{"lineNum":"  427","line":"    try expectEqual(@intCast(u64, 1), tkn.csr.ch);","class":"lineCov","hits":"1","order":"552","possible_hits":"1",},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"test \"lexer can skip whitespace\" {","class":"lineCov","hits":"2","order":"553","possible_hits":"2",},
{"lineNum":"  431","line":"    const code = \" \\t\\r\\n .\";"},
{"lineNum":"  432","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"554","possible_hits":"1",},
{"lineNum":"  433","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"555","possible_hits":"1",},
{"lineNum":"  434","line":"    try expectEqual(Token.Type.Dot, tkn.ty);","class":"lineCov","hits":"1","order":"561","possible_hits":"1",},
{"lineNum":"  435","line":"    try expectEqual(@intCast(u64, 2), tkn.csr.ln);","class":"lineCov","hits":"1","order":"562","possible_hits":"1",},
{"lineNum":"  436","line":"    try expectEqual(@intCast(u64, 2), tkn.csr.ch);","class":"lineCov","hits":"1","order":"563","possible_hits":"1",},
{"lineNum":"  437","line":"}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"test \"lexer can lex invalid characters\" {","class":"lineCov","hits":"2","order":"564","possible_hits":"2",},
{"lineNum":"  440","line":"    const code = \"£\";"},
{"lineNum":"  441","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"565","possible_hits":"1",},
{"lineNum":"  442","line":"    const tkn = lexer.next();","class":"lineCov","hits":"1","order":"566","possible_hits":"1",},
{"lineNum":"  443","line":"    const expectedCode: []const u8 = code[0..1];"},
{"lineNum":"  444","line":"    try expectEqual(Token.Type.Invalid, tkn.ty);","class":"lineCov","hits":"1","order":"568","possible_hits":"1",},
{"lineNum":"  445","line":"    try expectEqual(expectedCode, tkn.data);","class":"lineCov","hits":"1","order":"569","possible_hits":"1",},
{"lineNum":"  446","line":"}"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"test \"lexer can lex identifiers\" {","class":"lineCov","hits":"2","order":"570","possible_hits":"2",},
{"lineNum":"  449","line":"    const code = \" anIdent0_ . \";"},
{"lineNum":"  450","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"571","possible_hits":"1",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    const ident = lexer.next();","class":"lineCov","hits":"1","order":"572","possible_hits":"1",},
{"lineNum":"  453","line":"    try expectEqual(Token.Type.Ident, ident.ty);","class":"lineCov","hits":"1","order":"573","possible_hits":"1",},
{"lineNum":"  454","line":"    try expectEqualStrings(\"anIdent0_\", ident.data);","class":"lineCov","hits":"1","order":"574","possible_hits":"1",},
{"lineNum":"  455","line":"    try expectEqual(@intCast(u32, 1), ident.csr.ln);","class":"lineCov","hits":"1","order":"575","possible_hits":"1",},
{"lineNum":"  456","line":"    try expectEqual(@intCast(u32, 2), ident.csr.ch);","class":"lineCov","hits":"1","order":"576","possible_hits":"1",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    const dot = lexer.next();","class":"lineCov","hits":"1","order":"577","possible_hits":"1",},
{"lineNum":"  459","line":"    try expectEqual(Token.Type.Dot, dot.ty);","class":"lineCov","hits":"1","order":"579","possible_hits":"1",},
{"lineNum":"  460","line":"    try expectEqual(@intCast(u32, 1), dot.csr.ln);","class":"lineCov","hits":"1","order":"580","possible_hits":"1",},
{"lineNum":"  461","line":"    try expectEqual(@intCast(u32, 12), dot.csr.ch);","class":"lineCov","hits":"1","order":"581","possible_hits":"1",},
{"lineNum":"  462","line":"}"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"test \"lexer can lex keywords\" {","class":"lineCov","hits":"2","order":"582","possible_hits":"2",},
{"lineNum":"  465","line":"    const code = \" null . \";"},
{"lineNum":"  466","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"583","possible_hits":"1",},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"    const ident = lexer.next();","class":"lineCov","hits":"1","order":"584","possible_hits":"1",},
{"lineNum":"  469","line":"    try expectEqual(Token.Type.Null, ident.ty);","class":"lineCov","hits":"1","order":"585","possible_hits":"1",},
{"lineNum":"  470","line":"    try expectEqualStrings(\"null\", ident.data);","class":"lineCov","hits":"1","order":"586","possible_hits":"1",},
{"lineNum":"  471","line":"    try expectEqual(@intCast(u32, 1), ident.csr.ln);","class":"lineCov","hits":"1","order":"587","possible_hits":"1",},
{"lineNum":"  472","line":"    try expectEqual(@intCast(u32, 2), ident.csr.ch);","class":"lineCov","hits":"1","order":"588","possible_hits":"1",},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    const dot = lexer.next();","class":"lineCov","hits":"1","order":"589","possible_hits":"1",},
{"lineNum":"  475","line":"    try expectEqual(Token.Type.Dot, dot.ty);","class":"lineCov","hits":"1","order":"590","possible_hits":"1",},
{"lineNum":"  476","line":"    try expectEqual(@intCast(u32, 1), dot.csr.ln);","class":"lineCov","hits":"1","order":"591","possible_hits":"1",},
{"lineNum":"  477","line":"    try expectEqual(@intCast(u32, 7), dot.csr.ch);","class":"lineCov","hits":"1","order":"592","possible_hits":"1",},
{"lineNum":"  478","line":"}"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"test \"lexer can lex integers\" {","class":"lineCov","hits":"2","order":"593","possible_hits":"2",},
{"lineNum":"  481","line":"    const code = \" 123456 . \";"},
{"lineNum":"  482","line":"    var lexer = Lexer.new(code[0..]);","class":"lineCov","hits":"1","order":"594","possible_hits":"1",},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    const ident = lexer.next();","class":"lineCov","hits":"1","order":"595","possible_hits":"1",},
{"lineNum":"  485","line":"    try expectEqual(Token.Type.Int, ident.ty);","class":"lineCov","hits":"1","order":"618","possible_hits":"1",},
{"lineNum":"  486","line":"    try expectEqualStrings(\"123456\", ident.data);","class":"lineCov","hits":"1","order":"619","possible_hits":"1",},
{"lineNum":"  487","line":"    try expectEqual(@intCast(u32, 1), ident.csr.ln);","class":"lineCov","hits":"1","order":"620","possible_hits":"1",},
{"lineNum":"  488","line":"    try expectEqual(@intCast(u32, 2), ident.csr.ch);","class":"lineCov","hits":"1","order":"621","possible_hits":"1",},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"    const dot = lexer.next();","class":"lineCov","hits":"1","order":"622","possible_hits":"1",},
{"lineNum":"  491","line":"    try expectEqual(Token.Type.Dot, dot.ty);","class":"lineCov","hits":"1","order":"623","possible_hits":"1",},
{"lineNum":"  492","line":"    try expectEqual(@intCast(u32, 1), dot.csr.ln);","class":"lineCov","hits":"1","order":"624","possible_hits":"1",},
{"lineNum":"  493","line":"    try expectEqual(@intCast(u32, 9), dot.csr.ch);","class":"lineCov","hits":"1","order":"625","possible_hits":"1",},
{"lineNum":"  494","line":"}"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"test \"lexer can lex strings\" {","class":"lineCov","hits":"2","order":"626","possible_hits":"2",},
{"lineNum":"  497","line":"    const StringTestCase = struct {"},
{"lineNum":"  498","line":"        code: []const u8,"},
{"lineNum":"  499","line":"        expectedType: Token.Type = .String,"},
{"lineNum":"  500","line":"        dotCursor: ?Cursor = null,"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"        pub fn run(comptime self: @This()) anyerror!void {","class":"lineCov","hits":"14","order":"628","possible_hits":"14",},
{"lineNum":"  503","line":"            const input = \" \" ++ self.code ++ \" . \";"},
{"lineNum":"  504","line":"            var lexer = Lexer.new(input[0..]);","class":"lineCov","hits":"7","order":"629","possible_hits":"7",},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"            const str = lexer.next();","class":"lineCov","hits":"7","order":"630","possible_hits":"7",},
{"lineNum":"  507","line":"            try expectEqual(self.expectedType, str.ty);","class":"lineCov","hits":"7","order":"656","possible_hits":"7",},
{"lineNum":"  508","line":"            try expectEqualStrings(self.code, str.data);","class":"lineCov","hits":"7","order":"657","possible_hits":"7",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"            const dot = lexer.next();","class":"lineCov","hits":"7","order":"658","possible_hits":"7",},
{"lineNum":"  511","line":"            try expectEqual(Token.Type.Dot, dot.ty);","class":"lineCov","hits":"7","order":"659","possible_hits":"7",},
{"lineNum":"  512","line":"            if (self.dotCursor) |csr| {"},
{"lineNum":"  513","line":"                try expectEqual(csr, dot.csr);","class":"lineCov","hits":"1","order":"674","possible_hits":"1",},
{"lineNum":"  514","line":"            } else {"},
{"lineNum":"  515","line":"                try expectEqual(@intCast(u32, 1), dot.csr.ln);","class":"lineCov","hits":"6","order":"660","possible_hits":"6",},
{"lineNum":"  516","line":"                try expectEqual(@intCast(u32, self.code.len + 3), dot.csr.ch);","class":"lineCov","hits":"6","order":"661","possible_hits":"6",},
{"lineNum":"  517","line":"            }"},
{"lineNum":"  518","line":"        }"},
{"lineNum":"  519","line":"    };"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    try (StringTestCase{ .code = \"\\\"hello world\\\"\" }).run();","class":"lineCov","hits":"1","order":"627","possible_hits":"1",},
{"lineNum":"  522","line":"    try (StringTestCase{ .code = \"\'hello world\'\" }).run();","class":"lineCov","hits":"1","order":"662","possible_hits":"1",},
{"lineNum":"  523","line":"    try (StringTestCase{ .code = \"\\\"\\\"\" }).run();","class":"lineCov","hits":"1","order":"663","possible_hits":"1",},
{"lineNum":"  524","line":"    try (StringTestCase{ .code = \"\\\"hello\\\\\\\"world\\\"\" }).run();","class":"lineCov","hits":"1","order":"664","possible_hits":"1",},
{"lineNum":"  525","line":"    try (StringTestCase{ .code = \"\\\"hello\\\\\\\\\\\"\" }).run();","class":"lineCov","hits":"1","order":"669","possible_hits":"1",},
{"lineNum":"  526","line":"    try (StringTestCase{ .code = \"\\\"hello\\\\\\\\\\\\\\\"world\\\"\" }).run();","class":"lineCov","hits":"1","order":"670","possible_hits":"1",},
{"lineNum":"  527","line":"    try (StringTestCase{","class":"lineCov","hits":"1","order":"675","possible_hits":"1",},
{"lineNum":"  528","line":"        .code = \"`hello\\nworld`\","},
{"lineNum":"  529","line":"        .expectedType = .Template,"},
{"lineNum":"  530","line":"        .dotCursor = comptime Cursor.new(2, 8),"},
{"lineNum":"  531","line":"    }).run();","class":"lineCov","hits":"1","order":"671","possible_hits":"1",},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"    var lexer = Lexer.new(\"\'an unterminated string\");","class":"lineCov","hits":"1","order":"676","possible_hits":"1",},
{"lineNum":"  534","line":"    const str = lexer.next();","class":"lineCov","hits":"1","order":"677","possible_hits":"1",},
{"lineNum":"  535","line":"    try expectEqual(Token.Type.Invalid, str.ty);","class":"lineCov","hits":"1","order":"680","possible_hits":"1",},
{"lineNum":"  536","line":"}"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"test \"lexer can be saved and restored\" {","class":"lineCov","hits":"2","order":"681","possible_hits":"2",},
{"lineNum":"  539","line":"    const code: []const u8 = \". ; &\";"},
{"lineNum":"  540","line":"    var lexer = Lexer.new(code);","class":"lineCov","hits":"1","order":"682","possible_hits":"1",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    var tkn = lexer.next();","class":"lineCov","hits":"1","order":"683","possible_hits":"1",},
{"lineNum":"  543","line":"    try expectEqual(Token.Type.Dot, tkn.ty);","class":"lineCov","hits":"1","order":"684","possible_hits":"1",},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    const ctx = lexer.save();","class":"lineCov","hits":"1","order":"685","possible_hits":"1",},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    tkn = lexer.next();","class":"lineCov","hits":"1","order":"691","possible_hits":"1",},
{"lineNum":"  548","line":"    try expectEqual(Token.Type.Semi, tkn.ty);","class":"lineCov","hits":"1","order":"693","possible_hits":"1",},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"    tkn = lexer.next();","class":"lineCov","hits":"1","order":"694","possible_hits":"1",},
{"lineNum":"  551","line":"    try expectEqual(Token.Type.BitAnd, tkn.ty);","class":"lineCov","hits":"1","order":"695","possible_hits":"1",},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    lexer.restore(ctx);","class":"lineCov","hits":"1","order":"696","possible_hits":"1",},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    tkn = lexer.next();","class":"lineCov","hits":"1","order":"701","possible_hits":"1",},
{"lineNum":"  556","line":"    try expectEqual(Token.Type.Semi, tkn.ty);","class":"lineCov","hits":"1","order":"702","possible_hits":"1",},
{"lineNum":"  557","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-24 08:01:28", "instrumented" : 288, "covered" : 288,};
var merged_data = [];
