var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Token = @import(\"../common/token.zig\").Token;"},
{"lineNum":"   26","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   27","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   28","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   29","line":"const Node = node.Node;"},
{"lineNum":"   30","line":"const NodeType = node.NodeType;"},
{"lineNum":"   31","line":"const makeNode = node.makeNode;"},
{"lineNum":"   32","line":"const Decl = node.Decl;"},
{"lineNum":"   33","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   34","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   35","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   36","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   37","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"const StmtTestCase = struct {"},
{"lineNum":"   40","line":"    code: []const u8,"},
{"lineNum":"   41","line":"    check: fn (value: Node) anyerror!void,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    pub fn run(comptime self: @This()) !void {","class":"lineCov","hits":"75","order":"2602","possible_hits":"75",},
{"lineNum":"   44","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"25","order":"2603","possible_hits":"25",},
{"lineNum":"   45","line":"        defer arena.deinit();","class":"linePartCov","hits":"25","order":"2664","possible_hits":"175",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"25","order":"2604","possible_hits":"25",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"25","order":"2605","possible_hits":"25",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        const res = parser.next();","class":"lineCov","hits":"25","order":"2606","possible_hits":"25",},
{"lineNum":"   52","line":"        try res.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"25","order":"2650","possible_hits":"50",},
{"lineNum":"   53","line":"        try expect(res.isSuccess());","class":"linePartCov","hits":"25","order":"2651","possible_hits":"50",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        try self.check(res.Success);","class":"linePartCov","hits":"50","order":"2652","possible_hits":"75",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        const eof = parser.next();","class":"lineCov","hits":"25","order":"2660","possible_hits":"25",},
{"lineNum":"   58","line":"        try eof.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"25","order":"2661","possible_hits":"50",},
{"lineNum":"   59","line":"        try expect(eof.isSuccess());","class":"linePartCov","hits":"25","order":"2662","possible_hits":"50",},
{"lineNum":"   60","line":"        try expectEqual(NodeType.EOF, eof.Success.getType());","class":"linePartCov","hits":"50","order":"2663","possible_hits":"75",},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":"};"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"fn eatSemi(psr: *TsParser) void {","class":"lineCov","hits":"2","order":"1876","possible_hits":"2",},
{"lineNum":"   65","line":"    if (psr.lexer.token.ty == TokenType.Semi)","class":"lineCov","hits":"2","order":"1877","possible_hits":"2",},
{"lineNum":"   66","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1878","possible_hits":"1",},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"fn parseDecl(","class":"lineCov","hits":"3","order":"1800","possible_hits":"3",},
{"lineNum":"   70","line":"    psr: *TsParser,"},
{"lineNum":"   71","line":"    comptime scoping: Decl.Scoping,"},
{"lineNum":"   72","line":") ParseResult {"},
{"lineNum":"   73","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"3","order":"1801","possible_hits":"3",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"3","order":"1802","possible_hits":"3",},
{"lineNum":"   76","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"6","order":"1803","possible_hits":"6",},
{"lineNum":"   77","line":"        return ParseResult.expected(TokenType.Ident, name);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    var declTy: ?Node = null;","class":"lineCov","hits":"3","order":"1804","possible_hits":"3",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    var tkn = psr.lexer.next();","class":"lineCov","hits":"3","order":"1805","possible_hits":"3",},
{"lineNum":"   82","line":"    if (tkn.ty == .Colon) {","class":"lineCov","hits":"9","order":"1806","possible_hits":"9",},
{"lineNum":"   83","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"3","order":"2578","possible_hits":"3",},
{"lineNum":"   84","line":"        const tyRes = psr.parseType();","class":"lineCov","hits":"3","order":"2579","possible_hits":"3",},
{"lineNum":"   85","line":"        if (!tyRes.isSuccess())","class":"lineCov","hits":"6","order":"2580","possible_hits":"6",},
{"lineNum":"   86","line":"            return tyRes;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   87","line":"        declTy = tyRes.Success;","class":"linePartCov","hits":"6","order":"2581","possible_hits":"9",},
{"lineNum":"   88","line":"        tkn = psr.lexer.token;","class":"lineCov","hits":"3","order":"2582","possible_hits":"3",},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    var expr: ?Node = null;","class":"lineCov","hits":"3","order":"1807","possible_hits":"3",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    if (tkn.ty == TokenType.Assign) {","class":"lineCov","hits":"9","order":"1808","possible_hits":"9",},
{"lineNum":"   94","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"3","order":"1809","possible_hits":"3",},
{"lineNum":"   95","line":"        const exprRes = psr.parseExpr();","class":"lineCov","hits":"3","order":"1811","possible_hits":"3",},
{"lineNum":"   96","line":"        if (!exprRes.isSuccess())","class":"lineCov","hits":"6","order":"1872","possible_hits":"6",},
{"lineNum":"   97","line":"            return exprRes;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   98","line":"        expr = exprRes.Success;","class":"linePartCov","hits":"6","order":"1873","possible_hits":"9",},
{"lineNum":"   99","line":"        tkn = psr.lexer.token;","class":"lineCov","hits":"3","order":"1874","possible_hits":"3",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    eatSemi(psr);","class":"lineCov","hits":"3","order":"1875","possible_hits":"3",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    const decl = Decl.new(scoping, name.data, declTy, expr);","class":"lineCov","hits":"3","order":"1879","possible_hits":"3",},
{"lineNum":"  105","line":"    const result = makeNode(psr.getAllocator(), csr, .Decl, decl);","class":"lineCov","hits":"3","order":"1880","possible_hits":"3",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    return ParseResult.success(result);","class":"lineCov","hits":"3","order":"1881","possible_hits":"3",},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"test \"can parse var, let and const declarations\" {","class":"lineCov","hits":"3","order":"2548","possible_hits":"3",},
{"lineNum":"  111","line":"    const Runner = struct {"},
{"lineNum":"  112","line":"        code: []const u8,"},
{"lineNum":"  113","line":"        expectedScoping: Decl.Scoping,"},
{"lineNum":"  114","line":"        expectedDeclType: ?Node,"},
{"lineNum":"  115","line":"        expectedValueIdent: ?[]const u8,"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        fn run(self: @This()) !void {","class":"lineCov","hits":"3","order":"2552","possible_hits":"3",},
{"lineNum":"  118","line":"            var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2553","possible_hits":"1",},
{"lineNum":"  119","line":"            defer arena.deinit();","class":"linePartCov","hits":"1","order":"2565","possible_hits":"9",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"2554","possible_hits":"1",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"            var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"2555","possible_hits":"1",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"            const res = parser.next();","class":"lineCov","hits":"1","order":"2556","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"            try expect(res.isSuccess());","class":"linePartCov","hits":"1","order":"2557","possible_hits":"2",},
{"lineNum":"  128","line":"            try expectEqual(NodeType.Decl, res.Success.getType());","class":"linePartCov","hits":"2","order":"2558","possible_hits":"3",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"            const d = res.Success.data.Decl;","class":"linePartCov","hits":"2","order":"2559","possible_hits":"3",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"            try expectEqualStrings(\"test\", d.name);","class":"linePartCov","hits":"1","order":"2560","possible_hits":"3",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            if (self.expectedDeclType) |t| {","class":"lineCov","hits":"2","order":"2561","possible_hits":"2",},
{"lineNum":"  135","line":"                try expect(t.eql(d.ty));","class":"linePartCov","hits":"1","order":"2583","possible_hits":"2",},
{"lineNum":"  136","line":"            } else {"},
{"lineNum":"  137","line":"                try expect(d.ty == null);","class":"linePartCov","hits":"1","order":"2562","possible_hits":"2",},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"            if (self.expectedValueIdent) |i| {","class":"lineCov","hits":"2","order":"2563","possible_hits":"2",},
{"lineNum":"  141","line":"                if (d.value) |value| {","class":"lineCov","hits":"2","order":"2589","possible_hits":"2",},
{"lineNum":"  142","line":"                    try expectEqual(NodeType.Ident, value.getType());","class":"linePartCov","hits":"1","order":"2590","possible_hits":"2",},
{"lineNum":"  143","line":"                    try expectEqualStrings(i, value.data.Ident);","class":"linePartCov","hits":"2","order":"2591","possible_hits":"3",},
{"lineNum":"  144","line":"                } else {"},
{"lineNum":"  145","line":"                    std.debug.panic(\"Value should not be null\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"                }"},
{"lineNum":"  147","line":"            } else {"},
{"lineNum":"  148","line":"                try expect(d.value == null);","class":"linePartCov","hits":"1","order":"2564","possible_hits":"2",},
{"lineNum":"  149","line":"            }"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":"    };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    const numberType = makeNode(","class":"lineCov","hits":"1","order":"2550","possible_hits":"1",},
{"lineNum":"  154","line":"        std.testing.allocator,"},
{"lineNum":"  155","line":"        Cursor.new(1, 11),","class":"lineCov","hits":"1","order":"2549","possible_hits":"1",},
{"lineNum":"  156","line":"        NodeType.TypeName,"},
{"lineNum":"  157","line":"        \"number\","},
{"lineNum":"  158","line":"    );"},
{"lineNum":"  159","line":"    defer std.testing.allocator.destroy(numberType);","class":"linePartCov","hits":"1","order":"2599","possible_hits":"7",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2566","possible_hits":"2",},
{"lineNum":"  162","line":"        .code = \"var test;\","},
{"lineNum":"  163","line":"        .expectedScoping = .Var,"},
{"lineNum":"  164","line":"        .expectedDeclType = null,"},
{"lineNum":"  165","line":"        .expectedValueIdent = null,"},
{"lineNum":"  166","line":"    }).run();","class":"lineCov","hits":"1","order":"2551","possible_hits":"1",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2569","possible_hits":"2",},
{"lineNum":"  169","line":"        .code = \"let test;\","},
{"lineNum":"  170","line":"        .expectedScoping = .Let,"},
{"lineNum":"  171","line":"        .expectedDeclType = null,"},
{"lineNum":"  172","line":"        .expectedValueIdent = null,"},
{"lineNum":"  173","line":"    }).run();","class":"lineCov","hits":"1","order":"2567","possible_hits":"1",},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2572","possible_hits":"2",},
{"lineNum":"  176","line":"        .code = \"const test;\","},
{"lineNum":"  177","line":"        .expectedScoping = .Const,"},
{"lineNum":"  178","line":"        .expectedDeclType = null,"},
{"lineNum":"  179","line":"        .expectedValueIdent = null,"},
{"lineNum":"  180","line":"    }).run();","class":"lineCov","hits":"1","order":"2570","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2587","possible_hits":"2",},
{"lineNum":"  183","line":"        .code = \"var test: number;\",","class":"lineCov","hits":"1","order":"2574","possible_hits":"1",},
{"lineNum":"  184","line":"        .expectedScoping = .Var,","class":"lineCov","hits":"1","order":"2575","possible_hits":"1",},
{"lineNum":"  185","line":"        .expectedDeclType = numberType,","class":"lineCov","hits":"1","order":"2573","possible_hits":"1",},
{"lineNum":"  186","line":"        .expectedValueIdent = null,","class":"lineCov","hits":"1","order":"2576","possible_hits":"1",},
{"lineNum":"  187","line":"    }).run();","class":"lineCov","hits":"1","order":"2577","possible_hits":"1",},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2592","possible_hits":"2",},
{"lineNum":"  190","line":"        .code = \"var test = someOtherVariable;\","},
{"lineNum":"  191","line":"        .expectedScoping = .Var,"},
{"lineNum":"  192","line":"        .expectedDeclType = null,"},
{"lineNum":"  193","line":"        .expectedValueIdent = \"someOtherVariable\","},
{"lineNum":"  194","line":"    }).run();","class":"lineCov","hits":"1","order":"2588","possible_hits":"1",},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"2598","possible_hits":"2",},
{"lineNum":"  197","line":"        .code = \"var test: number = someOtherVariable;\",","class":"lineCov","hits":"1","order":"2594","possible_hits":"1",},
{"lineNum":"  198","line":"        .expectedScoping = .Var,","class":"lineCov","hits":"1","order":"2595","possible_hits":"1",},
{"lineNum":"  199","line":"        .expectedDeclType = numberType,","class":"lineCov","hits":"1","order":"2593","possible_hits":"1",},
{"lineNum":"  200","line":"        .expectedValueIdent = \"someOtherVariable\",","class":"lineCov","hits":"1","order":"2596","possible_hits":"1",},
{"lineNum":"  201","line":"    }).run();","class":"lineCov","hits":"1","order":"2597","possible_hits":"1",},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"const BranchResult = union(Type) {"},
{"lineNum":"  205","line":"    const Type = enum {"},
{"lineNum":"  206","line":"        Branch,"},
{"lineNum":"  207","line":"        ParseResult,"},
{"lineNum":"  208","line":"    };"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    Branch: node.If.Branch,"},
{"lineNum":"  211","line":"    ParseResult: ParseResult,"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    pub fn getType(self: BranchResult) Type {","class":"lineCov","hits":"1","order":"2635","possible_hits":"1",},
{"lineNum":"  214","line":"        return @as(Type, self);","class":"lineCov","hits":"1","order":"2636","possible_hits":"1",},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":"};"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"fn parseIfBranch(psr: *TsParser) BranchResult {","class":"lineCov","hits":"1","order":"2617","possible_hits":"1",},
{"lineNum":"  219","line":"    if (psr.lexer.token.ty != .If)","class":"lineCov","hits":"2","order":"2618","possible_hits":"2",},
{"lineNum":"  220","line":"        return BranchResult{ .ParseResult = ParseResult.noMatch(null) };","class":"lineCov","hits":"1","order":"2641","possible_hits":"1",},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2619","possible_hits":"1",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"2620","possible_hits":"2",},
{"lineNum":"  225","line":"        return BranchResult{ .ParseResult = ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"            \"paren after \'if\'\","},
{"lineNum":"  227","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"        ) };"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2621","possible_hits":"1",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"2622","possible_hits":"1",},
{"lineNum":"  233","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"2623","possible_hits":"2",},
{"lineNum":"  234","line":"        return BranchResult{ .ParseResult = cond };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2624","possible_hits":"2",},
{"lineNum":"  237","line":"        return BranchResult{ .ParseResult = ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"            \"paren after if condition\","},
{"lineNum":"  239","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        ) };"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2625","possible_hits":"1",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"2626","possible_hits":"1",},
{"lineNum":"  245","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"2630","possible_hits":"2",},
{"lineNum":"  246","line":"        return BranchResult{ .ParseResult = body };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    return BranchResult{ .Branch = node.If.Branch{","class":"lineCov","hits":"2","order":"2631","possible_hits":"2",},
{"lineNum":"  249","line":"        .cond = cond.Success,","class":"linePartCov","hits":"1","order":"2632","possible_hits":"2",},
{"lineNum":"  250","line":"        .ifTrue = body.Success,","class":"linePartCov","hits":"2","order":"2633","possible_hits":"3",},
{"lineNum":"  251","line":"    } };"},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"fn parseIf(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2608","possible_hits":"1",},
{"lineNum":"  255","line":"    std.debug.assert(psr.lexer.token.ty == .If);","class":"lineCov","hits":"1","order":"2609","possible_hits":"1",},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2610","possible_hits":"1",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    var data = node.If{","class":"lineCov","hits":"1","order":"2611","possible_hits":"1",},
{"lineNum":"  260","line":"        .branches = node.If.BranchList{},"},
{"lineNum":"  261","line":"        .elseBranch = null,"},
{"lineNum":"  262","line":"    };"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    while (true) {","class":"lineCov","hits":"2","order":"2612","possible_hits":"2",},
{"lineNum":"  265","line":"        var isElse: bool = undefined;","class":"lineCov","hits":"1","order":"2613","possible_hits":"1",},
{"lineNum":"  266","line":"        if (psr.lexer.token.ty == .Else) {","class":"lineCov","hits":"2","order":"2614","possible_hits":"2",},
{"lineNum":"  267","line":"            isElse = true;","class":"lineCov","hits":"1","order":"2668","possible_hits":"1",},
{"lineNum":"  268","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2669","possible_hits":"1",},
{"lineNum":"  269","line":"        } else {"},
{"lineNum":"  270","line":"            isElse = false;","class":"lineCov","hits":"1","order":"2615","possible_hits":"1",},
{"lineNum":"  271","line":"        }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        const branch = parseIfBranch(psr);","class":"lineCov","hits":"1","order":"2616","possible_hits":"1",},
{"lineNum":"  274","line":"        if (branch.getType() == .Branch) {","class":"lineCov","hits":"2","order":"2634","possible_hits":"2",},
{"lineNum":"  275","line":"            data.branches.append(","class":"lineCov","hits":"1","order":"2639","possible_hits":"1",},
{"lineNum":"  276","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2637","possible_hits":"1",},
{"lineNum":"  277","line":"                branch.Branch,","class":"linePartCov","hits":"2","order":"2638","possible_hits":"3",},
{"lineNum":"  278","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2640","possible_hits":"2",},
{"lineNum":"  279","line":"        } else {"},
{"lineNum":"  280","line":"            const res = branch.ParseResult;","class":"linePartCov","hits":"2","order":"2642","possible_hits":"3",},
{"lineNum":"  281","line":"            std.debug.assert(!res.isSuccess());","class":"lineCov","hits":"1","order":"2643","possible_hits":"1",},
{"lineNum":"  282","line":"            if (res.getType() == .NoMatch) {","class":"lineCov","hits":"1","order":"2644","possible_hits":"1",},
{"lineNum":"  283","line":"                if (isElse) {","class":"lineCov","hits":"1","order":"2645","possible_hits":"1",},
{"lineNum":"  284","line":"                    const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"2682","possible_hits":"1",},
{"lineNum":"  285","line":"                    switch (stmt.getType()) {","class":"linePartCov","hits":"1","order":"2683","possible_hits":"2",},
{"lineNum":"  286","line":"                        .Success => {"},
{"lineNum":"  287","line":"                            data.elseBranch = stmt.Success;","class":"linePartCov","hits":"2","order":"2684","possible_hits":"3",},
{"lineNum":"  288","line":"                            break;","class":"lineCov","hits":"1","order":"2685","possible_hits":"1",},
{"lineNum":"  289","line":"                        },"},
{"lineNum":"  290","line":"                        .Error => return stmt,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"                        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"                            \"\'if\' after \'else\'\","},
{"lineNum":"  293","line":"                            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"                        ),"},
{"lineNum":"  295","line":"                    }"},
{"lineNum":"  296","line":"                } else {"},
{"lineNum":"  297","line":"                    break;","class":"lineCov","hits":"1","order":"2646","possible_hits":"1",},
{"lineNum":"  298","line":"                }"},
{"lineNum":"  299","line":"            } else {"},
{"lineNum":"  300","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"            }"},
{"lineNum":"  302","line":"        }"},
{"lineNum":"  303","line":"    }"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2649","possible_hits":"1",},
{"lineNum":"  306","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2647","possible_hits":"1",},
{"lineNum":"  307","line":"        csr,"},
{"lineNum":"  308","line":"        .If,"},
{"lineNum":"  309","line":"        data,","class":"lineCov","hits":"1","order":"2648","possible_hits":"1",},
{"lineNum":"  310","line":"    ));"},
{"lineNum":"  311","line":"}"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"test \"can parse a simple if statement\" {","class":"lineCov","hits":"2","order":"2600","possible_hits":"2",},
{"lineNum":"  314","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2665","possible_hits":"1",},
{"lineNum":"  315","line":"        .code = \"if (a) {}\","},
{"lineNum":"  316","line":"        .check = (struct {"},
{"lineNum":"  317","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2653","possible_hits":"2",},
{"lineNum":"  318","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"2654","possible_hits":"1",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"2655","possible_hits":"3",},
{"lineNum":"  321","line":"                try expectEqual(@intCast(usize, 1), branches.len);","class":"linePartCov","hits":"1","order":"2656","possible_hits":"2",},
{"lineNum":"  322","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"2657","possible_hits":"2",},
{"lineNum":"  323","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2658","possible_hits":"2",},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"                try expect(value.data.If.elseBranch == null);","class":"lineCov","hits":"2","order":"2659","possible_hits":"2",},
{"lineNum":"  326","line":"            }"},
{"lineNum":"  327","line":"        }).check,"},
{"lineNum":"  328","line":"    }).run();","class":"lineCov","hits":"1","order":"2601","possible_hits":"1",},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"test \"can parse an if statement with an \'else if\' branch\" {","class":"lineCov","hits":"2","order":"2666","possible_hits":"2",},
{"lineNum":"  332","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2679","possible_hits":"1",},
{"lineNum":"  333","line":"        .code = \"if (a) {} else if (b) {}\","},
{"lineNum":"  334","line":"        .check = (struct {"},
{"lineNum":"  335","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2670","possible_hits":"2",},
{"lineNum":"  336","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"2671","possible_hits":"1",},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"2672","possible_hits":"3",},
{"lineNum":"  339","line":"                try expectEqual(@intCast(usize, 2), branches.len);","class":"linePartCov","hits":"1","order":"2673","possible_hits":"2",},
{"lineNum":"  340","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"2674","possible_hits":"2",},
{"lineNum":"  341","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2675","possible_hits":"2",},
{"lineNum":"  342","line":"                try expectEqual(NodeType.Ident, branches[1].cond.getType());","class":"linePartCov","hits":"1","order":"2676","possible_hits":"2",},
{"lineNum":"  343","line":"                try expectEqual(NodeType.Block, branches[1].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2677","possible_hits":"2",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"                try expect(value.data.If.elseBranch == null);","class":"lineCov","hits":"2","order":"2678","possible_hits":"2",},
{"lineNum":"  346","line":"            }"},
{"lineNum":"  347","line":"        }).check,"},
{"lineNum":"  348","line":"    }).run();","class":"lineCov","hits":"1","order":"2667","possible_hits":"1",},
{"lineNum":"  349","line":"}"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"test \"can parse an if statement with an \'else\' branch\" {","class":"lineCov","hits":"2","order":"2680","possible_hits":"2",},
{"lineNum":"  352","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2694","possible_hits":"1",},
{"lineNum":"  353","line":"        .code = \"if (a) {} else {}\","},
{"lineNum":"  354","line":"        .check = (struct {"},
{"lineNum":"  355","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2686","possible_hits":"2",},
{"lineNum":"  356","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"2687","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"2688","possible_hits":"3",},
{"lineNum":"  359","line":"                try expectEqual(@intCast(usize, 1), branches.len);","class":"linePartCov","hits":"1","order":"2689","possible_hits":"2",},
{"lineNum":"  360","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"2690","possible_hits":"2",},
{"lineNum":"  361","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2691","possible_hits":"2",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"                const elseBranch = value.data.If.elseBranch.?;","class":"lineCov","hits":"2","order":"2692","possible_hits":"2",},
{"lineNum":"  364","line":"                try expectEqual(NodeType.Block, elseBranch.getType());","class":"linePartCov","hits":"1","order":"2693","possible_hits":"2",},
{"lineNum":"  365","line":"            }"},
{"lineNum":"  366","line":"        }).check,"},
{"lineNum":"  367","line":"    }).run();","class":"lineCov","hits":"1","order":"2681","possible_hits":"1",},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"test \"can parse an if statement with an \'else if\' and an \'else\' branch\" {","class":"lineCov","hits":"2","order":"2695","possible_hits":"2",},
{"lineNum":"  371","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2707","possible_hits":"1",},
{"lineNum":"  372","line":"        .code = \"if (a) {} else if (b) {} else {}\","},
{"lineNum":"  373","line":"        .check = (struct {"},
{"lineNum":"  374","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2697","possible_hits":"2",},
{"lineNum":"  375","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"2698","possible_hits":"1",},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"2699","possible_hits":"3",},
{"lineNum":"  378","line":"                try expectEqual(@intCast(usize, 2), branches.len);","class":"linePartCov","hits":"1","order":"2700","possible_hits":"2",},
{"lineNum":"  379","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"2701","possible_hits":"2",},
{"lineNum":"  380","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2702","possible_hits":"2",},
{"lineNum":"  381","line":"                try expectEqual(NodeType.Ident, branches[1].cond.getType());","class":"linePartCov","hits":"1","order":"2703","possible_hits":"2",},
{"lineNum":"  382","line":"                try expectEqual(NodeType.Block, branches[1].ifTrue.getType());","class":"linePartCov","hits":"1","order":"2704","possible_hits":"2",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"                const elseBranch = value.data.If.elseBranch.?;","class":"lineCov","hits":"2","order":"2705","possible_hits":"2",},
{"lineNum":"  385","line":"                try expectEqual(NodeType.Block, elseBranch.getType());","class":"linePartCov","hits":"1","order":"2706","possible_hits":"2",},
{"lineNum":"  386","line":"            }"},
{"lineNum":"  387","line":"        }).check,"},
{"lineNum":"  388","line":"    }).run();","class":"lineCov","hits":"1","order":"2696","possible_hits":"1",},
{"lineNum":"  389","line":"}"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"fn parseSwitch(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2711","possible_hits":"1",},
{"lineNum":"  392","line":"    std.debug.assert(psr.lexer.token.ty == .Switch);","class":"lineCov","hits":"1","order":"2712","possible_hits":"1",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2713","possible_hits":"1",},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    const lparen = psr.lexer.next();","class":"lineCov","hits":"1","order":"2714","possible_hits":"1",},
{"lineNum":"  397","line":"    if (lparen.ty != .LParen)","class":"lineCov","hits":"2","order":"2715","possible_hits":"2",},
{"lineNum":"  398","line":"        return ParseResult.expected(TokenType.LParen, lparen);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"2716","possible_hits":"1",},
{"lineNum":"  401","line":"    const expr = switch (psr.parseExpr()) {","class":"linePartCov","hits":"1","order":"2717","possible_hits":"2",},
{"lineNum":"  402","line":"        .Success => |exp| exp,","class":"lineCov","hits":"1","order":"2718","possible_hits":"1",},
{"lineNum":"  403","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"            \"expression for switch statement\","},
{"lineNum":"  406","line":"            next,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"        ),"},
{"lineNum":"  408","line":"    };"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2719","possible_hits":"2",},
{"lineNum":"  411","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2720","possible_hits":"1",},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    if (psr.lexer.token.ty != .LBrace)","class":"lineCov","hits":"2","order":"2721","possible_hits":"2",},
{"lineNum":"  416","line":"        return ParseResult.expected(TokenType.LBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2722","possible_hits":"1",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"2723","possible_hits":"1",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    const nd = makeNode(alloc, csr, .Switch, node.Switch{","class":"lineCov","hits":"1","order":"2727","possible_hits":"1",},
{"lineNum":"  423","line":"        .expr = expr,","class":"lineCov","hits":"1","order":"2724","possible_hits":"1",},
{"lineNum":"  424","line":"        .cases = .{},","class":"lineCov","hits":"1","order":"2725","possible_hits":"1",},
{"lineNum":"  425","line":"        .default = null,","class":"lineCov","hits":"1","order":"2726","possible_hits":"1",},
{"lineNum":"  426","line":"    });"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    while (psr.lexer.token.ty == .Case) {","class":"lineCov","hits":"2","order":"2728","possible_hits":"2",},
{"lineNum":"  429","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2729","possible_hits":"1",},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"        const value = switch (psr.parseExpr()) {","class":"linePartCov","hits":"1","order":"2730","possible_hits":"2",},
{"lineNum":"  432","line":"            .Success => |val| val,","class":"lineCov","hits":"1","order":"2731","possible_hits":"1",},
{"lineNum":"  433","line":"            .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  435","line":"                \"expression after \'case\'\","},
{"lineNum":"  436","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  437","line":"            ),"},
{"lineNum":"  438","line":"        };"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"        var case = node.Switch.Case{"},
{"lineNum":"  441","line":"            .value = value,","class":"lineCov","hits":"1","order":"2732","possible_hits":"1",},
{"lineNum":"  442","line":"            .stmts = node.NodeList{},","class":"lineCov","hits":"1","order":"2733","possible_hits":"1",},
{"lineNum":"  443","line":"        };"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"        if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"2734","possible_hits":"2",},
{"lineNum":"  446","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2735","possible_hits":"1",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"        while (psr.lexer.token.ty != .Case and","class":"lineCov","hits":"2","order":"2736","possible_hits":"2",},
{"lineNum":"  451","line":"            psr.lexer.token.ty != .Default and","class":"lineCov","hits":"2","order":"2737","possible_hits":"2",},
{"lineNum":"  452","line":"            psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"1","order":"2738","possible_hits":"1",},
{"lineNum":"  453","line":"        {"},
{"lineNum":"  454","line":"            switch (psr.parseStmt()) {","class":"linePartCov","hits":"2","order":"2739","possible_hits":"3",},
{"lineNum":"  455","line":"                .Success => |stmt| case.stmts.append(","class":"lineCov","hits":"2","order":"2746","possible_hits":"2",},
{"lineNum":"  456","line":"                    alloc,"},
{"lineNum":"  457","line":"                    stmt,","class":"lineCov","hits":"1","order":"2747","possible_hits":"1",},
{"lineNum":"  458","line":"                ) catch allocate.reportAndExit(),","class":"lineCov","hits":"2","order":"2748","possible_hits":"2",},
{"lineNum":"  459","line":"                .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"                .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"                    \"a statement\","},
{"lineNum":"  462","line":"                    psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"                ),"},
{"lineNum":"  464","line":"            }"},
{"lineNum":"  465","line":"        }"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"        nd.data.Switch.cases.append(alloc, case) catch allocate.reportAndExit();","class":"lineCov","hits":"2","order":"2759","possible_hits":"2",},
{"lineNum":"  468","line":"    }"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    if (psr.lexer.token.ty == .Default) {","class":"linePartCov","hits":"2","order":"2781","possible_hits":"3",},
{"lineNum":"  471","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2782","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"        if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"2783","possible_hits":"2",},
{"lineNum":"  474","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2784","possible_hits":"1",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"        var default = node.NodeList{};","class":"lineCov","hits":"1","order":"2785","possible_hits":"1",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"2786","possible_hits":"2",},
{"lineNum":"  481","line":"            switch (psr.parseStmt()) {","class":"linePartCov","hits":"2","order":"2787","possible_hits":"3",},
{"lineNum":"  482","line":"                .Success => |stmt| default.append(","class":"lineCov","hits":"2","order":"2788","possible_hits":"2",},
{"lineNum":"  483","line":"                    alloc,"},
{"lineNum":"  484","line":"                    stmt,","class":"lineCov","hits":"1","order":"2789","possible_hits":"1",},
{"lineNum":"  485","line":"                ) catch allocate.reportAndExit(),","class":"lineCov","hits":"2","order":"2790","possible_hits":"2",},
{"lineNum":"  486","line":"                .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"                .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"                    \"a statement\","},
{"lineNum":"  489","line":"                    psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":"                ),"},
{"lineNum":"  491","line":"            }"},
{"lineNum":"  492","line":"        }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"        nd.data.Switch.default = default;","class":"linePartCov","hits":"2","order":"2791","possible_hits":"3",},
{"lineNum":"  495","line":"    }"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    if (psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"2","order":"2792","possible_hits":"2",},
{"lineNum":"  498","line":"        return ParseResult.expected(TokenType.RBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2793","possible_hits":"1",},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2794","possible_hits":"1",},
{"lineNum":"  503","line":"}"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"test \"can parse a switch statement\" {","class":"lineCov","hits":"2","order":"2708","possible_hits":"2",},
{"lineNum":"  506","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2816","possible_hits":"1",},
{"lineNum":"  507","line":"        .code ="},
{"lineNum":"  508","line":"        \\\\switch (a) {"},
{"lineNum":"  509","line":"        \\\\  case 1:"},
{"lineNum":"  510","line":"        \\\\    null;"},
{"lineNum":"  511","line":"        \\\\    break;"},
{"lineNum":"  512","line":"        \\\\  case 2:"},
{"lineNum":"  513","line":"        \\\\    return;"},
{"lineNum":"  514","line":"        \\\\  default:"},
{"lineNum":"  515","line":"        \\\\    null;"},
{"lineNum":"  516","line":"        \\\\}"},
{"lineNum":"  517","line":"        ,"},
{"lineNum":"  518","line":"        .check = (struct {"},
{"lineNum":"  519","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2795","possible_hits":"2",},
{"lineNum":"  520","line":"                try expectEqual(NodeType.Switch, value.getType());","class":"lineCov","hits":"1","order":"2796","possible_hits":"1",},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"                const sw = value.data.Switch;","class":"linePartCov","hits":"2","order":"2797","possible_hits":"3",},
{"lineNum":"  523","line":"                try expectEqual(NodeType.Ident, sw.expr.getType());","class":"linePartCov","hits":"1","order":"2798","possible_hits":"2",},
{"lineNum":"  524","line":"                try expectEqualStrings(\"a\", sw.expr.data.Ident);","class":"lineCov","hits":"2","order":"2799","possible_hits":"2",},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"                const cases = sw.cases.items;","class":"lineCov","hits":"1","order":"2800","possible_hits":"1",},
{"lineNum":"  527","line":"                try expectEqual(@intCast(usize, 2), cases.len);","class":"lineCov","hits":"1","order":"2801","possible_hits":"1",},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"                try expectEqual(NodeType.Int, cases[0].value.getType());","class":"linePartCov","hits":"1","order":"2802","possible_hits":"2",},
{"lineNum":"  530","line":"                try expectEqualStrings(\"1\", cases[0].value.data.Int);","class":"linePartCov","hits":"1","order":"2803","possible_hits":"2",},
{"lineNum":"  531","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"2805","possible_hits":"2",},
{"lineNum":"  532","line":"                    NodeType.Null,"},
{"lineNum":"  533","line":"                    cases[0].stmts.items[0].getType(),","class":"linePartCov","hits":"1","order":"2804","possible_hits":"2",},
{"lineNum":"  534","line":"                );"},
{"lineNum":"  535","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"2807","possible_hits":"2",},
{"lineNum":"  536","line":"                    NodeType.Break,"},
{"lineNum":"  537","line":"                    cases[0].stmts.items[1].getType(),","class":"linePartCov","hits":"1","order":"2806","possible_hits":"2",},
{"lineNum":"  538","line":"                );"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"                try expectEqual(NodeType.Int, cases[1].value.getType());","class":"linePartCov","hits":"1","order":"2808","possible_hits":"2",},
{"lineNum":"  541","line":"                try expectEqualStrings(\"2\", cases[1].value.data.Int);","class":"linePartCov","hits":"1","order":"2809","possible_hits":"2",},
{"lineNum":"  542","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"2811","possible_hits":"2",},
{"lineNum":"  543","line":"                    NodeType.Return,"},
{"lineNum":"  544","line":"                    cases[1].stmts.items[0].getType(),","class":"linePartCov","hits":"1","order":"2810","possible_hits":"2",},
{"lineNum":"  545","line":"                );"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"                try expect(sw.default != null);","class":"lineCov","hits":"1","order":"2812","possible_hits":"1",},
{"lineNum":"  548","line":"                const default = sw.default.?.items;","class":"linePartCov","hits":"1","order":"2813","possible_hits":"2",},
{"lineNum":"  549","line":"                try expectEqual(@intCast(usize, 1), default.len);","class":"linePartCov","hits":"1","order":"2814","possible_hits":"2",},
{"lineNum":"  550","line":"                try expectEqual(NodeType.Null, default[0].getType());","class":"linePartCov","hits":"1","order":"2815","possible_hits":"2",},
{"lineNum":"  551","line":"            }"},
{"lineNum":"  552","line":"        }).check,"},
{"lineNum":"  553","line":"    }).run();","class":"lineCov","hits":"1","order":"2709","possible_hits":"1",},
{"lineNum":"  554","line":"}"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"fn parseForEachClause(psr: *TsParser) ?node.For.Clause {","class":"lineCov","hits":"1","order":"2828","possible_hits":"1",},
{"lineNum":"  557","line":"    const save = psr.lexer.save();","class":"lineCov","hits":"1","order":"2829","possible_hits":"1",},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    const scoping = switch (psr.lexer.token.ty) {","class":"linePartCov","hits":"2","order":"2830","possible_hits":"3",},
{"lineNum":"  560","line":"        .Var => node.Decl.Scoping.Var,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":"        .Let => node.Decl.Scoping.Let,","class":"lineCov","hits":"1","order":"2831","possible_hits":"1",},
{"lineNum":"  562","line":"        .Const => node.Decl.Scoping.Const,","class":"lineCov","hits":"1","order":"2919","possible_hits":"1",},
{"lineNum":"  563","line":"        else => return null,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"    };"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"2832","possible_hits":"1",},
{"lineNum":"  567","line":"    if (name.ty != .Ident) {","class":"lineCov","hits":"2","order":"2833","possible_hits":"2",},
{"lineNum":"  568","line":"        psr.lexer.restore(save);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":"    }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    const variant = switch (psr.lexer.next().ty) {","class":"lineCov","hits":"2","order":"2834","possible_hits":"2",},
{"lineNum":"  573","line":"        .In => node.For.Clause.EachClause.Variant.In,","class":"lineCov","hits":"1","order":"2920","possible_hits":"1",},
{"lineNum":"  574","line":"        .Of => node.For.Clause.EachClause.Variant.Of,","class":"lineCov","hits":"1","order":"2890","possible_hits":"1",},
{"lineNum":"  575","line":"        else => {"},
{"lineNum":"  576","line":"            psr.lexer.restore(save);","class":"lineCov","hits":"1","order":"2835","possible_hits":"1",},
{"lineNum":"  577","line":"            return null;","class":"lineCov","hits":"1","order":"2836","possible_hits":"1",},
{"lineNum":"  578","line":"        },"},
{"lineNum":"  579","line":"    };"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2891","possible_hits":"1",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    return node.For.Clause{","class":"lineCov","hits":"2","order":"2892","possible_hits":"2",},
{"lineNum":"  584","line":"        .Each = .{","class":"lineCov","hits":"1","order":"2893","possible_hits":"1",},
{"lineNum":"  585","line":"            .scoping = scoping,","class":"lineCov","hits":"1","order":"2894","possible_hits":"1",},
{"lineNum":"  586","line":"            .variant = variant,","class":"lineCov","hits":"1","order":"2895","possible_hits":"1",},
{"lineNum":"  587","line":"            .name = name.data,","class":"lineCov","hits":"1","order":"2896","possible_hits":"1",},
{"lineNum":"  588","line":"            .expr = undefined,","class":"lineCov","hits":"1","order":"2897","possible_hits":"1",},
{"lineNum":"  589","line":"        },"},
{"lineNum":"  590","line":"    };"},
{"lineNum":"  591","line":"}"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"fn getForError(psr: *TsParser, res: ParseResult) ?ParseResult {","class":"lineCov","hits":"1","order":"2839","possible_hits":"1",},
{"lineNum":"  594","line":"    return switch (res) {","class":"linePartCov","hits":"2","order":"2840","possible_hits":"4",},
{"lineNum":"  595","line":"        .Success => null,","class":"lineCov","hits":"1","order":"2841","possible_hits":"1",},
{"lineNum":"  596","line":"        .Error => |err| ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"        .NoMatch => ParseResult.expected(\"statement in for loop\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"    };"},
{"lineNum":"  599","line":"}"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"fn parseFor(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2820","possible_hits":"1",},
{"lineNum":"  602","line":"    std.debug.assert(psr.lexer.token.ty == .For);","class":"lineCov","hits":"1","order":"2821","possible_hits":"1",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2822","possible_hits":"1",},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"    const lparen = psr.lexer.next();","class":"lineCov","hits":"1","order":"2823","possible_hits":"1",},
{"lineNum":"  607","line":"    if (lparen.ty != .LParen)","class":"lineCov","hits":"2","order":"2824","possible_hits":"2",},
{"lineNum":"  608","line":"        return ParseResult.expected(TokenType.LParen, lparen);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2825","possible_hits":"1",},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"    var loop: node.For = undefined;","class":"lineCov","hits":"1","order":"2826","possible_hits":"1",},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"    if (parseForEachClause(psr)) |each| {","class":"lineCov","hits":"3","order":"2827","possible_hits":"3",},
{"lineNum":"  615","line":"        loop.clause = each;","class":"lineCov","hits":"1","order":"2898","possible_hits":"1",},
{"lineNum":"  616","line":"        switch (psr.parseExpr()) {","class":"linePartCov","hits":"2","order":"2899","possible_hits":"3",},
{"lineNum":"  617","line":"            .Success => |expr| loop.clause.Each.expr = expr,","class":"linePartCov","hits":"2","order":"2900","possible_hits":"3",},
{"lineNum":"  618","line":"            .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":"                \"expression in for each loop\","},
{"lineNum":"  621","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"            ),"},
{"lineNum":"  623","line":"        }"},
{"lineNum":"  624","line":"    } else {"},
{"lineNum":"  625","line":"        const pre = psr.parseStmt();","class":"lineCov","hits":"1","order":"2837","possible_hits":"1",},
{"lineNum":"  626","line":"        if (getForError(psr, pre)) |err|","class":"lineCov","hits":"2","order":"2838","possible_hits":"2",},
{"lineNum":"  627","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"        const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"2842","possible_hits":"1",},
{"lineNum":"  630","line":"        if (getForError(psr, cond)) |err|","class":"lineCov","hits":"2","order":"2843","possible_hits":"2",},
{"lineNum":"  631","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"        if (psr.lexer.token.ty != .Semi)","class":"lineCov","hits":"2","order":"2844","possible_hits":"2",},
{"lineNum":"  634","line":"            return ParseResult.expected(TokenType.Semi, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2845","possible_hits":"1",},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"        const post = psr.parseExpr();","class":"lineCov","hits":"1","order":"2846","possible_hits":"1",},
{"lineNum":"  639","line":"        if (getForError(psr, post)) |err|","class":"lineCov","hits":"2","order":"2847","possible_hits":"2",},
{"lineNum":"  640","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"        loop.clause = node.For.Clause{"},
{"lineNum":"  643","line":"            .CStyle = .{","class":"lineCov","hits":"1","order":"2848","possible_hits":"1",},
{"lineNum":"  644","line":"                .pre = pre.Success,","class":"linePartCov","hits":"2","order":"2849","possible_hits":"3",},
{"lineNum":"  645","line":"                .cond = cond.Success,","class":"linePartCov","hits":"2","order":"2850","possible_hits":"3",},
{"lineNum":"  646","line":"                .post = post.Success,","class":"linePartCov","hits":"2","order":"2851","possible_hits":"3",},
{"lineNum":"  647","line":"            },"},
{"lineNum":"  648","line":"        };"},
{"lineNum":"  649","line":"    }"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2852","possible_hits":"2",},
{"lineNum":"  652","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2853","possible_hits":"1",},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"2854","possible_hits":"1",},
{"lineNum":"  657","line":"    switch (body) {","class":"linePartCov","hits":"1","order":"2868","possible_hits":"2",},
{"lineNum":"  658","line":"        .Success => |bd| loop.body = bd,","class":"lineCov","hits":"1","order":"2869","possible_hits":"1",},
{"lineNum":"  659","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"            \"for loop body\","},
{"lineNum":"  662","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"        ),"},
{"lineNum":"  664","line":"    }"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    return ParseResult.success(makeNode(psr.getAllocator(), csr, .For, loop));","class":"lineCov","hits":"1","order":"2870","possible_hits":"1",},
{"lineNum":"  667","line":"}"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"test \"can parse c-style for loop\" {","class":"lineCov","hits":"2","order":"2817","possible_hits":"2",},
{"lineNum":"  670","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2887","possible_hits":"1",},
{"lineNum":"  671","line":"        .code = \"for (let i = 0; i < 4; i++) { a += i; }\","},
{"lineNum":"  672","line":"        .check = (struct {"},
{"lineNum":"  673","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2871","possible_hits":"2",},
{"lineNum":"  674","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"2872","possible_hits":"1",},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"2873","possible_hits":"3",},
{"lineNum":"  677","line":"                try expectEqual(node.For.Clause.Type.CStyle, loop.getType());","class":"linePartCov","hits":"1","order":"2874","possible_hits":"2",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"                const c = loop.clause.CStyle;","class":"linePartCov","hits":"2","order":"2879","possible_hits":"3",},
{"lineNum":"  680","line":"                try expectEqual(NodeType.Decl, c.pre.getType());","class":"linePartCov","hits":"1","order":"2880","possible_hits":"2",},
{"lineNum":"  681","line":"                try expectEqual(NodeType.BinaryOp, c.cond.getType());","class":"lineCov","hits":"1","order":"2881","possible_hits":"1",},
{"lineNum":"  682","line":"                try expectEqual(NodeType.PostfixOp, c.post.getType());","class":"lineCov","hits":"1","order":"2882","possible_hits":"1",},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"2883","possible_hits":"1",},
{"lineNum":"  685","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"2884","possible_hits":"3",},
{"lineNum":"  686","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"2885","possible_hits":"2",},
{"lineNum":"  687","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"2886","possible_hits":"2",},
{"lineNum":"  688","line":"            }"},
{"lineNum":"  689","line":"        }).check,"},
{"lineNum":"  690","line":"    }).run();","class":"lineCov","hits":"1","order":"2818","possible_hits":"1",},
{"lineNum":"  691","line":"}"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"test \"can parse for..of loop\" {","class":"lineCov","hits":"2","order":"2888","possible_hits":"2",},
{"lineNum":"  694","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2916","possible_hits":"1",},
{"lineNum":"  695","line":"        .code = \"for (let a of anArray) { a += 4; }\","},
{"lineNum":"  696","line":"        .check = (struct {"},
{"lineNum":"  697","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2901","possible_hits":"2",},
{"lineNum":"  698","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"2902","possible_hits":"1",},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"2903","possible_hits":"3",},
{"lineNum":"  701","line":"                try expectEqual(node.For.Clause.Type.Each, loop.getType());","class":"linePartCov","hits":"1","order":"2904","possible_hits":"2",},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"                const e = loop.clause.Each;","class":"linePartCov","hits":"2","order":"2905","possible_hits":"3",},
{"lineNum":"  704","line":"                try expectEqual(node.Decl.Scoping.Let, e.scoping);","class":"linePartCov","hits":"1","order":"2906","possible_hits":"2",},
{"lineNum":"  705","line":"                try expectEqual(","class":"lineCov","hits":"1","order":"2908","possible_hits":"1",},
{"lineNum":"  706","line":"                    node.For.Clause.EachClause.Variant.Of,"},
{"lineNum":"  707","line":"                    e.variant,","class":"lineCov","hits":"1","order":"2907","possible_hits":"1",},
{"lineNum":"  708","line":"                );"},
{"lineNum":"  709","line":"                try expectEqualStrings(\"a\", e.name);","class":"lineCov","hits":"1","order":"2909","possible_hits":"1",},
{"lineNum":"  710","line":"                try expectEqual(NodeType.Ident, e.expr.getType());","class":"lineCov","hits":"1","order":"2910","possible_hits":"1",},
{"lineNum":"  711","line":"                try expectEqualStrings(\"anArray\", e.expr.data.Ident);","class":"lineCov","hits":"2","order":"2911","possible_hits":"2",},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"2912","possible_hits":"1",},
{"lineNum":"  714","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"2913","possible_hits":"3",},
{"lineNum":"  715","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"2914","possible_hits":"2",},
{"lineNum":"  716","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"2915","possible_hits":"2",},
{"lineNum":"  717","line":"            }"},
{"lineNum":"  718","line":"        }).check,"},
{"lineNum":"  719","line":"    }).run();","class":"lineCov","hits":"1","order":"2889","possible_hits":"1",},
{"lineNum":"  720","line":"}"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"test \"can parse for..in loop\" {","class":"lineCov","hits":"2","order":"2917","possible_hits":"2",},
{"lineNum":"  723","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2936","possible_hits":"1",},
{"lineNum":"  724","line":"        .code = \"for (const a in anArray) { a += 4; }\","},
{"lineNum":"  725","line":"        .check = (struct {"},
{"lineNum":"  726","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2921","possible_hits":"2",},
{"lineNum":"  727","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"2922","possible_hits":"1",},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"2923","possible_hits":"3",},
{"lineNum":"  730","line":"                try expectEqual(node.For.Clause.Type.Each, loop.getType());","class":"linePartCov","hits":"1","order":"2924","possible_hits":"2",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"                const e = loop.clause.Each;","class":"linePartCov","hits":"2","order":"2925","possible_hits":"3",},
{"lineNum":"  733","line":"                try expectEqual(node.Decl.Scoping.Const, e.scoping);","class":"linePartCov","hits":"1","order":"2926","possible_hits":"2",},
{"lineNum":"  734","line":"                try expectEqual(","class":"lineCov","hits":"1","order":"2928","possible_hits":"1",},
{"lineNum":"  735","line":"                    node.For.Clause.EachClause.Variant.In,"},
{"lineNum":"  736","line":"                    e.variant,","class":"lineCov","hits":"1","order":"2927","possible_hits":"1",},
{"lineNum":"  737","line":"                );"},
{"lineNum":"  738","line":"                try expectEqualStrings(\"a\", e.name);","class":"lineCov","hits":"1","order":"2929","possible_hits":"1",},
{"lineNum":"  739","line":"                try expectEqual(NodeType.Ident, e.expr.getType());","class":"lineCov","hits":"1","order":"2930","possible_hits":"1",},
{"lineNum":"  740","line":"                try expectEqualStrings(\"anArray\", e.expr.data.Ident);","class":"lineCov","hits":"2","order":"2931","possible_hits":"2",},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"2932","possible_hits":"1",},
{"lineNum":"  743","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"2933","possible_hits":"3",},
{"lineNum":"  744","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"2934","possible_hits":"2",},
{"lineNum":"  745","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"2935","possible_hits":"2",},
{"lineNum":"  746","line":"            }"},
{"lineNum":"  747","line":"        }).check,"},
{"lineNum":"  748","line":"    }).run();","class":"lineCov","hits":"1","order":"2918","possible_hits":"1",},
{"lineNum":"  749","line":"}"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"fn parseWhile(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2940","possible_hits":"1",},
{"lineNum":"  752","line":"    std.debug.assert(psr.lexer.token.ty == .While);","class":"lineCov","hits":"1","order":"2941","possible_hits":"1",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2942","possible_hits":"1",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"    if (psr.lexer.next().ty != .LParen)","class":"lineCov","hits":"2","order":"2943","possible_hits":"2",},
{"lineNum":"  757","line":"        return ParseResult.expected(\"\'(\' after while\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2944","possible_hits":"1",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"2945","possible_hits":"1",},
{"lineNum":"  762","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"2946","possible_hits":"2",},
{"lineNum":"  763","line":"        return cond;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2947","possible_hits":"2",},
{"lineNum":"  766","line":"        return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":"            \"\')\' after while condition\","},
{"lineNum":"  768","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":"        );"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2948","possible_hits":"1",},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"2949","possible_hits":"1",},
{"lineNum":"  774","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"2950","possible_hits":"2",},
{"lineNum":"  775","line":"        return body;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2954","possible_hits":"1",},
{"lineNum":"  778","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2951","possible_hits":"1",},
{"lineNum":"  779","line":"        csr,"},
{"lineNum":"  780","line":"        .While,"},
{"lineNum":"  781","line":"        node.While{"},
{"lineNum":"  782","line":"            .cond = cond.Success,","class":"linePartCov","hits":"1","order":"2952","possible_hits":"2",},
{"lineNum":"  783","line":"            .body = body.Success,","class":"linePartCov","hits":"2","order":"2953","possible_hits":"3",},
{"lineNum":"  784","line":"        },"},
{"lineNum":"  785","line":"    ));"},
{"lineNum":"  786","line":"}"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"test \"can parse while loop\" {","class":"lineCov","hits":"2","order":"2937","possible_hits":"2",},
{"lineNum":"  789","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2960","possible_hits":"1",},
{"lineNum":"  790","line":"        .code = \"while (true) {}\","},
{"lineNum":"  791","line":"        .check = (struct {"},
{"lineNum":"  792","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2955","possible_hits":"2",},
{"lineNum":"  793","line":"                try expectEqual(NodeType.While, value.getType());","class":"lineCov","hits":"1","order":"2956","possible_hits":"1",},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"                const loop = value.data.While;","class":"linePartCov","hits":"2","order":"2957","possible_hits":"3",},
{"lineNum":"  796","line":"                try expectEqual(NodeType.True, loop.cond.getType());","class":"linePartCov","hits":"1","order":"2958","possible_hits":"2",},
{"lineNum":"  797","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"2959","possible_hits":"1",},
{"lineNum":"  798","line":"            }"},
{"lineNum":"  799","line":"        }).check,"},
{"lineNum":"  800","line":"    }).run();","class":"lineCov","hits":"1","order":"2938","possible_hits":"1",},
{"lineNum":"  801","line":"}"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"fn parseDo(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2964","possible_hits":"1",},
{"lineNum":"  804","line":"    std.debug.assert(psr.lexer.token.ty == .Do);","class":"lineCov","hits":"1","order":"2965","possible_hits":"1",},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2966","possible_hits":"1",},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2967","possible_hits":"1",},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"2968","possible_hits":"1",},
{"lineNum":"  811","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"2969","possible_hits":"2",},
{"lineNum":"  812","line":"        return body;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"    if (psr.lexer.token.ty != .While)","class":"lineCov","hits":"2","order":"2970","possible_hits":"2",},
{"lineNum":"  815","line":"        return ParseResult.expected(\"\'while\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"    if (psr.lexer.next().ty != .LParen)","class":"lineCov","hits":"2","order":"2971","possible_hits":"2",},
{"lineNum":"  818","line":"        return ParseResult.expected(\"\'(\' after while\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2972","possible_hits":"1",},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"2973","possible_hits":"1",},
{"lineNum":"  823","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"2974","possible_hits":"2",},
{"lineNum":"  824","line":"        return cond;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2975","possible_hits":"2",},
{"lineNum":"  827","line":"        return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":"            \"\')\' after do-while condition\","},
{"lineNum":"  829","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  830","line":"        );"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2976","possible_hits":"1",},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"2977","possible_hits":"1",},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2981","possible_hits":"1",},
{"lineNum":"  837","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2978","possible_hits":"1",},
{"lineNum":"  838","line":"        csr,"},
{"lineNum":"  839","line":"        .Do,"},
{"lineNum":"  840","line":"        node.Do{"},
{"lineNum":"  841","line":"            .body = body.Success,","class":"linePartCov","hits":"1","order":"2979","possible_hits":"2",},
{"lineNum":"  842","line":"            .cond = cond.Success,","class":"linePartCov","hits":"2","order":"2980","possible_hits":"3",},
{"lineNum":"  843","line":"        },"},
{"lineNum":"  844","line":"    ));"},
{"lineNum":"  845","line":"}"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"test \"can parse do loop\" {","class":"lineCov","hits":"2","order":"2961","possible_hits":"2",},
{"lineNum":"  848","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2987","possible_hits":"1",},
{"lineNum":"  849","line":"        .code = \"do {} while (true);\","},
{"lineNum":"  850","line":"        .check = (struct {"},
{"lineNum":"  851","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2982","possible_hits":"2",},
{"lineNum":"  852","line":"                try expectEqual(NodeType.Do, value.getType());","class":"lineCov","hits":"1","order":"2983","possible_hits":"1",},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"                const loop = value.data.Do;","class":"linePartCov","hits":"2","order":"2984","possible_hits":"3",},
{"lineNum":"  855","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"linePartCov","hits":"1","order":"2985","possible_hits":"2",},
{"lineNum":"  856","line":"                try expectEqual(NodeType.True, loop.cond.getType());","class":"lineCov","hits":"1","order":"2986","possible_hits":"1",},
{"lineNum":"  857","line":"            }"},
{"lineNum":"  858","line":"        }).check,"},
{"lineNum":"  859","line":"    }).run();","class":"lineCov","hits":"1","order":"2962","possible_hits":"1",},
{"lineNum":"  860","line":"}"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"fn parseBlockStmt(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2067","possible_hits":"1",},
{"lineNum":"  863","line":"    if (psr.lexer.token.ty != .LBrace)","class":"lineCov","hits":"2","order":"2068","possible_hits":"2",},
{"lineNum":"  864","line":"        return ParseResult.noMatch(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":"            ParseError.expected(\"a block\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  866","line":"        );"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"    var nd = makeNode(","class":"lineCov","hits":"1","order":"2071","possible_hits":"1",},
{"lineNum":"  869","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2069","possible_hits":"1",},
{"lineNum":"  870","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2070","possible_hits":"1",},
{"lineNum":"  871","line":"        .Block,"},
{"lineNum":"  872","line":"        node.NodeList{},"},
{"lineNum":"  873","line":"    );"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2072","possible_hits":"1",},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"    while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"2073","possible_hits":"2",},
{"lineNum":"  878","line":"        const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"2855","possible_hits":"1",},
{"lineNum":"  879","line":"        if (!stmt.isSuccess())","class":"lineCov","hits":"2","order":"2863","possible_hits":"2",},
{"lineNum":"  880","line":"            return stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"        nd.data.Block.append(","class":"linePartCov","hits":"2","order":"2864","possible_hits":"3",},
{"lineNum":"  882","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"2865","possible_hits":"1",},
{"lineNum":"  883","line":"            stmt.Success,","class":"linePartCov","hits":"2","order":"2866","possible_hits":"3",},
{"lineNum":"  884","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2867","possible_hits":"2",},
{"lineNum":"  885","line":"    }"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"    std.debug.assert(psr.lexer.token.ty == .RBrace);","class":"lineCov","hits":"1","order":"2074","possible_hits":"1",},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2075","possible_hits":"1",},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"2076","possible_hits":"1",},
{"lineNum":"  892","line":"}"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"pub fn parseBlock(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"2065","possible_hits":"1",},
{"lineNum":"  895","line":"    return parseBlockStmt(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"2066","possible_hits":"1",},
{"lineNum":"  896","line":"}"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"test \"can parse empty block\" {","class":"lineCov","hits":"2","order":"2988","possible_hits":"2",},
{"lineNum":"  899","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"2993","possible_hits":"1",},
{"lineNum":"  900","line":"        .code = \"{}\","},
{"lineNum":"  901","line":"        .check = (struct {"},
{"lineNum":"  902","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2990","possible_hits":"2",},
{"lineNum":"  903","line":"                try expectEqual(NodeType.Block, value.getType());","class":"lineCov","hits":"1","order":"2991","possible_hits":"1",},
{"lineNum":"  904","line":"                try expectEqual(@intCast(usize, 0), value.data.Block.items.len);","class":"lineCov","hits":"2","order":"2992","possible_hits":"2",},
{"lineNum":"  905","line":"            }"},
{"lineNum":"  906","line":"        }).check,"},
{"lineNum":"  907","line":"    }).run();","class":"lineCov","hits":"1","order":"2989","possible_hits":"1",},
{"lineNum":"  908","line":"}"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"test \"can parse populated block\" {","class":"lineCov","hits":"2","order":"2994","possible_hits":"2",},
{"lineNum":"  911","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3002","possible_hits":"1",},
{"lineNum":"  912","line":"        .code = \"{ break; return; }\","},
{"lineNum":"  913","line":"        .check = (struct {"},
{"lineNum":"  914","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2996","possible_hits":"2",},
{"lineNum":"  915","line":"                try expectEqual(NodeType.Block, value.getType());","class":"lineCov","hits":"1","order":"2997","possible_hits":"1",},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"                const items = value.data.Block.items;","class":"linePartCov","hits":"2","order":"2998","possible_hits":"3",},
{"lineNum":"  918","line":"                try expectEqual(@intCast(usize, 2), items.len);","class":"linePartCov","hits":"1","order":"2999","possible_hits":"2",},
{"lineNum":"  919","line":"                try expectEqual(NodeType.Break, items[0].getType());","class":"linePartCov","hits":"1","order":"3000","possible_hits":"2",},
{"lineNum":"  920","line":"                try expectEqual(NodeType.Return, items[1].getType());","class":"linePartCov","hits":"1","order":"3001","possible_hits":"2",},
{"lineNum":"  921","line":"            }"},
{"lineNum":"  922","line":"        }).check,"},
{"lineNum":"  923","line":"    }).run();","class":"lineCov","hits":"1","order":"2995","possible_hits":"1",},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"fn parseReturn(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2761","possible_hits":"1",},
{"lineNum":"  927","line":"    std.debug.assert(psr.lexer.token.ty == .Return);","class":"lineCov","hits":"1","order":"2762","possible_hits":"1",},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2763","possible_hits":"1",},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2764","possible_hits":"1",},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"2765","possible_hits":"1",},
{"lineNum":"  934","line":"    if (expr.getType() == .Error)","class":"lineCov","hits":"2","order":"2776","possible_hits":"2",},
{"lineNum":"  935","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"2777","possible_hits":"1",},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2780","possible_hits":"1",},
{"lineNum":"  940","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2778","possible_hits":"1",},
{"lineNum":"  941","line":"        csr,"},
{"lineNum":"  942","line":"        .Return,"},
{"lineNum":"  943","line":"        if (expr.isSuccess()) expr.Success else null,","class":"lineCov","hits":"2","order":"2779","possible_hits":"2",},
{"lineNum":"  944","line":"    ));"},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"test \"can parse \'return\' without expression\" {","class":"lineCov","hits":"2","order":"3003","possible_hits":"2",},
{"lineNum":"  948","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3008","possible_hits":"1",},
{"lineNum":"  949","line":"        .code = \"return;\","},
{"lineNum":"  950","line":"        .check = (struct {"},
{"lineNum":"  951","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3005","possible_hits":"2",},
{"lineNum":"  952","line":"                try expectEqual(NodeType.Return, value.getType());","class":"lineCov","hits":"1","order":"3006","possible_hits":"1",},
{"lineNum":"  953","line":"                try expect(value.data.Return == null);","class":"lineCov","hits":"2","order":"3007","possible_hits":"2",},
{"lineNum":"  954","line":"            }"},
{"lineNum":"  955","line":"        }).check,"},
{"lineNum":"  956","line":"    }).run();","class":"lineCov","hits":"1","order":"3004","possible_hits":"1",},
{"lineNum":"  957","line":"}"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"test \"can parse \'return\' with expression\" {","class":"lineCov","hits":"2","order":"3009","possible_hits":"2",},
{"lineNum":"  960","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3016","possible_hits":"1",},
{"lineNum":"  961","line":"        .code = \"return 4;\","},
{"lineNum":"  962","line":"        .check = (struct {"},
{"lineNum":"  963","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3011","possible_hits":"2",},
{"lineNum":"  964","line":"                try expectEqual(NodeType.Return, value.getType());","class":"lineCov","hits":"1","order":"3012","possible_hits":"1",},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"                const expr = value.data.Return.?;","class":"lineCov","hits":"2","order":"3013","possible_hits":"2",},
{"lineNum":"  967","line":"                try expectEqual(NodeType.Int, expr.getType());","class":"linePartCov","hits":"1","order":"3014","possible_hits":"2",},
{"lineNum":"  968","line":"                try expectEqualStrings(\"4\", expr.data.Int);","class":"lineCov","hits":"2","order":"3015","possible_hits":"2",},
{"lineNum":"  969","line":"            }"},
{"lineNum":"  970","line":"        }).check,"},
{"lineNum":"  971","line":"    }).run();","class":"lineCov","hits":"1","order":"3010","possible_hits":"1",},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"fn parseBreakOrContinue(","class":"lineCov","hits":"2","order":"2750","possible_hits":"2",},
{"lineNum":"  975","line":"    psr: *TsParser,"},
{"lineNum":"  976","line":"    comptime ty: NodeType,"},
{"lineNum":"  977","line":") ParseResult {"},
{"lineNum":"  978","line":"    std.debug.assert(std.mem.eql(","class":"lineCov","hits":"2","order":"2752","possible_hits":"2",},
{"lineNum":"  979","line":"        u8,"},
{"lineNum":"  980","line":"        @tagName(psr.lexer.token.ty),","class":"lineCov","hits":"2","order":"2751","possible_hits":"2",},
{"lineNum":"  981","line":"        @tagName(ty),"},
{"lineNum":"  982","line":"    ));"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"2","order":"2753","possible_hits":"2",},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"2","order":"2754","possible_hits":"2",},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"    var label: ?[]const u8 = null;","class":"lineCov","hits":"2","order":"2755","possible_hits":"2",},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"    if (psr.lexer.token.ty == .Ident) {","class":"lineCov","hits":"4","order":"2756","possible_hits":"4",},
{"lineNum":"  991","line":"        label = psr.lexer.token.data;","class":"lineCov","hits":"2","order":"3025","possible_hits":"2",},
{"lineNum":"  992","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"2","order":"3026","possible_hits":"2",},
{"lineNum":"  993","line":"    }"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"    eatSemi(psr);","class":"lineCov","hits":"2","order":"2757","possible_hits":"2",},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"    return ParseResult.success(makeNode(psr.getAllocator(), csr, ty, label));","class":"lineCov","hits":"2","order":"2758","possible_hits":"2",},
{"lineNum":"  998","line":"}"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"test \"can parse \'break\' without label\" {","class":"lineCov","hits":"2","order":"3017","possible_hits":"2",},
{"lineNum":" 1001","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3022","possible_hits":"1",},
{"lineNum":" 1002","line":"        .code = \"break;\","},
{"lineNum":" 1003","line":"        .check = (struct {"},
{"lineNum":" 1004","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3019","possible_hits":"2",},
{"lineNum":" 1005","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"3020","possible_hits":"1",},
{"lineNum":" 1006","line":"                try expect(value.data.Break == null);","class":"lineCov","hits":"2","order":"3021","possible_hits":"2",},
{"lineNum":" 1007","line":"            }"},
{"lineNum":" 1008","line":"        }).check,"},
{"lineNum":" 1009","line":"    }).run();","class":"lineCov","hits":"1","order":"3018","possible_hits":"1",},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"test \"can parse \'break\' with label\" {","class":"lineCov","hits":"2","order":"3023","possible_hits":"2",},
{"lineNum":" 1013","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3030","possible_hits":"1",},
{"lineNum":" 1014","line":"        .code = \"break abc;\","},
{"lineNum":" 1015","line":"        .check = (struct {"},
{"lineNum":" 1016","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3027","possible_hits":"2",},
{"lineNum":" 1017","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"3028","possible_hits":"1",},
{"lineNum":" 1018","line":"                try expectEqualStrings(\"abc\", value.data.Break.?);","class":"lineCov","hits":"2","order":"3029","possible_hits":"2",},
{"lineNum":" 1019","line":"            }"},
{"lineNum":" 1020","line":"        }).check,"},
{"lineNum":" 1021","line":"    }).run();","class":"lineCov","hits":"1","order":"3024","possible_hits":"1",},
{"lineNum":" 1022","line":"}"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"test \"can parse \'continue\' without label\" {","class":"lineCov","hits":"2","order":"3031","possible_hits":"2",},
{"lineNum":" 1025","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3037","possible_hits":"1",},
{"lineNum":" 1026","line":"        .code = \"continue;\","},
{"lineNum":" 1027","line":"        .check = (struct {"},
{"lineNum":" 1028","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3034","possible_hits":"2",},
{"lineNum":" 1029","line":"                try expectEqual(NodeType.Continue, value.getType());","class":"lineCov","hits":"1","order":"3035","possible_hits":"1",},
{"lineNum":" 1030","line":"                try expect(value.data.Continue == null);","class":"lineCov","hits":"2","order":"3036","possible_hits":"2",},
{"lineNum":" 1031","line":"            }"},
{"lineNum":" 1032","line":"        }).check,"},
{"lineNum":" 1033","line":"    }).run();","class":"lineCov","hits":"1","order":"3032","possible_hits":"1",},
{"lineNum":" 1034","line":"}"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"test \"can parse \'continue\' with label\" {","class":"lineCov","hits":"2","order":"3038","possible_hits":"2",},
{"lineNum":" 1037","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3043","possible_hits":"1",},
{"lineNum":" 1038","line":"        .code = \"continue abc;\","},
{"lineNum":" 1039","line":"        .check = (struct {"},
{"lineNum":" 1040","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3040","possible_hits":"2",},
{"lineNum":" 1041","line":"                try expectEqual(NodeType.Continue, value.getType());","class":"lineCov","hits":"1","order":"3041","possible_hits":"1",},
{"lineNum":" 1042","line":"                try expectEqualStrings(\"abc\", value.data.Continue.?);","class":"lineCov","hits":"2","order":"3042","possible_hits":"2",},
{"lineNum":" 1043","line":"            }"},
{"lineNum":" 1044","line":"        }).check,"},
{"lineNum":" 1045","line":"    }).run();","class":"lineCov","hits":"1","order":"3039","possible_hits":"1",},
{"lineNum":" 1046","line":"}"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"fn parseThrow(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3047","possible_hits":"1",},
{"lineNum":" 1049","line":"    std.debug.assert(psr.lexer.token.ty == .Throw);","class":"lineCov","hits":"1","order":"3048","possible_hits":"1",},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3049","possible_hits":"1",},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3050","possible_hits":"1",},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"3051","possible_hits":"1",},
{"lineNum":" 1056","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"3052","possible_hits":"2",},
{"lineNum":" 1057","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"3053","possible_hits":"1",},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"    return ParseResult.success(","class":"lineCov","hits":"1","order":"3055","possible_hits":"1",},
{"lineNum":" 1062","line":"        makeNode(psr.getAllocator(), csr, .Throw, expr.Success),","class":"linePartCov","hits":"1","order":"3054","possible_hits":"2",},
{"lineNum":" 1063","line":"    );"},
{"lineNum":" 1064","line":"}"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"test \"can parse \'throw\' statement\" {","class":"lineCov","hits":"2","order":"3044","possible_hits":"2",},
{"lineNum":" 1067","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3061","possible_hits":"1",},
{"lineNum":" 1068","line":"        .code = \"throw abc;\","},
{"lineNum":" 1069","line":"        .check = (struct {"},
{"lineNum":" 1070","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3056","possible_hits":"2",},
{"lineNum":" 1071","line":"                try expectEqual(NodeType.Throw, value.getType());","class":"lineCov","hits":"1","order":"3057","possible_hits":"1",},
{"lineNum":" 1072","line":"                const expr = value.data.Throw;","class":"linePartCov","hits":"2","order":"3058","possible_hits":"3",},
{"lineNum":" 1073","line":"                try expectEqual(NodeType.Ident, expr.getType());","class":"linePartCov","hits":"1","order":"3059","possible_hits":"2",},
{"lineNum":" 1074","line":"                try expectEqualStrings(\"abc\", expr.data.Ident);","class":"lineCov","hits":"2","order":"3060","possible_hits":"2",},
{"lineNum":" 1075","line":"            }"},
{"lineNum":" 1076","line":"        }).check,"},
{"lineNum":" 1077","line":"    }).run();","class":"lineCov","hits":"1","order":"3045","possible_hits":"1",},
{"lineNum":" 1078","line":"}"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"fn parseTry(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3065","possible_hits":"1",},
{"lineNum":" 1081","line":"    std.debug.assert(psr.lexer.token.ty == .Try);","class":"lineCov","hits":"1","order":"3066","possible_hits":"1",},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3067","possible_hits":"1",},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3068","possible_hits":"1",},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    const tryBlock = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"3069","possible_hits":"1",},
{"lineNum":" 1088","line":"    if (!tryBlock.isSuccess())","class":"lineCov","hits":"2","order":"3070","possible_hits":"2",},
{"lineNum":" 1089","line":"        return tryBlock;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"    var nd = makeNode(psr.getAllocator(), csr, .Try, node.Try{","class":"lineCov","hits":"2","order":"3071","possible_hits":"2",},
{"lineNum":" 1092","line":"        .tryBlock = tryBlock.Success,","class":"linePartCov","hits":"2","order":"3072","possible_hits":"3",},
{"lineNum":" 1093","line":"        .catchBlocks = node.Try.CatchList{},","class":"lineCov","hits":"1","order":"3073","possible_hits":"1",},
{"lineNum":" 1094","line":"        .finallyBlock = null,","class":"lineCov","hits":"1","order":"3074","possible_hits":"1",},
{"lineNum":" 1095","line":"    });"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"    while (psr.lexer.token.ty == .Catch) {","class":"lineCov","hits":"3","order":"3075","possible_hits":"3",},
{"lineNum":" 1098","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3076","possible_hits":"1",},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"        if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"3077","possible_hits":"2",},
{"lineNum":" 1101","line":"            return ParseResult.expected(\"\'(\' after \'catch\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3078","possible_hits":"1",},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"        if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"3079","possible_hits":"2",},
{"lineNum":" 1106","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1107","line":"                \"identifier for caught exception\","},
{"lineNum":" 1108","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1109","line":"            );"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"        const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3080","possible_hits":"1",},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3081","possible_hits":"1",},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"        if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"3082","possible_hits":"2",},
{"lineNum":" 1116","line":"            return ParseResult.expected(\"\')\' after \'catch\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3083","possible_hits":"1",},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"        const block = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"3084","possible_hits":"1",},
{"lineNum":" 1121","line":"        if (!block.isSuccess())","class":"lineCov","hits":"2","order":"3085","possible_hits":"2",},
{"lineNum":" 1122","line":"            return block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"        nd.data.Try.catchBlocks.append(psr.getAllocator(), node.Try.Catch{","class":"linePartCov","hits":"3","order":"3086","possible_hits":"4",},
{"lineNum":" 1125","line":"            .name = name,","class":"lineCov","hits":"1","order":"3087","possible_hits":"1",},
{"lineNum":" 1126","line":"            .block = block.Success,","class":"linePartCov","hits":"2","order":"3088","possible_hits":"3",},
{"lineNum":" 1127","line":"        }) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"3089","possible_hits":"2",},
{"lineNum":" 1128","line":"    }"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"    if (psr.lexer.token.ty == .Finally) {","class":"linePartCov","hits":"2","order":"3090","possible_hits":"3",},
{"lineNum":" 1131","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3091","possible_hits":"1",},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"        const block = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"3092","possible_hits":"1",},
{"lineNum":" 1134","line":"        if (!block.isSuccess())","class":"lineCov","hits":"2","order":"3093","possible_hits":"2",},
{"lineNum":" 1135","line":"            return block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"        nd.data.Try.finallyBlock = block.Success;","class":"linePartCov","hits":"2","order":"3094","possible_hits":"3",},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3095","possible_hits":"1",},
{"lineNum":" 1141","line":"}"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"test \"can parse try-catch\" {","class":"lineCov","hits":"2","order":"3062","possible_hits":"2",},
{"lineNum":" 1144","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3107","possible_hits":"1",},
{"lineNum":" 1145","line":"        .code = \"try {} catch (e) {} catch (f) {} finally {}\","},
{"lineNum":" 1146","line":"        .check = (struct {"},
{"lineNum":" 1147","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3096","possible_hits":"2",},
{"lineNum":" 1148","line":"                try expectEqual(NodeType.Try, value.getType());","class":"lineCov","hits":"1","order":"3097","possible_hits":"1",},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"                const t = value.data.Try;","class":"linePartCov","hits":"2","order":"3098","possible_hits":"3",},
{"lineNum":" 1151","line":"                try expectEqual(NodeType.Block, t.tryBlock.getType());","class":"linePartCov","hits":"1","order":"3099","possible_hits":"2",},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"                const catches = t.catchBlocks.items;","class":"lineCov","hits":"1","order":"3100","possible_hits":"1",},
{"lineNum":" 1154","line":"                try expectEqual(@intCast(usize, 2), catches.len);","class":"lineCov","hits":"1","order":"3101","possible_hits":"1",},
{"lineNum":" 1155","line":"                try expectEqualStrings(\"e\", catches[0].name);","class":"linePartCov","hits":"1","order":"3102","possible_hits":"2",},
{"lineNum":" 1156","line":"                try expectEqual(NodeType.Block, catches[0].block.getType());","class":"linePartCov","hits":"1","order":"3103","possible_hits":"2",},
{"lineNum":" 1157","line":"                try expectEqualStrings(\"f\", catches[1].name);","class":"linePartCov","hits":"1","order":"3104","possible_hits":"2",},
{"lineNum":" 1158","line":"                try expectEqual(NodeType.Block, catches[1].block.getType());","class":"linePartCov","hits":"1","order":"3105","possible_hits":"2",},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"                try expectEqual(NodeType.Block, t.finallyBlock.?.getType());","class":"linePartCov","hits":"1","order":"3106","possible_hits":"2",},
{"lineNum":" 1161","line":"            }"},
{"lineNum":" 1162","line":"        }).check,"},
{"lineNum":" 1163","line":"    }).run();","class":"lineCov","hits":"1","order":"3063","possible_hits":"1",},
{"lineNum":" 1164","line":"}"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"fn parseExprStmt(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2741","possible_hits":"1",},
{"lineNum":" 1167","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"2742","possible_hits":"1",},
{"lineNum":" 1168","line":"    switch (expr) {","class":"linePartCov","hits":"1","order":"2743","possible_hits":"2",},
{"lineNum":" 1169","line":"        .Success => {"},
{"lineNum":" 1170","line":"            eatSemi(psr);","class":"lineCov","hits":"1","order":"2744","possible_hits":"1",},
{"lineNum":" 1171","line":"            return expr;","class":"lineCov","hits":"1","order":"2745","possible_hits":"1",},
{"lineNum":" 1172","line":"        },"},
{"lineNum":" 1173","line":"        .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1174","line":"        .NoMatch => return ParseResult.expected(\"a statement\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1175","line":"    }"},
{"lineNum":" 1176","line":"}"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"test \"can parse expression statements\" {","class":"lineCov","hits":"2","order":"3108","possible_hits":"2",},
{"lineNum":" 1179","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3118","possible_hits":"1",},
{"lineNum":" 1180","line":"        .code = \"a = 3;\","},
{"lineNum":" 1181","line":"        .check = (struct {"},
{"lineNum":" 1182","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3110","possible_hits":"2",},
{"lineNum":" 1183","line":"                try expectEqual(NodeType.BinaryOp, value.getType());","class":"lineCov","hits":"1","order":"3111","possible_hits":"1",},
{"lineNum":" 1184","line":"                const op = value.data.BinaryOp;","class":"linePartCov","hits":"2","order":"3112","possible_hits":"3",},
{"lineNum":" 1185","line":"                try expectEqual(TokenType.Assign, op.op);","class":"linePartCov","hits":"1","order":"3113","possible_hits":"2",},
{"lineNum":" 1186","line":"                try expectEqual(NodeType.Ident, op.left.getType());","class":"lineCov","hits":"1","order":"3114","possible_hits":"1",},
{"lineNum":" 1187","line":"                try expectEqualStrings(\"a\", op.left.data.Ident);","class":"lineCov","hits":"2","order":"3115","possible_hits":"2",},
{"lineNum":" 1188","line":"                try expectEqual(NodeType.Int, op.right.getType());","class":"lineCov","hits":"1","order":"3116","possible_hits":"1",},
{"lineNum":" 1189","line":"                try expectEqualStrings(\"3\", op.right.data.Int);","class":"lineCov","hits":"2","order":"3117","possible_hits":"2",},
{"lineNum":" 1190","line":"            }"},
{"lineNum":" 1191","line":"        }).check,"},
{"lineNum":" 1192","line":"    }).run();","class":"lineCov","hits":"1","order":"3109","possible_hits":"1",},
{"lineNum":" 1193","line":"}"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"fn parseLabelled(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2857","possible_hits":"1",},
{"lineNum":" 1196","line":"    std.debug.assert(psr.lexer.token.ty == .Ident);","class":"lineCov","hits":"1","order":"2858","possible_hits":"1",},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    const ctx = psr.lexer.save();","class":"lineCov","hits":"1","order":"2859","possible_hits":"1",},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"    if (psr.lexer.next().ty == .Colon) {","class":"lineCov","hits":"2","order":"2860","possible_hits":"2",},
{"lineNum":" 1201","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3121","possible_hits":"1",},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"        const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"3122","possible_hits":"1",},
{"lineNum":" 1204","line":"        if (!stmt.isSuccess())","class":"lineCov","hits":"2","order":"3123","possible_hits":"2",},
{"lineNum":" 1205","line":"            return stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"        return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3128","possible_hits":"1",},
{"lineNum":" 1208","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3124","possible_hits":"1",},
{"lineNum":" 1209","line":"            ctx.token.csr,","class":"lineCov","hits":"1","order":"3125","possible_hits":"1",},
{"lineNum":" 1210","line":"            .Labelled,"},
{"lineNum":" 1211","line":"            node.Labelled{"},
{"lineNum":" 1212","line":"                .label = ctx.token.data,","class":"lineCov","hits":"1","order":"3126","possible_hits":"1",},
{"lineNum":" 1213","line":"                .stmt = stmt.Success,","class":"linePartCov","hits":"2","order":"3127","possible_hits":"3",},
{"lineNum":" 1214","line":"            },"},
{"lineNum":" 1215","line":"        ));"},
{"lineNum":" 1216","line":"    }"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"    psr.lexer.restore(ctx);","class":"lineCov","hits":"1","order":"2861","possible_hits":"1",},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"    return parseExprStmt(psr);","class":"lineCov","hits":"1","order":"2862","possible_hits":"1",},
{"lineNum":" 1221","line":"}"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"test \"can parse labelled statement\" {","class":"lineCov","hits":"2","order":"3119","possible_hits":"2",},
{"lineNum":" 1224","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3134","possible_hits":"1",},
{"lineNum":" 1225","line":"        .code = \"aLabel: a = 3;\","},
{"lineNum":" 1226","line":"        .check = (struct {"},
{"lineNum":" 1227","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3129","possible_hits":"2",},
{"lineNum":" 1228","line":"                try expectEqual(NodeType.Labelled, value.getType());","class":"lineCov","hits":"1","order":"3130","possible_hits":"1",},
{"lineNum":" 1229","line":"                const labelled = value.data.Labelled;","class":"linePartCov","hits":"2","order":"3131","possible_hits":"3",},
{"lineNum":" 1230","line":"                try expectEqualStrings(\"aLabel\", labelled.label);","class":"linePartCov","hits":"1","order":"3132","possible_hits":"2",},
{"lineNum":" 1231","line":"                try expectEqual(NodeType.BinaryOp, labelled.stmt.getType());","class":"lineCov","hits":"1","order":"3133","possible_hits":"1",},
{"lineNum":" 1232","line":"            }"},
{"lineNum":" 1233","line":"        }).check,"},
{"lineNum":" 1234","line":"    }).run();","class":"lineCov","hits":"1","order":"3120","possible_hits":"1",},
{"lineNum":" 1235","line":"}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"fn parseAlias(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3138","possible_hits":"1",},
{"lineNum":" 1238","line":"    std.debug.assert(psr.lexer.token.ty == .Type);","class":"lineCov","hits":"1","order":"3139","possible_hits":"1",},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3140","possible_hits":"1",},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"3141","possible_hits":"1",},
{"lineNum":" 1243","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"2","order":"3142","possible_hits":"2",},
{"lineNum":" 1244","line":"        return ParseResult.expected(\"type name\", name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3143","possible_hits":"1",},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"    if (psr.lexer.token.ty != .Assign)","class":"lineCov","hits":"2","order":"3144","possible_hits":"2",},
{"lineNum":" 1249","line":"        return ParseResult.expected(Token.Type.Assign, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3145","possible_hits":"1",},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"    const value = psr.parseType();","class":"lineCov","hits":"1","order":"3146","possible_hits":"1",},
{"lineNum":" 1254","line":"    if (value.isError()) {","class":"lineCov","hits":"2","order":"3147","possible_hits":"2",},
{"lineNum":" 1255","line":"        return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1256","line":"    } else if (value.isNoMatch()) {","class":"lineCov","hits":"2","order":"3150","possible_hits":"2",},
{"lineNum":" 1257","line":"        return ParseResult.expected(\"name for type alias\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1258","line":"    }"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"3153","possible_hits":"1",},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3157","possible_hits":"1",},
{"lineNum":" 1263","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3154","possible_hits":"1",},
{"lineNum":" 1264","line":"        csr,"},
{"lineNum":" 1265","line":"        .Alias,"},
{"lineNum":" 1266","line":"        node.Alias{"},
{"lineNum":" 1267","line":"            .name = name.data,","class":"lineCov","hits":"1","order":"3155","possible_hits":"1",},
{"lineNum":" 1268","line":"            .value = value.Success,","class":"linePartCov","hits":"1","order":"3156","possible_hits":"2",},
{"lineNum":" 1269","line":"        },"},
{"lineNum":" 1270","line":"    ));"},
{"lineNum":" 1271","line":"}"},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"test \"can parse type alias statement\" {","class":"lineCov","hits":"2","order":"3135","possible_hits":"2",},
{"lineNum":" 1274","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3169","possible_hits":"1",},
{"lineNum":" 1275","line":"        .code = \"type IntOrString = int | string;\","},
{"lineNum":" 1276","line":"        .check = (struct {"},
{"lineNum":" 1277","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3158","possible_hits":"2",},
{"lineNum":" 1278","line":"                try expectEqual(NodeType.Alias, value.getType());","class":"lineCov","hits":"1","order":"3159","possible_hits":"1",},
{"lineNum":" 1279","line":"                const alias = value.data.Alias;","class":"linePartCov","hits":"2","order":"3160","possible_hits":"3",},
{"lineNum":" 1280","line":"                try expectEqualStrings(\"IntOrString\", alias.name);","class":"linePartCov","hits":"1","order":"3161","possible_hits":"2",},
{"lineNum":" 1281","line":"                try expectEqual(NodeType.UnionType, alias.value.getType());","class":"lineCov","hits":"1","order":"3162","possible_hits":"1",},
{"lineNum":" 1282","line":"                const types = alias.value.data.UnionType.items;","class":"linePartCov","hits":"2","order":"3163","possible_hits":"3",},
{"lineNum":" 1283","line":"                try expectEqual(@intCast(usize, 2), types.len);","class":"linePartCov","hits":"1","order":"3164","possible_hits":"2",},
{"lineNum":" 1284","line":"                try expectEqual(NodeType.TypeName, types[0].getType());","class":"linePartCov","hits":"1","order":"3165","possible_hits":"2",},
{"lineNum":" 1285","line":"                try expectEqualStrings(\"int\", types[0].data.TypeName);","class":"linePartCov","hits":"1","order":"3166","possible_hits":"2",},
{"lineNum":" 1286","line":"                try expectEqual(NodeType.TypeName, types[1].getType());","class":"linePartCov","hits":"1","order":"3167","possible_hits":"2",},
{"lineNum":" 1287","line":"                try expectEqualStrings(\"string\", types[1].data.TypeName);","class":"linePartCov","hits":"1","order":"3168","possible_hits":"2",},
{"lineNum":" 1288","line":"            }"},
{"lineNum":" 1289","line":"        }).check,"},
{"lineNum":" 1290","line":"    }).run();","class":"lineCov","hits":"1","order":"3136","possible_hits":"1",},
{"lineNum":" 1291","line":"}"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"fn parseStmtInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1796","possible_hits":"1",},
{"lineNum":" 1294","line":"    while (psr.lexer.token.ty == .Semi)","class":"lineCov","hits":"2","order":"1797","possible_hits":"2",},
{"lineNum":" 1295","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3177","possible_hits":"1",},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"    return switch (psr.lexer.token.ty) {","class":"lineCov","hits":"19","order":"1798","possible_hits":"19",},
{"lineNum":" 1298","line":"        .Var => parseDecl(psr, .Var),","class":"lineCov","hits":"1","order":"1799","possible_hits":"1",},
{"lineNum":" 1299","line":"        .Let => parseDecl(psr, .Let),","class":"lineCov","hits":"1","order":"2568","possible_hits":"1",},
{"lineNum":" 1300","line":"        .Const => parseDecl(psr, .Const),","class":"lineCov","hits":"1","order":"2571","possible_hits":"1",},
{"lineNum":" 1301","line":"        .Return => parseReturn(psr),","class":"lineCov","hits":"1","order":"2760","possible_hits":"1",},
{"lineNum":" 1302","line":"        .If => parseIf(psr),","class":"lineCov","hits":"1","order":"2607","possible_hits":"1",},
{"lineNum":" 1303","line":"        .Switch => parseSwitch(psr),","class":"lineCov","hits":"1","order":"2710","possible_hits":"1",},
{"lineNum":" 1304","line":"        .While => parseWhile(psr),","class":"lineCov","hits":"1","order":"2939","possible_hits":"1",},
{"lineNum":" 1305","line":"        .For => parseFor(psr),","class":"lineCov","hits":"1","order":"2819","possible_hits":"1",},
{"lineNum":" 1306","line":"        .Do => parseDo(psr),","class":"lineCov","hits":"1","order":"2963","possible_hits":"1",},
{"lineNum":" 1307","line":"        .LBrace => parseBlockStmt(psr),","class":"lineCov","hits":"1","order":"2629","possible_hits":"1",},
{"lineNum":" 1308","line":"        .Break => parseBreakOrContinue(psr, .Break),","class":"lineCov","hits":"1","order":"2749","possible_hits":"1",},
{"lineNum":" 1309","line":"        .Continue => parseBreakOrContinue(psr, .Continue),","class":"lineCov","hits":"1","order":"3033","possible_hits":"1",},
{"lineNum":" 1310","line":"        .Throw => parseThrow(psr),","class":"lineCov","hits":"1","order":"3046","possible_hits":"1",},
{"lineNum":" 1311","line":"        .Try => parseTry(psr),","class":"lineCov","hits":"1","order":"3064","possible_hits":"1",},
{"lineNum":" 1312","line":"        .Type => parseAlias(psr),","class":"lineCov","hits":"1","order":"3137","possible_hits":"1",},
{"lineNum":" 1313","line":"        .EOF => ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"1895","possible_hits":"1",},
{"lineNum":" 1314","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"1893","possible_hits":"1",},
{"lineNum":" 1315","line":"            psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"1894","possible_hits":"1",},
{"lineNum":" 1316","line":"            .EOF,"},
{"lineNum":" 1317","line":"            {},"},
{"lineNum":" 1318","line":"        )),"},
{"lineNum":" 1319","line":"        .Ident => parseLabelled(psr),","class":"lineCov","hits":"1","order":"2856","possible_hits":"1",},
{"lineNum":" 1320","line":"        else => parseExprStmt(psr),","class":"lineCov","hits":"1","order":"2740","possible_hits":"1",},
{"lineNum":" 1321","line":"    };"},
{"lineNum":" 1322","line":"}"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"pub fn parseStmt(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"1794","possible_hits":"1",},
{"lineNum":" 1325","line":"    return parseStmtInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"1795","possible_hits":"1",},
{"lineNum":" 1326","line":"}"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"test \"can parse end-of-file\" {","class":"lineCov","hits":"2","order":"3170","possible_hits":"2",},
{"lineNum":" 1329","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3174","possible_hits":"1",},
{"lineNum":" 1330","line":"        .code = \"\","},
{"lineNum":" 1331","line":"        .check = (struct {"},
{"lineNum":" 1332","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3172","possible_hits":"2",},
{"lineNum":" 1333","line":"                try expectEqual(NodeType.EOF, value.getType());","class":"lineCov","hits":"1","order":"3173","possible_hits":"1",},
{"lineNum":" 1334","line":"            }"},
{"lineNum":" 1335","line":"        }).check,"},
{"lineNum":" 1336","line":"    }).run();","class":"lineCov","hits":"1","order":"3171","possible_hits":"1",},
{"lineNum":" 1337","line":"}"},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"test \"can skip empty statements\" {","class":"lineCov","hits":"2","order":"3175","possible_hits":"2",},
{"lineNum":" 1340","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"3180","possible_hits":"1",},
{"lineNum":" 1341","line":"        .code = \"; ;; break;\","},
{"lineNum":" 1342","line":"        .check = (struct {"},
{"lineNum":" 1343","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"3178","possible_hits":"2",},
{"lineNum":" 1344","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"3179","possible_hits":"1",},
{"lineNum":" 1345","line":"            }"},
{"lineNum":" 1346","line":"        }).check,"},
{"lineNum":" 1347","line":"    }).run();","class":"lineCov","hits":"1","order":"3176","possible_hits":"1",},
{"lineNum":" 1348","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 19:23:58", "instrumented" : 732, "covered" : 652,};
var merged_data = [];
