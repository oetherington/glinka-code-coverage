var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Token = @import(\"../common/token.zig\").Token;"},
{"lineNum":"   26","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   27","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   28","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   29","line":"const Node = node.Node;"},
{"lineNum":"   30","line":"const NodeType = node.NodeType;"},
{"lineNum":"   31","line":"const makeNode = node.makeNode;"},
{"lineNum":"   32","line":"const Decl = node.Decl;"},
{"lineNum":"   33","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   34","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   35","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   36","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   37","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   38","line":"const typeParser = @import(\"type_parser.zig\");"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"const StmtTestCase = struct {"},
{"lineNum":"   41","line":"    code: []const u8,"},
{"lineNum":"   42","line":"    check: fn (value: Node) anyerror!void,"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    pub fn run(comptime self: @This()) !void {","class":"lineCov","hits":"90","order":"4327","possible_hits":"90",},
{"lineNum":"   45","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"30","order":"4328","possible_hits":"30",},
{"lineNum":"   46","line":"        defer arena.deinit();","class":"linePartCov","hits":"30","order":"4387","possible_hits":"210",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"30","order":"4329","possible_hits":"30",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"30","order":"4330","possible_hits":"30",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        const res = parser.next();","class":"lineCov","hits":"30","order":"4331","possible_hits":"30",},
{"lineNum":"   53","line":"        try res.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"30","order":"4373","possible_hits":"60",},
{"lineNum":"   54","line":"        try expect(res.isSuccess());","class":"linePartCov","hits":"30","order":"4374","possible_hits":"60",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        try self.check(res.Success);","class":"linePartCov","hits":"60","order":"4375","possible_hits":"90",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        const eof = parser.next();","class":"lineCov","hits":"30","order":"4383","possible_hits":"30",},
{"lineNum":"   59","line":"        try eof.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"30","order":"4384","possible_hits":"60",},
{"lineNum":"   60","line":"        try expect(eof.isSuccess());","class":"linePartCov","hits":"30","order":"4385","possible_hits":"60",},
{"lineNum":"   61","line":"        try expectEqual(NodeType.EOF, eof.Success.getType());","class":"linePartCov","hits":"60","order":"4386","possible_hits":"90",},
{"lineNum":"   62","line":"    }"},
{"lineNum":"   63","line":"};"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"fn eatSemi(psr: *TsParser) void {","class":"lineCov","hits":"2","order":"3032","possible_hits":"2",},
{"lineNum":"   66","line":"    if (psr.lexer.token.ty == TokenType.Semi)","class":"lineCov","hits":"2","order":"3033","possible_hits":"2",},
{"lineNum":"   67","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3034","possible_hits":"1",},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"fn parseDecl(","class":"lineCov","hits":"3","order":"3144","possible_hits":"3",},
{"lineNum":"   71","line":"    psr: *TsParser,"},
{"lineNum":"   72","line":"    comptime scoping: Decl.Scoping,"},
{"lineNum":"   73","line":") ParseResult {"},
{"lineNum":"   74","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"3","order":"3145","possible_hits":"3",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"3","order":"3146","possible_hits":"3",},
{"lineNum":"   77","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"6","order":"3147","possible_hits":"6",},
{"lineNum":"   78","line":"        return ParseResult.expected(TokenType.Ident, name);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    var declTy: ?Node = null;","class":"lineCov","hits":"3","order":"3148","possible_hits":"3",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    var tkn = psr.lexer.next();","class":"lineCov","hits":"3","order":"3149","possible_hits":"3",},
{"lineNum":"   83","line":"    if (tkn.ty == .Colon) {","class":"lineCov","hits":"9","order":"3150","possible_hits":"9",},
{"lineNum":"   84","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"3","order":"4306","possible_hits":"3",},
{"lineNum":"   85","line":"        const tyRes = psr.parseType();","class":"lineCov","hits":"3","order":"4307","possible_hits":"3",},
{"lineNum":"   86","line":"        if (!tyRes.isSuccess())","class":"lineCov","hits":"6","order":"4308","possible_hits":"6",},
{"lineNum":"   87","line":"            return tyRes;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   88","line":"        declTy = tyRes.Success;","class":"linePartCov","hits":"6","order":"4309","possible_hits":"9",},
{"lineNum":"   89","line":"        tkn = psr.lexer.token;","class":"lineCov","hits":"3","order":"4310","possible_hits":"3",},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    var expr: ?Node = null;","class":"lineCov","hits":"3","order":"3151","possible_hits":"3",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    if (tkn.ty == TokenType.Assign) {","class":"lineCov","hits":"9","order":"3152","possible_hits":"9",},
{"lineNum":"   95","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"3","order":"3153","possible_hits":"3",},
{"lineNum":"   96","line":"        const exprRes = psr.parseExpr();","class":"lineCov","hits":"3","order":"3159","possible_hits":"3",},
{"lineNum":"   97","line":"        if (!exprRes.isSuccess())","class":"lineCov","hits":"6","order":"3211","possible_hits":"6",},
{"lineNum":"   98","line":"            return exprRes;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"        expr = exprRes.Success;","class":"linePartCov","hits":"6","order":"3212","possible_hits":"9",},
{"lineNum":"  100","line":"        tkn = psr.lexer.token;","class":"lineCov","hits":"3","order":"3213","possible_hits":"3",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    eatSemi(psr);","class":"lineCov","hits":"3","order":"3214","possible_hits":"3",},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    const decl = Decl.new(scoping, name.data, declTy, expr);","class":"lineCov","hits":"3","order":"3215","possible_hits":"3",},
{"lineNum":"  106","line":"    const result = makeNode(psr.getAllocator(), csr, .Decl, decl);","class":"lineCov","hits":"3","order":"3216","possible_hits":"3",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    return ParseResult.success(result);","class":"lineCov","hits":"3","order":"3217","possible_hits":"3",},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"test \"can parse var, let and const declarations\" {","class":"lineCov","hits":"3","order":"4277","possible_hits":"3",},
{"lineNum":"  112","line":"    const Runner = struct {"},
{"lineNum":"  113","line":"        code: []const u8,"},
{"lineNum":"  114","line":"        expectedScoping: Decl.Scoping,"},
{"lineNum":"  115","line":"        expectedDeclType: ?Node,"},
{"lineNum":"  116","line":"        expectedValueIdent: ?[]const u8,"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"        fn run(self: @This()) !void {","class":"lineCov","hits":"3","order":"4281","possible_hits":"3",},
{"lineNum":"  119","line":"            var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"4282","possible_hits":"1",},
{"lineNum":"  120","line":"            defer arena.deinit();","class":"linePartCov","hits":"1","order":"4294","possible_hits":"9",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"            var tsParser = TsParser.new(&arena, self.code);","class":"lineCov","hits":"1","order":"4283","possible_hits":"1",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"            var parser = tsParser.getParser();","class":"lineCov","hits":"1","order":"4284","possible_hits":"1",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            const res = parser.next();","class":"lineCov","hits":"1","order":"4285","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"            try expect(res.isSuccess());","class":"linePartCov","hits":"1","order":"4286","possible_hits":"2",},
{"lineNum":"  129","line":"            try expectEqual(NodeType.Decl, res.Success.getType());","class":"linePartCov","hits":"2","order":"4287","possible_hits":"3",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"            const d = res.Success.data.Decl;","class":"linePartCov","hits":"2","order":"4288","possible_hits":"3",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"            try expectEqualStrings(\"test\", d.name);","class":"linePartCov","hits":"1","order":"4289","possible_hits":"3",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            if (self.expectedDeclType) |t| {","class":"lineCov","hits":"2","order":"4290","possible_hits":"2",},
{"lineNum":"  136","line":"                try expect(t.eql(d.ty));","class":"linePartCov","hits":"1","order":"4311","possible_hits":"2",},
{"lineNum":"  137","line":"            } else {"},
{"lineNum":"  138","line":"                try expect(d.ty == null);","class":"linePartCov","hits":"1","order":"4291","possible_hits":"2",},
{"lineNum":"  139","line":"            }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"            if (self.expectedValueIdent) |i| {","class":"lineCov","hits":"2","order":"4292","possible_hits":"2",},
{"lineNum":"  142","line":"                if (d.value) |value| {","class":"lineCov","hits":"2","order":"4314","possible_hits":"2",},
{"lineNum":"  143","line":"                    try expectEqual(NodeType.Ident, value.getType());","class":"linePartCov","hits":"1","order":"4315","possible_hits":"2",},
{"lineNum":"  144","line":"                    try expectEqualStrings(i, value.data.Ident);","class":"linePartCov","hits":"2","order":"4316","possible_hits":"3",},
{"lineNum":"  145","line":"                } else {"},
{"lineNum":"  146","line":"                    std.debug.panic(\"Value should not be null\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"                }"},
{"lineNum":"  148","line":"            } else {"},
{"lineNum":"  149","line":"                try expect(d.value == null);","class":"linePartCov","hits":"1","order":"4293","possible_hits":"2",},
{"lineNum":"  150","line":"            }"},
{"lineNum":"  151","line":"        }"},
{"lineNum":"  152","line":"    };"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    const numberType = makeNode(","class":"lineCov","hits":"1","order":"4279","possible_hits":"1",},
{"lineNum":"  155","line":"        std.testing.allocator,"},
{"lineNum":"  156","line":"        Cursor.new(1, 11),","class":"lineCov","hits":"1","order":"4278","possible_hits":"1",},
{"lineNum":"  157","line":"        NodeType.TypeName,"},
{"lineNum":"  158","line":"        \"number\","},
{"lineNum":"  159","line":"    );"},
{"lineNum":"  160","line":"    defer std.testing.allocator.destroy(numberType);","class":"linePartCov","hits":"1","order":"4324","possible_hits":"7",},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4295","possible_hits":"2",},
{"lineNum":"  163","line":"        .code = \"var test;\","},
{"lineNum":"  164","line":"        .expectedScoping = .Var,"},
{"lineNum":"  165","line":"        .expectedDeclType = null,"},
{"lineNum":"  166","line":"        .expectedValueIdent = null,"},
{"lineNum":"  167","line":"    }).run();","class":"lineCov","hits":"1","order":"4280","possible_hits":"1",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4298","possible_hits":"2",},
{"lineNum":"  170","line":"        .code = \"let test;\","},
{"lineNum":"  171","line":"        .expectedScoping = .Let,"},
{"lineNum":"  172","line":"        .expectedDeclType = null,"},
{"lineNum":"  173","line":"        .expectedValueIdent = null,"},
{"lineNum":"  174","line":"    }).run();","class":"lineCov","hits":"1","order":"4296","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4300","possible_hits":"2",},
{"lineNum":"  177","line":"        .code = \"const test;\","},
{"lineNum":"  178","line":"        .expectedScoping = .Const,"},
{"lineNum":"  179","line":"        .expectedDeclType = null,"},
{"lineNum":"  180","line":"        .expectedValueIdent = null,"},
{"lineNum":"  181","line":"    }).run();","class":"lineCov","hits":"1","order":"4299","possible_hits":"1",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4312","possible_hits":"2",},
{"lineNum":"  184","line":"        .code = \"var test: number;\",","class":"lineCov","hits":"1","order":"4302","possible_hits":"1",},
{"lineNum":"  185","line":"        .expectedScoping = .Var,","class":"lineCov","hits":"1","order":"4303","possible_hits":"1",},
{"lineNum":"  186","line":"        .expectedDeclType = numberType,","class":"lineCov","hits":"1","order":"4301","possible_hits":"1",},
{"lineNum":"  187","line":"        .expectedValueIdent = null,","class":"lineCov","hits":"1","order":"4304","possible_hits":"1",},
{"lineNum":"  188","line":"    }).run();","class":"lineCov","hits":"1","order":"4305","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4317","possible_hits":"2",},
{"lineNum":"  191","line":"        .code = \"var test = someOtherVariable;\","},
{"lineNum":"  192","line":"        .expectedScoping = .Var,"},
{"lineNum":"  193","line":"        .expectedDeclType = null,"},
{"lineNum":"  194","line":"        .expectedValueIdent = \"someOtherVariable\","},
{"lineNum":"  195","line":"    }).run();","class":"lineCov","hits":"1","order":"4313","possible_hits":"1",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    try (Runner{","class":"linePartCov","hits":"1","order":"4323","possible_hits":"2",},
{"lineNum":"  198","line":"        .code = \"var test: number = someOtherVariable;\",","class":"lineCov","hits":"1","order":"4319","possible_hits":"1",},
{"lineNum":"  199","line":"        .expectedScoping = .Var,","class":"lineCov","hits":"1","order":"4320","possible_hits":"1",},
{"lineNum":"  200","line":"        .expectedDeclType = numberType,","class":"lineCov","hits":"1","order":"4318","possible_hits":"1",},
{"lineNum":"  201","line":"        .expectedValueIdent = \"someOtherVariable\",","class":"lineCov","hits":"1","order":"4321","possible_hits":"1",},
{"lineNum":"  202","line":"    }).run();","class":"lineCov","hits":"1","order":"4322","possible_hits":"1",},
{"lineNum":"  203","line":"}"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"const BranchResult = union(Type) {"},
{"lineNum":"  206","line":"    const Type = enum {"},
{"lineNum":"  207","line":"        Branch,"},
{"lineNum":"  208","line":"        ParseResult,"},
{"lineNum":"  209","line":"    };"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    Branch: node.If.Branch,"},
{"lineNum":"  212","line":"    ParseResult: ParseResult,"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    pub fn getType(self: BranchResult) Type {","class":"lineCov","hits":"1","order":"4363","possible_hits":"1",},
{"lineNum":"  215","line":"        return @as(Type, self);","class":"lineCov","hits":"1","order":"4364","possible_hits":"1",},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":"};"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"fn parseIfBranch(psr: *TsParser) BranchResult {","class":"lineCov","hits":"1","order":"4345","possible_hits":"1",},
{"lineNum":"  220","line":"    if (psr.lexer.token.ty != .If)","class":"lineCov","hits":"2","order":"4346","possible_hits":"2",},
{"lineNum":"  221","line":"        return BranchResult{ .ParseResult = ParseResult.noMatch(null) };","class":"lineCov","hits":"1","order":"4405","possible_hits":"1",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4347","possible_hits":"1",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"4348","possible_hits":"2",},
{"lineNum":"  226","line":"        return BranchResult{ .ParseResult = ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"            \"paren after \'if\'\","},
{"lineNum":"  228","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"        ) };"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4349","possible_hits":"1",},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"4350","possible_hits":"1",},
{"lineNum":"  234","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"4351","possible_hits":"2",},
{"lineNum":"  235","line":"        return BranchResult{ .ParseResult = cond };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4352","possible_hits":"2",},
{"lineNum":"  238","line":"        return BranchResult{ .ParseResult = ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"            \"paren after if condition\","},
{"lineNum":"  240","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"        ) };"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4353","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"4354","possible_hits":"1",},
{"lineNum":"  246","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"4358","possible_hits":"2",},
{"lineNum":"  247","line":"        return BranchResult{ .ParseResult = body };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    return BranchResult{ .Branch = node.If.Branch{","class":"lineCov","hits":"2","order":"4359","possible_hits":"2",},
{"lineNum":"  250","line":"        .cond = cond.Success,","class":"linePartCov","hits":"1","order":"4360","possible_hits":"2",},
{"lineNum":"  251","line":"        .ifTrue = body.Success,","class":"linePartCov","hits":"2","order":"4361","possible_hits":"3",},
{"lineNum":"  252","line":"    } };"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"fn parseIf(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4333","possible_hits":"1",},
{"lineNum":"  256","line":"    std.debug.assert(psr.lexer.token.ty == .If);","class":"lineCov","hits":"1","order":"4334","possible_hits":"1",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4335","possible_hits":"1",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    var data = node.If{","class":"lineCov","hits":"1","order":"4336","possible_hits":"1",},
{"lineNum":"  261","line":"        .branches = node.If.BranchList{},"},
{"lineNum":"  262","line":"        .elseBranch = null,"},
{"lineNum":"  263","line":"    };"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    var branchNum: usize = 0;","class":"lineCov","hits":"1","order":"4337","possible_hits":"1",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    while (true) {","class":"lineCov","hits":"2","order":"4338","possible_hits":"2",},
{"lineNum":"  268","line":"        var isElse: bool = undefined;","class":"lineCov","hits":"1","order":"4339","possible_hits":"1",},
{"lineNum":"  269","line":"        if (psr.lexer.token.ty == .Else) {","class":"lineCov","hits":"3","order":"4340","possible_hits":"3",},
{"lineNum":"  270","line":"            isElse = true;","class":"lineCov","hits":"1","order":"4391","possible_hits":"1",},
{"lineNum":"  271","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4392","possible_hits":"1",},
{"lineNum":"  272","line":"        } else if (branchNum > 0) {","class":"lineCov","hits":"1","order":"4341","possible_hits":"1",},
{"lineNum":"  273","line":"            break;","class":"lineCov","hits":"1","order":"4369","possible_hits":"1",},
{"lineNum":"  274","line":"        } else {"},
{"lineNum":"  275","line":"            isElse = false;","class":"lineCov","hits":"1","order":"4342","possible_hits":"1",},
{"lineNum":"  276","line":"        }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        branchNum += 1;","class":"linePartCov","hits":"1","order":"4343","possible_hits":"2",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"        const branch = parseIfBranch(psr);","class":"lineCov","hits":"1","order":"4344","possible_hits":"1",},
{"lineNum":"  281","line":"        if (branch.getType() == .Branch) {","class":"lineCov","hits":"2","order":"4362","possible_hits":"2",},
{"lineNum":"  282","line":"            data.branches.append(","class":"lineCov","hits":"1","order":"4367","possible_hits":"1",},
{"lineNum":"  283","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"4365","possible_hits":"1",},
{"lineNum":"  284","line":"                branch.Branch,","class":"linePartCov","hits":"2","order":"4366","possible_hits":"3",},
{"lineNum":"  285","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"4368","possible_hits":"2",},
{"lineNum":"  286","line":"        } else {"},
{"lineNum":"  287","line":"            const res = branch.ParseResult;","class":"linePartCov","hits":"2","order":"4406","possible_hits":"3",},
{"lineNum":"  288","line":"            std.debug.assert(!res.isSuccess());","class":"lineCov","hits":"1","order":"4407","possible_hits":"1",},
{"lineNum":"  289","line":"            if (res.getType() == .NoMatch) {","class":"lineCov","hits":"1","order":"4408","possible_hits":"1",},
{"lineNum":"  290","line":"                if (isElse) {","class":"lineCov","hits":"1","order":"4409","possible_hits":"1",},
{"lineNum":"  291","line":"                    const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"4410","possible_hits":"1",},
{"lineNum":"  292","line":"                    switch (stmt.getType()) {","class":"linePartCov","hits":"1","order":"4411","possible_hits":"2",},
{"lineNum":"  293","line":"                        .Success => {"},
{"lineNum":"  294","line":"                            data.elseBranch = stmt.Success;","class":"linePartCov","hits":"2","order":"4412","possible_hits":"3",},
{"lineNum":"  295","line":"                            break;","class":"lineCov","hits":"1","order":"4413","possible_hits":"1",},
{"lineNum":"  296","line":"                        },"},
{"lineNum":"  297","line":"                        .Error => return stmt,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"                        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"                            \"\'if\' after \'else\'\","},
{"lineNum":"  300","line":"                            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"                        ),"},
{"lineNum":"  302","line":"                    }"},
{"lineNum":"  303","line":"                } else {"},
{"lineNum":"  304","line":"                    break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"                }"},
{"lineNum":"  306","line":"            } else {"},
{"lineNum":"  307","line":"                return res;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"            }"},
{"lineNum":"  309","line":"        }"},
{"lineNum":"  310","line":"    }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4372","possible_hits":"1",},
{"lineNum":"  313","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4370","possible_hits":"1",},
{"lineNum":"  314","line":"        csr,"},
{"lineNum":"  315","line":"        .If,"},
{"lineNum":"  316","line":"        data,","class":"lineCov","hits":"1","order":"4371","possible_hits":"1",},
{"lineNum":"  317","line":"    ));"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"test \"can parse a simple if statement\" {","class":"lineCov","hits":"2","order":"4325","possible_hits":"2",},
{"lineNum":"  321","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4388","possible_hits":"1",},
{"lineNum":"  322","line":"        .code = \"if (a) {}\","},
{"lineNum":"  323","line":"        .check = (struct {"},
{"lineNum":"  324","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4376","possible_hits":"2",},
{"lineNum":"  325","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"4377","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"4378","possible_hits":"3",},
{"lineNum":"  328","line":"                try expectEqual(@intCast(usize, 1), branches.len);","class":"linePartCov","hits":"1","order":"4379","possible_hits":"2",},
{"lineNum":"  329","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"4380","possible_hits":"2",},
{"lineNum":"  330","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4381","possible_hits":"2",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"                try expect(value.data.If.elseBranch == null);","class":"lineCov","hits":"2","order":"4382","possible_hits":"2",},
{"lineNum":"  333","line":"            }"},
{"lineNum":"  334","line":"        }).check,"},
{"lineNum":"  335","line":"    }).run();","class":"lineCov","hits":"1","order":"4326","possible_hits":"1",},
{"lineNum":"  336","line":"}"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"test \"can parse an if statement with an \'else if\' branch\" {","class":"lineCov","hits":"2","order":"4389","possible_hits":"2",},
{"lineNum":"  339","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4402","possible_hits":"1",},
{"lineNum":"  340","line":"        .code = \"if (a) {} else if (b) {}\","},
{"lineNum":"  341","line":"        .check = (struct {"},
{"lineNum":"  342","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4393","possible_hits":"2",},
{"lineNum":"  343","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"4394","possible_hits":"1",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"4395","possible_hits":"3",},
{"lineNum":"  346","line":"                try expectEqual(@intCast(usize, 2), branches.len);","class":"linePartCov","hits":"1","order":"4396","possible_hits":"2",},
{"lineNum":"  347","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"4397","possible_hits":"2",},
{"lineNum":"  348","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4398","possible_hits":"2",},
{"lineNum":"  349","line":"                try expectEqual(NodeType.Ident, branches[1].cond.getType());","class":"linePartCov","hits":"1","order":"4399","possible_hits":"2",},
{"lineNum":"  350","line":"                try expectEqual(NodeType.Block, branches[1].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4400","possible_hits":"2",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"                try expect(value.data.If.elseBranch == null);","class":"lineCov","hits":"2","order":"4401","possible_hits":"2",},
{"lineNum":"  353","line":"            }"},
{"lineNum":"  354","line":"        }).check,"},
{"lineNum":"  355","line":"    }).run();","class":"lineCov","hits":"1","order":"4390","possible_hits":"1",},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"test \"can parse an if statement with an \'else\' branch\" {","class":"lineCov","hits":"2","order":"4403","possible_hits":"2",},
{"lineNum":"  359","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4422","possible_hits":"1",},
{"lineNum":"  360","line":"        .code = \"if (a) {} else {}\","},
{"lineNum":"  361","line":"        .check = (struct {"},
{"lineNum":"  362","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4414","possible_hits":"2",},
{"lineNum":"  363","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"4415","possible_hits":"1",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"4416","possible_hits":"3",},
{"lineNum":"  366","line":"                try expectEqual(@intCast(usize, 1), branches.len);","class":"linePartCov","hits":"1","order":"4417","possible_hits":"2",},
{"lineNum":"  367","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"4418","possible_hits":"2",},
{"lineNum":"  368","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4419","possible_hits":"2",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"                const elseBranch = value.data.If.elseBranch.?;","class":"lineCov","hits":"2","order":"4420","possible_hits":"2",},
{"lineNum":"  371","line":"                try expectEqual(NodeType.Block, elseBranch.getType());","class":"linePartCov","hits":"1","order":"4421","possible_hits":"2",},
{"lineNum":"  372","line":"            }"},
{"lineNum":"  373","line":"        }).check,"},
{"lineNum":"  374","line":"    }).run();","class":"lineCov","hits":"1","order":"4404","possible_hits":"1",},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"test \"can parse an if statement with an \'else if\' and an \'else\' branch\" {","class":"lineCov","hits":"2","order":"4423","possible_hits":"2",},
{"lineNum":"  378","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4435","possible_hits":"1",},
{"lineNum":"  379","line":"        .code = \"if (a) {} else if (b) {} else {}\","},
{"lineNum":"  380","line":"        .check = (struct {"},
{"lineNum":"  381","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4425","possible_hits":"2",},
{"lineNum":"  382","line":"                try expectEqual(NodeType.If, value.getType());","class":"lineCov","hits":"1","order":"4426","possible_hits":"1",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"                const branches = value.data.If.branches.items;","class":"linePartCov","hits":"2","order":"4427","possible_hits":"3",},
{"lineNum":"  385","line":"                try expectEqual(@intCast(usize, 2), branches.len);","class":"linePartCov","hits":"1","order":"4428","possible_hits":"2",},
{"lineNum":"  386","line":"                try expectEqual(NodeType.Ident, branches[0].cond.getType());","class":"linePartCov","hits":"1","order":"4429","possible_hits":"2",},
{"lineNum":"  387","line":"                try expectEqual(NodeType.Block, branches[0].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4430","possible_hits":"2",},
{"lineNum":"  388","line":"                try expectEqual(NodeType.Ident, branches[1].cond.getType());","class":"linePartCov","hits":"1","order":"4431","possible_hits":"2",},
{"lineNum":"  389","line":"                try expectEqual(NodeType.Block, branches[1].ifTrue.getType());","class":"linePartCov","hits":"1","order":"4432","possible_hits":"2",},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"                const elseBranch = value.data.If.elseBranch.?;","class":"lineCov","hits":"2","order":"4433","possible_hits":"2",},
{"lineNum":"  392","line":"                try expectEqual(NodeType.Block, elseBranch.getType());","class":"linePartCov","hits":"1","order":"4434","possible_hits":"2",},
{"lineNum":"  393","line":"            }"},
{"lineNum":"  394","line":"        }).check,"},
{"lineNum":"  395","line":"    }).run();","class":"lineCov","hits":"1","order":"4424","possible_hits":"1",},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"fn parseSwitch(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4439","possible_hits":"1",},
{"lineNum":"  399","line":"    std.debug.assert(psr.lexer.token.ty == .Switch);","class":"lineCov","hits":"1","order":"4440","possible_hits":"1",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4441","possible_hits":"1",},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    const lparen = psr.lexer.next();","class":"lineCov","hits":"1","order":"4442","possible_hits":"1",},
{"lineNum":"  404","line":"    if (lparen.ty != .LParen)","class":"lineCov","hits":"2","order":"4443","possible_hits":"2",},
{"lineNum":"  405","line":"        return ParseResult.expected(TokenType.LParen, lparen);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    const next = psr.lexer.next();","class":"lineCov","hits":"1","order":"4444","possible_hits":"1",},
{"lineNum":"  408","line":"    const expr = switch (psr.parseExpr()) {","class":"linePartCov","hits":"1","order":"4445","possible_hits":"2",},
{"lineNum":"  409","line":"        .Success => |exp| exp,","class":"lineCov","hits":"1","order":"4446","possible_hits":"1",},
{"lineNum":"  410","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"            \"expression for switch statement\","},
{"lineNum":"  413","line":"            next,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"        ),"},
{"lineNum":"  415","line":"    };"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4447","possible_hits":"2",},
{"lineNum":"  418","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4448","possible_hits":"1",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    if (psr.lexer.token.ty != .LBrace)","class":"lineCov","hits":"2","order":"4449","possible_hits":"2",},
{"lineNum":"  423","line":"        return ParseResult.expected(TokenType.LBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4450","possible_hits":"1",},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"4451","possible_hits":"1",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"    const nd = makeNode(alloc, csr, .Switch, node.Switch{","class":"lineCov","hits":"1","order":"4455","possible_hits":"1",},
{"lineNum":"  430","line":"        .expr = expr,","class":"lineCov","hits":"1","order":"4452","possible_hits":"1",},
{"lineNum":"  431","line":"        .cases = .{},","class":"lineCov","hits":"1","order":"4453","possible_hits":"1",},
{"lineNum":"  432","line":"        .default = null,","class":"lineCov","hits":"1","order":"4454","possible_hits":"1",},
{"lineNum":"  433","line":"    });"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    while (psr.lexer.token.ty == .Case) {","class":"lineCov","hits":"2","order":"4456","possible_hits":"2",},
{"lineNum":"  436","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4457","possible_hits":"1",},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"        const value = switch (psr.parseExpr()) {","class":"linePartCov","hits":"1","order":"4458","possible_hits":"2",},
{"lineNum":"  439","line":"            .Success => |val| val,","class":"lineCov","hits":"1","order":"4459","possible_hits":"1",},
{"lineNum":"  440","line":"            .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"                \"expression after \'case\'\","},
{"lineNum":"  443","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"            ),"},
{"lineNum":"  445","line":"        };"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        var case = node.Switch.Case{"},
{"lineNum":"  448","line":"            .value = value,","class":"lineCov","hits":"1","order":"4460","possible_hits":"1",},
{"lineNum":"  449","line":"            .stmts = node.NodeList{},","class":"lineCov","hits":"1","order":"4461","possible_hits":"1",},
{"lineNum":"  450","line":"        };"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"        if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"4462","possible_hits":"2",},
{"lineNum":"  453","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4463","possible_hits":"1",},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"        while (psr.lexer.token.ty != .Case and","class":"lineCov","hits":"2","order":"4464","possible_hits":"2",},
{"lineNum":"  458","line":"            psr.lexer.token.ty != .Default and","class":"lineCov","hits":"2","order":"4465","possible_hits":"2",},
{"lineNum":"  459","line":"            psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"1","order":"4466","possible_hits":"1",},
{"lineNum":"  460","line":"        {"},
{"lineNum":"  461","line":"            switch (psr.parseStmt()) {","class":"linePartCov","hits":"2","order":"4467","possible_hits":"3",},
{"lineNum":"  462","line":"                .Success => |stmt| case.stmts.append(","class":"lineCov","hits":"2","order":"4474","possible_hits":"2",},
{"lineNum":"  463","line":"                    alloc,"},
{"lineNum":"  464","line":"                    stmt,","class":"lineCov","hits":"1","order":"4475","possible_hits":"1",},
{"lineNum":"  465","line":"                ) catch allocate.reportAndExit(),","class":"lineCov","hits":"2","order":"4476","possible_hits":"2",},
{"lineNum":"  466","line":"                .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"                .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"                    \"a statement\","},
{"lineNum":"  469","line":"                    psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"                ),"},
{"lineNum":"  471","line":"            }"},
{"lineNum":"  472","line":"        }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"        nd.data.Switch.cases.append(alloc, case) catch allocate.reportAndExit();","class":"lineCov","hits":"2","order":"4487","possible_hits":"2",},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    if (psr.lexer.token.ty == .Default) {","class":"linePartCov","hits":"2","order":"4509","possible_hits":"3",},
{"lineNum":"  478","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4510","possible_hits":"1",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"4511","possible_hits":"2",},
{"lineNum":"  481","line":"            return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4512","possible_hits":"1",},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        var default = node.NodeList{};","class":"lineCov","hits":"1","order":"4513","possible_hits":"1",},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"        while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"4514","possible_hits":"2",},
{"lineNum":"  488","line":"            switch (psr.parseStmt()) {","class":"linePartCov","hits":"2","order":"4515","possible_hits":"3",},
{"lineNum":"  489","line":"                .Success => |stmt| default.append(","class":"lineCov","hits":"2","order":"4516","possible_hits":"2",},
{"lineNum":"  490","line":"                    alloc,"},
{"lineNum":"  491","line":"                    stmt,","class":"lineCov","hits":"1","order":"4517","possible_hits":"1",},
{"lineNum":"  492","line":"                ) catch allocate.reportAndExit(),","class":"lineCov","hits":"2","order":"4518","possible_hits":"2",},
{"lineNum":"  493","line":"                .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"                .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"                    \"a statement\","},
{"lineNum":"  496","line":"                    psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"                ),"},
{"lineNum":"  498","line":"            }"},
{"lineNum":"  499","line":"        }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"        nd.data.Switch.default = default;","class":"linePartCov","hits":"2","order":"4519","possible_hits":"3",},
{"lineNum":"  502","line":"    }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    if (psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"2","order":"4520","possible_hits":"2",},
{"lineNum":"  505","line":"        return ParseResult.expected(TokenType.RBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4521","possible_hits":"1",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"4522","possible_hits":"1",},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"test \"can parse a switch statement\" {","class":"lineCov","hits":"2","order":"4436","possible_hits":"2",},
{"lineNum":"  513","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4544","possible_hits":"1",},
{"lineNum":"  514","line":"        .code ="},
{"lineNum":"  515","line":"        \\\\switch (a) {"},
{"lineNum":"  516","line":"        \\\\  case 1:"},
{"lineNum":"  517","line":"        \\\\    null;"},
{"lineNum":"  518","line":"        \\\\    break;"},
{"lineNum":"  519","line":"        \\\\  case 2:"},
{"lineNum":"  520","line":"        \\\\    return;"},
{"lineNum":"  521","line":"        \\\\  default:"},
{"lineNum":"  522","line":"        \\\\    null;"},
{"lineNum":"  523","line":"        \\\\}"},
{"lineNum":"  524","line":"        ,"},
{"lineNum":"  525","line":"        .check = (struct {"},
{"lineNum":"  526","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4523","possible_hits":"2",},
{"lineNum":"  527","line":"                try expectEqual(NodeType.Switch, value.getType());","class":"lineCov","hits":"1","order":"4524","possible_hits":"1",},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"                const sw = value.data.Switch;","class":"linePartCov","hits":"2","order":"4525","possible_hits":"3",},
{"lineNum":"  530","line":"                try expectEqual(NodeType.Ident, sw.expr.getType());","class":"linePartCov","hits":"1","order":"4526","possible_hits":"2",},
{"lineNum":"  531","line":"                try expectEqualStrings(\"a\", sw.expr.data.Ident);","class":"lineCov","hits":"2","order":"4527","possible_hits":"2",},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"                const cases = sw.cases.items;","class":"lineCov","hits":"1","order":"4528","possible_hits":"1",},
{"lineNum":"  534","line":"                try expectEqual(@intCast(usize, 2), cases.len);","class":"lineCov","hits":"1","order":"4529","possible_hits":"1",},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"                try expectEqual(NodeType.Int, cases[0].value.getType());","class":"linePartCov","hits":"1","order":"4530","possible_hits":"2",},
{"lineNum":"  537","line":"                try expectEqualStrings(\"1\", cases[0].value.data.Int);","class":"linePartCov","hits":"1","order":"4531","possible_hits":"2",},
{"lineNum":"  538","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"4533","possible_hits":"2",},
{"lineNum":"  539","line":"                    NodeType.Null,"},
{"lineNum":"  540","line":"                    cases[0].stmts.items[0].getType(),","class":"linePartCov","hits":"1","order":"4532","possible_hits":"2",},
{"lineNum":"  541","line":"                );"},
{"lineNum":"  542","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"4535","possible_hits":"2",},
{"lineNum":"  543","line":"                    NodeType.Break,"},
{"lineNum":"  544","line":"                    cases[0].stmts.items[1].getType(),","class":"linePartCov","hits":"1","order":"4534","possible_hits":"2",},
{"lineNum":"  545","line":"                );"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"                try expectEqual(NodeType.Int, cases[1].value.getType());","class":"linePartCov","hits":"1","order":"4536","possible_hits":"2",},
{"lineNum":"  548","line":"                try expectEqualStrings(\"2\", cases[1].value.data.Int);","class":"linePartCov","hits":"1","order":"4537","possible_hits":"2",},
{"lineNum":"  549","line":"                try expectEqual(","class":"linePartCov","hits":"1","order":"4539","possible_hits":"2",},
{"lineNum":"  550","line":"                    NodeType.Return,"},
{"lineNum":"  551","line":"                    cases[1].stmts.items[0].getType(),","class":"linePartCov","hits":"1","order":"4538","possible_hits":"2",},
{"lineNum":"  552","line":"                );"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"                try expect(sw.default != null);","class":"lineCov","hits":"1","order":"4540","possible_hits":"1",},
{"lineNum":"  555","line":"                const default = sw.default.?.items;","class":"linePartCov","hits":"1","order":"4541","possible_hits":"2",},
{"lineNum":"  556","line":"                try expectEqual(@intCast(usize, 1), default.len);","class":"linePartCov","hits":"1","order":"4542","possible_hits":"2",},
{"lineNum":"  557","line":"                try expectEqual(NodeType.Null, default[0].getType());","class":"linePartCov","hits":"1","order":"4543","possible_hits":"2",},
{"lineNum":"  558","line":"            }"},
{"lineNum":"  559","line":"        }).check,"},
{"lineNum":"  560","line":"    }).run();","class":"lineCov","hits":"1","order":"4437","possible_hits":"1",},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"fn parseForEachClause(psr: *TsParser) ?node.For.Clause {","class":"lineCov","hits":"1","order":"4556","possible_hits":"1",},
{"lineNum":"  564","line":"    const save = psr.lexer.save();","class":"lineCov","hits":"1","order":"4557","possible_hits":"1",},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    const scoping ="},
{"lineNum":"  567","line":"        Decl.Scoping.fromTokenType(psr.lexer.token.ty) catch return null;","class":"lineCov","hits":"1","order":"4558","possible_hits":"1",},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"4559","possible_hits":"1",},
{"lineNum":"  570","line":"    if (name.ty != .Ident) {","class":"lineCov","hits":"2","order":"4560","possible_hits":"2",},
{"lineNum":"  571","line":"        psr.lexer.restore(save);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  573","line":"    }"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    const variant = switch (psr.lexer.next().ty) {","class":"lineCov","hits":"2","order":"4561","possible_hits":"2",},
{"lineNum":"  576","line":"        .In => node.For.Clause.EachClause.Variant.In,","class":"lineCov","hits":"1","order":"4646","possible_hits":"1",},
{"lineNum":"  577","line":"        .Of => node.For.Clause.EachClause.Variant.Of,","class":"lineCov","hits":"1","order":"4617","possible_hits":"1",},
{"lineNum":"  578","line":"        else => {"},
{"lineNum":"  579","line":"            psr.lexer.restore(save);","class":"lineCov","hits":"1","order":"4562","possible_hits":"1",},
{"lineNum":"  580","line":"            return null;","class":"lineCov","hits":"1","order":"4563","possible_hits":"1",},
{"lineNum":"  581","line":"        },"},
{"lineNum":"  582","line":"    };"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4618","possible_hits":"1",},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    return node.For.Clause{","class":"lineCov","hits":"2","order":"4619","possible_hits":"2",},
{"lineNum":"  587","line":"        .Each = .{","class":"lineCov","hits":"1","order":"4620","possible_hits":"1",},
{"lineNum":"  588","line":"            .scoping = scoping,","class":"lineCov","hits":"1","order":"4621","possible_hits":"1",},
{"lineNum":"  589","line":"            .variant = variant,","class":"lineCov","hits":"1","order":"4622","possible_hits":"1",},
{"lineNum":"  590","line":"            .name = name.data,","class":"lineCov","hits":"1","order":"4623","possible_hits":"1",},
{"lineNum":"  591","line":"            .expr = undefined,","class":"lineCov","hits":"1","order":"4624","possible_hits":"1",},
{"lineNum":"  592","line":"        },"},
{"lineNum":"  593","line":"    };"},
{"lineNum":"  594","line":"}"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"fn getForError(psr: *TsParser, res: ParseResult) ?ParseResult {","class":"lineCov","hits":"1","order":"4566","possible_hits":"1",},
{"lineNum":"  597","line":"    return switch (res) {","class":"linePartCov","hits":"2","order":"4567","possible_hits":"4",},
{"lineNum":"  598","line":"        .Success => null,","class":"lineCov","hits":"1","order":"4568","possible_hits":"1",},
{"lineNum":"  599","line":"        .Error => |err| ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"        .NoMatch => ParseResult.expected(\"statement in for loop\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"    };"},
{"lineNum":"  602","line":"}"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"fn parseFor(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4548","possible_hits":"1",},
{"lineNum":"  605","line":"    std.debug.assert(psr.lexer.token.ty == .For);","class":"lineCov","hits":"1","order":"4549","possible_hits":"1",},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4550","possible_hits":"1",},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"    const lparen = psr.lexer.next();","class":"lineCov","hits":"1","order":"4551","possible_hits":"1",},
{"lineNum":"  610","line":"    if (lparen.ty != .LParen)","class":"lineCov","hits":"2","order":"4552","possible_hits":"2",},
{"lineNum":"  611","line":"        return ParseResult.expected(TokenType.LParen, lparen);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4553","possible_hits":"1",},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"    var loop: node.For = undefined;","class":"lineCov","hits":"1","order":"4554","possible_hits":"1",},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"    if (parseForEachClause(psr)) |each| {","class":"lineCov","hits":"3","order":"4555","possible_hits":"3",},
{"lineNum":"  618","line":"        loop.clause = each;","class":"lineCov","hits":"1","order":"4625","possible_hits":"1",},
{"lineNum":"  619","line":"        switch (psr.parseExpr()) {","class":"linePartCov","hits":"2","order":"4626","possible_hits":"3",},
{"lineNum":"  620","line":"            .Success => |expr| loop.clause.Each.expr = expr,","class":"linePartCov","hits":"2","order":"4627","possible_hits":"3",},
{"lineNum":"  621","line":"            .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"                \"expression in for each loop\","},
{"lineNum":"  624","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  625","line":"            ),"},
{"lineNum":"  626","line":"        }"},
{"lineNum":"  627","line":"    } else {"},
{"lineNum":"  628","line":"        const pre = psr.parseStmt();","class":"lineCov","hits":"1","order":"4564","possible_hits":"1",},
{"lineNum":"  629","line":"        if (getForError(psr, pre)) |err|","class":"lineCov","hits":"2","order":"4565","possible_hits":"2",},
{"lineNum":"  630","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"        const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"4569","possible_hits":"1",},
{"lineNum":"  633","line":"        if (getForError(psr, cond)) |err|","class":"lineCov","hits":"2","order":"4570","possible_hits":"2",},
{"lineNum":"  634","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"        if (psr.lexer.token.ty != .Semi)","class":"lineCov","hits":"2","order":"4571","possible_hits":"2",},
{"lineNum":"  637","line":"            return ParseResult.expected(TokenType.Semi, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4572","possible_hits":"1",},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"        const post = psr.parseExpr();","class":"lineCov","hits":"1","order":"4573","possible_hits":"1",},
{"lineNum":"  642","line":"        if (getForError(psr, post)) |err|","class":"lineCov","hits":"2","order":"4574","possible_hits":"2",},
{"lineNum":"  643","line":"            return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"        loop.clause = node.For.Clause{"},
{"lineNum":"  646","line":"            .CStyle = .{","class":"lineCov","hits":"1","order":"4575","possible_hits":"1",},
{"lineNum":"  647","line":"                .pre = pre.Success,","class":"linePartCov","hits":"2","order":"4576","possible_hits":"3",},
{"lineNum":"  648","line":"                .cond = cond.Success,","class":"linePartCov","hits":"2","order":"4577","possible_hits":"3",},
{"lineNum":"  649","line":"                .post = post.Success,","class":"linePartCov","hits":"2","order":"4578","possible_hits":"3",},
{"lineNum":"  650","line":"            },"},
{"lineNum":"  651","line":"        };"},
{"lineNum":"  652","line":"    }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4579","possible_hits":"2",},
{"lineNum":"  655","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4580","possible_hits":"1",},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"4581","possible_hits":"1",},
{"lineNum":"  660","line":"    switch (body) {","class":"linePartCov","hits":"1","order":"4595","possible_hits":"2",},
{"lineNum":"  661","line":"        .Success => |bd| loop.body = bd,","class":"lineCov","hits":"1","order":"4596","possible_hits":"1",},
{"lineNum":"  662","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  664","line":"            \"for loop body\","},
{"lineNum":"  665","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"        ),"},
{"lineNum":"  667","line":"    }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    return ParseResult.success(makeNode(psr.getAllocator(), csr, .For, loop));","class":"lineCov","hits":"1","order":"4597","possible_hits":"1",},
{"lineNum":"  670","line":"}"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"test \"can parse c-style for loop\" {","class":"lineCov","hits":"2","order":"4545","possible_hits":"2",},
{"lineNum":"  673","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4614","possible_hits":"1",},
{"lineNum":"  674","line":"        .code = \"for (let i = 0; i < 4; i++) { a += i; }\","},
{"lineNum":"  675","line":"        .check = (struct {"},
{"lineNum":"  676","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4598","possible_hits":"2",},
{"lineNum":"  677","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"4599","possible_hits":"1",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"4600","possible_hits":"3",},
{"lineNum":"  680","line":"                try expectEqual(node.For.Clause.Type.CStyle, loop.getType());","class":"linePartCov","hits":"1","order":"4601","possible_hits":"2",},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"                const c = loop.clause.CStyle;","class":"linePartCov","hits":"2","order":"4606","possible_hits":"3",},
{"lineNum":"  683","line":"                try expectEqual(NodeType.Decl, c.pre.getType());","class":"linePartCov","hits":"1","order":"4607","possible_hits":"2",},
{"lineNum":"  684","line":"                try expectEqual(NodeType.BinaryOp, c.cond.getType());","class":"lineCov","hits":"1","order":"4608","possible_hits":"1",},
{"lineNum":"  685","line":"                try expectEqual(NodeType.PostfixOp, c.post.getType());","class":"lineCov","hits":"1","order":"4609","possible_hits":"1",},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"4610","possible_hits":"1",},
{"lineNum":"  688","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"4611","possible_hits":"3",},
{"lineNum":"  689","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"4612","possible_hits":"2",},
{"lineNum":"  690","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"4613","possible_hits":"2",},
{"lineNum":"  691","line":"            }"},
{"lineNum":"  692","line":"        }).check,"},
{"lineNum":"  693","line":"    }).run();","class":"lineCov","hits":"1","order":"4546","possible_hits":"1",},
{"lineNum":"  694","line":"}"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"test \"can parse for..of loop\" {","class":"lineCov","hits":"2","order":"4615","possible_hits":"2",},
{"lineNum":"  697","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4643","possible_hits":"1",},
{"lineNum":"  698","line":"        .code = \"for (let a of anArray) { a += 4; }\","},
{"lineNum":"  699","line":"        .check = (struct {"},
{"lineNum":"  700","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4628","possible_hits":"2",},
{"lineNum":"  701","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"4629","possible_hits":"1",},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"4630","possible_hits":"3",},
{"lineNum":"  704","line":"                try expectEqual(node.For.Clause.Type.Each, loop.getType());","class":"linePartCov","hits":"1","order":"4631","possible_hits":"2",},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"                const e = loop.clause.Each;","class":"linePartCov","hits":"2","order":"4632","possible_hits":"3",},
{"lineNum":"  707","line":"                try expectEqual(node.Decl.Scoping.Let, e.scoping);","class":"linePartCov","hits":"1","order":"4633","possible_hits":"2",},
{"lineNum":"  708","line":"                try expectEqual(","class":"lineCov","hits":"1","order":"4635","possible_hits":"1",},
{"lineNum":"  709","line":"                    node.For.Clause.EachClause.Variant.Of,"},
{"lineNum":"  710","line":"                    e.variant,","class":"lineCov","hits":"1","order":"4634","possible_hits":"1",},
{"lineNum":"  711","line":"                );"},
{"lineNum":"  712","line":"                try expectEqualStrings(\"a\", e.name);","class":"lineCov","hits":"1","order":"4636","possible_hits":"1",},
{"lineNum":"  713","line":"                try expectEqual(NodeType.Ident, e.expr.getType());","class":"lineCov","hits":"1","order":"4637","possible_hits":"1",},
{"lineNum":"  714","line":"                try expectEqualStrings(\"anArray\", e.expr.data.Ident);","class":"lineCov","hits":"2","order":"4638","possible_hits":"2",},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"4639","possible_hits":"1",},
{"lineNum":"  717","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"4640","possible_hits":"3",},
{"lineNum":"  718","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"4641","possible_hits":"2",},
{"lineNum":"  719","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"4642","possible_hits":"2",},
{"lineNum":"  720","line":"            }"},
{"lineNum":"  721","line":"        }).check,"},
{"lineNum":"  722","line":"    }).run();","class":"lineCov","hits":"1","order":"4616","possible_hits":"1",},
{"lineNum":"  723","line":"}"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"test \"can parse for..in loop\" {","class":"lineCov","hits":"2","order":"4644","possible_hits":"2",},
{"lineNum":"  726","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4662","possible_hits":"1",},
{"lineNum":"  727","line":"        .code = \"for (const a in anArray) { a += 4; }\","},
{"lineNum":"  728","line":"        .check = (struct {"},
{"lineNum":"  729","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4647","possible_hits":"2",},
{"lineNum":"  730","line":"                try expectEqual(NodeType.For, value.getType());","class":"lineCov","hits":"1","order":"4648","possible_hits":"1",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"                const loop = value.data.For;","class":"linePartCov","hits":"2","order":"4649","possible_hits":"3",},
{"lineNum":"  733","line":"                try expectEqual(node.For.Clause.Type.Each, loop.getType());","class":"linePartCov","hits":"1","order":"4650","possible_hits":"2",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"                const e = loop.clause.Each;","class":"linePartCov","hits":"2","order":"4651","possible_hits":"3",},
{"lineNum":"  736","line":"                try expectEqual(node.Decl.Scoping.Const, e.scoping);","class":"linePartCov","hits":"1","order":"4652","possible_hits":"2",},
{"lineNum":"  737","line":"                try expectEqual(","class":"lineCov","hits":"1","order":"4654","possible_hits":"1",},
{"lineNum":"  738","line":"                    node.For.Clause.EachClause.Variant.In,"},
{"lineNum":"  739","line":"                    e.variant,","class":"lineCov","hits":"1","order":"4653","possible_hits":"1",},
{"lineNum":"  740","line":"                );"},
{"lineNum":"  741","line":"                try expectEqualStrings(\"a\", e.name);","class":"lineCov","hits":"1","order":"4655","possible_hits":"1",},
{"lineNum":"  742","line":"                try expectEqual(NodeType.Ident, e.expr.getType());","class":"lineCov","hits":"1","order":"4656","possible_hits":"1",},
{"lineNum":"  743","line":"                try expectEqualStrings(\"anArray\", e.expr.data.Ident);","class":"lineCov","hits":"2","order":"4657","possible_hits":"2",},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"4658","possible_hits":"1",},
{"lineNum":"  746","line":"                const block = loop.body.data.Block.items;","class":"linePartCov","hits":"2","order":"4659","possible_hits":"3",},
{"lineNum":"  747","line":"                try expectEqual(@intCast(usize, 1), block.len);","class":"linePartCov","hits":"1","order":"4660","possible_hits":"2",},
{"lineNum":"  748","line":"                try expectEqual(NodeType.BinaryOp, block[0].getType());","class":"linePartCov","hits":"1","order":"4661","possible_hits":"2",},
{"lineNum":"  749","line":"            }"},
{"lineNum":"  750","line":"        }).check,"},
{"lineNum":"  751","line":"    }).run();","class":"lineCov","hits":"1","order":"4645","possible_hits":"1",},
{"lineNum":"  752","line":"}"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"fn parseWhile(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4666","possible_hits":"1",},
{"lineNum":"  755","line":"    std.debug.assert(psr.lexer.token.ty == .While);","class":"lineCov","hits":"1","order":"4667","possible_hits":"1",},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4668","possible_hits":"1",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    if (psr.lexer.next().ty != .LParen)","class":"lineCov","hits":"2","order":"4669","possible_hits":"2",},
{"lineNum":"  760","line":"        return ParseResult.expected(\"\'(\' after while\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4670","possible_hits":"1",},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"4671","possible_hits":"1",},
{"lineNum":"  765","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"4672","possible_hits":"2",},
{"lineNum":"  766","line":"        return cond;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4673","possible_hits":"2",},
{"lineNum":"  769","line":"        return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"            \"\')\' after while condition\","},
{"lineNum":"  771","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  772","line":"        );"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4674","possible_hits":"1",},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"4675","possible_hits":"1",},
{"lineNum":"  777","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"4676","possible_hits":"2",},
{"lineNum":"  778","line":"        return body;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4680","possible_hits":"1",},
{"lineNum":"  781","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4677","possible_hits":"1",},
{"lineNum":"  782","line":"        csr,"},
{"lineNum":"  783","line":"        .While,"},
{"lineNum":"  784","line":"        node.While{"},
{"lineNum":"  785","line":"            .cond = cond.Success,","class":"linePartCov","hits":"1","order":"4678","possible_hits":"2",},
{"lineNum":"  786","line":"            .body = body.Success,","class":"linePartCov","hits":"2","order":"4679","possible_hits":"3",},
{"lineNum":"  787","line":"        },"},
{"lineNum":"  788","line":"    ));"},
{"lineNum":"  789","line":"}"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"test \"can parse while loop\" {","class":"lineCov","hits":"2","order":"4663","possible_hits":"2",},
{"lineNum":"  792","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4686","possible_hits":"1",},
{"lineNum":"  793","line":"        .code = \"while (true) {}\","},
{"lineNum":"  794","line":"        .check = (struct {"},
{"lineNum":"  795","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4681","possible_hits":"2",},
{"lineNum":"  796","line":"                try expectEqual(NodeType.While, value.getType());","class":"lineCov","hits":"1","order":"4682","possible_hits":"1",},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"                const loop = value.data.While;","class":"linePartCov","hits":"2","order":"4683","possible_hits":"3",},
{"lineNum":"  799","line":"                try expectEqual(NodeType.True, loop.cond.getType());","class":"linePartCov","hits":"1","order":"4684","possible_hits":"2",},
{"lineNum":"  800","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"lineCov","hits":"1","order":"4685","possible_hits":"1",},
{"lineNum":"  801","line":"            }"},
{"lineNum":"  802","line":"        }).check,"},
{"lineNum":"  803","line":"    }).run();","class":"lineCov","hits":"1","order":"4664","possible_hits":"1",},
{"lineNum":"  804","line":"}"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"fn parseDo(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4690","possible_hits":"1",},
{"lineNum":"  807","line":"    std.debug.assert(psr.lexer.token.ty == .Do);","class":"lineCov","hits":"1","order":"4691","possible_hits":"1",},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4692","possible_hits":"1",},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4693","possible_hits":"1",},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"    const body = psr.parseStmt();","class":"lineCov","hits":"1","order":"4694","possible_hits":"1",},
{"lineNum":"  814","line":"    if (!body.isSuccess())","class":"lineCov","hits":"2","order":"4695","possible_hits":"2",},
{"lineNum":"  815","line":"        return body;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"    if (psr.lexer.token.ty != .While)","class":"lineCov","hits":"2","order":"4696","possible_hits":"2",},
{"lineNum":"  818","line":"        return ParseResult.expected(\"\'while\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    if (psr.lexer.next().ty != .LParen)","class":"lineCov","hits":"2","order":"4697","possible_hits":"2",},
{"lineNum":"  821","line":"        return ParseResult.expected(\"\'(\' after while\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4698","possible_hits":"1",},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"    const cond = psr.parseExpr();","class":"lineCov","hits":"1","order":"4699","possible_hits":"1",},
{"lineNum":"  826","line":"    if (!cond.isSuccess())","class":"lineCov","hits":"2","order":"4700","possible_hits":"2",},
{"lineNum":"  827","line":"        return cond;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4701","possible_hits":"2",},
{"lineNum":"  830","line":"        return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"            \"\')\' after do-while condition\","},
{"lineNum":"  832","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"        );"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4702","possible_hits":"1",},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"4703","possible_hits":"1",},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4707","possible_hits":"1",},
{"lineNum":"  840","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4704","possible_hits":"1",},
{"lineNum":"  841","line":"        csr,"},
{"lineNum":"  842","line":"        .Do,"},
{"lineNum":"  843","line":"        node.Do{"},
{"lineNum":"  844","line":"            .body = body.Success,","class":"linePartCov","hits":"1","order":"4705","possible_hits":"2",},
{"lineNum":"  845","line":"            .cond = cond.Success,","class":"linePartCov","hits":"2","order":"4706","possible_hits":"3",},
{"lineNum":"  846","line":"        },"},
{"lineNum":"  847","line":"    ));"},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"test \"can parse do loop\" {","class":"lineCov","hits":"2","order":"4687","possible_hits":"2",},
{"lineNum":"  851","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4713","possible_hits":"1",},
{"lineNum":"  852","line":"        .code = \"do {} while (true);\","},
{"lineNum":"  853","line":"        .check = (struct {"},
{"lineNum":"  854","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4708","possible_hits":"2",},
{"lineNum":"  855","line":"                try expectEqual(NodeType.Do, value.getType());","class":"lineCov","hits":"1","order":"4709","possible_hits":"1",},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"                const loop = value.data.Do;","class":"linePartCov","hits":"2","order":"4710","possible_hits":"3",},
{"lineNum":"  858","line":"                try expectEqual(NodeType.Block, loop.body.getType());","class":"linePartCov","hits":"1","order":"4711","possible_hits":"2",},
{"lineNum":"  859","line":"                try expectEqual(NodeType.True, loop.cond.getType());","class":"lineCov","hits":"1","order":"4712","possible_hits":"1",},
{"lineNum":"  860","line":"            }"},
{"lineNum":"  861","line":"        }).check,"},
{"lineNum":"  862","line":"    }).run();","class":"lineCov","hits":"1","order":"4688","possible_hits":"1",},
{"lineNum":"  863","line":"}"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"fn parseBlockStmt(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3699","possible_hits":"1",},
{"lineNum":"  866","line":"    if (psr.lexer.token.ty != .LBrace)","class":"lineCov","hits":"2","order":"3700","possible_hits":"2",},
{"lineNum":"  867","line":"        return ParseResult.noMatch(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  868","line":"            ParseError.expected(\"a block\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  869","line":"        );"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"    var nd = makeNode(","class":"lineCov","hits":"1","order":"3703","possible_hits":"1",},
{"lineNum":"  872","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3701","possible_hits":"1",},
{"lineNum":"  873","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3702","possible_hits":"1",},
{"lineNum":"  874","line":"        .Block,"},
{"lineNum":"  875","line":"        node.NodeList{},"},
{"lineNum":"  876","line":"    );"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3704","possible_hits":"1",},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"    while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"3705","possible_hits":"2",},
{"lineNum":"  881","line":"        const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"4582","possible_hits":"1",},
{"lineNum":"  882","line":"        if (!stmt.isSuccess())","class":"lineCov","hits":"2","order":"4590","possible_hits":"2",},
{"lineNum":"  883","line":"            return stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  884","line":"        nd.data.Block.append(","class":"linePartCov","hits":"2","order":"4591","possible_hits":"3",},
{"lineNum":"  885","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"4592","possible_hits":"1",},
{"lineNum":"  886","line":"            stmt.Success,","class":"linePartCov","hits":"2","order":"4593","possible_hits":"3",},
{"lineNum":"  887","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"4594","possible_hits":"2",},
{"lineNum":"  888","line":"    }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    std.debug.assert(psr.lexer.token.ty == .RBrace);","class":"lineCov","hits":"1","order":"3706","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3707","possible_hits":"1",},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"3708","possible_hits":"1",},
{"lineNum":"  895","line":"}"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"pub fn parseBlock(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"3697","possible_hits":"1",},
{"lineNum":"  898","line":"    return parseBlockStmt(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"3698","possible_hits":"1",},
{"lineNum":"  899","line":"}"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"test \"can parse empty block\" {","class":"lineCov","hits":"2","order":"4714","possible_hits":"2",},
{"lineNum":"  902","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4719","possible_hits":"1",},
{"lineNum":"  903","line":"        .code = \"{}\","},
{"lineNum":"  904","line":"        .check = (struct {"},
{"lineNum":"  905","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4716","possible_hits":"2",},
{"lineNum":"  906","line":"                try expectEqual(NodeType.Block, value.getType());","class":"lineCov","hits":"1","order":"4717","possible_hits":"1",},
{"lineNum":"  907","line":"                try expectEqual(@intCast(usize, 0), value.data.Block.items.len);","class":"lineCov","hits":"2","order":"4718","possible_hits":"2",},
{"lineNum":"  908","line":"            }"},
{"lineNum":"  909","line":"        }).check,"},
{"lineNum":"  910","line":"    }).run();","class":"lineCov","hits":"1","order":"4715","possible_hits":"1",},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"test \"can parse populated block\" {","class":"lineCov","hits":"2","order":"4720","possible_hits":"2",},
{"lineNum":"  914","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4728","possible_hits":"1",},
{"lineNum":"  915","line":"        .code = \"{ break; return; }\","},
{"lineNum":"  916","line":"        .check = (struct {"},
{"lineNum":"  917","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4722","possible_hits":"2",},
{"lineNum":"  918","line":"                try expectEqual(NodeType.Block, value.getType());","class":"lineCov","hits":"1","order":"4723","possible_hits":"1",},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"                const items = value.data.Block.items;","class":"linePartCov","hits":"2","order":"4724","possible_hits":"3",},
{"lineNum":"  921","line":"                try expectEqual(@intCast(usize, 2), items.len);","class":"linePartCov","hits":"1","order":"4725","possible_hits":"2",},
{"lineNum":"  922","line":"                try expectEqual(NodeType.Break, items[0].getType());","class":"linePartCov","hits":"1","order":"4726","possible_hits":"2",},
{"lineNum":"  923","line":"                try expectEqual(NodeType.Return, items[1].getType());","class":"linePartCov","hits":"1","order":"4727","possible_hits":"2",},
{"lineNum":"  924","line":"            }"},
{"lineNum":"  925","line":"        }).check,"},
{"lineNum":"  926","line":"    }).run();","class":"lineCov","hits":"1","order":"4721","possible_hits":"1",},
{"lineNum":"  927","line":"}"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"fn parseReturn(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4489","possible_hits":"1",},
{"lineNum":"  930","line":"    std.debug.assert(psr.lexer.token.ty == .Return);","class":"lineCov","hits":"1","order":"4490","possible_hits":"1",},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4491","possible_hits":"1",},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4492","possible_hits":"1",},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"4493","possible_hits":"1",},
{"lineNum":"  937","line":"    if (expr.getType() == .Error)","class":"lineCov","hits":"2","order":"4504","possible_hits":"2",},
{"lineNum":"  938","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"4505","possible_hits":"1",},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4508","possible_hits":"1",},
{"lineNum":"  943","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"4506","possible_hits":"1",},
{"lineNum":"  944","line":"        csr,"},
{"lineNum":"  945","line":"        .Return,"},
{"lineNum":"  946","line":"        if (expr.isSuccess()) expr.Success else null,","class":"lineCov","hits":"2","order":"4507","possible_hits":"2",},
{"lineNum":"  947","line":"    ));"},
{"lineNum":"  948","line":"}"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"test \"can parse \'return\' without expression\" {","class":"lineCov","hits":"2","order":"4729","possible_hits":"2",},
{"lineNum":"  951","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4734","possible_hits":"1",},
{"lineNum":"  952","line":"        .code = \"return;\","},
{"lineNum":"  953","line":"        .check = (struct {"},
{"lineNum":"  954","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4731","possible_hits":"2",},
{"lineNum":"  955","line":"                try expectEqual(NodeType.Return, value.getType());","class":"lineCov","hits":"1","order":"4732","possible_hits":"1",},
{"lineNum":"  956","line":"                try expect(value.data.Return == null);","class":"lineCov","hits":"2","order":"4733","possible_hits":"2",},
{"lineNum":"  957","line":"            }"},
{"lineNum":"  958","line":"        }).check,"},
{"lineNum":"  959","line":"    }).run();","class":"lineCov","hits":"1","order":"4730","possible_hits":"1",},
{"lineNum":"  960","line":"}"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"test \"can parse \'return\' with expression\" {","class":"lineCov","hits":"2","order":"4735","possible_hits":"2",},
{"lineNum":"  963","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4742","possible_hits":"1",},
{"lineNum":"  964","line":"        .code = \"return 4;\","},
{"lineNum":"  965","line":"        .check = (struct {"},
{"lineNum":"  966","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4737","possible_hits":"2",},
{"lineNum":"  967","line":"                try expectEqual(NodeType.Return, value.getType());","class":"lineCov","hits":"1","order":"4738","possible_hits":"1",},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"                const expr = value.data.Return.?;","class":"lineCov","hits":"2","order":"4739","possible_hits":"2",},
{"lineNum":"  970","line":"                try expectEqual(NodeType.Int, expr.getType());","class":"linePartCov","hits":"1","order":"4740","possible_hits":"2",},
{"lineNum":"  971","line":"                try expectEqualStrings(\"4\", expr.data.Int);","class":"lineCov","hits":"2","order":"4741","possible_hits":"2",},
{"lineNum":"  972","line":"            }"},
{"lineNum":"  973","line":"        }).check,"},
{"lineNum":"  974","line":"    }).run();","class":"lineCov","hits":"1","order":"4736","possible_hits":"1",},
{"lineNum":"  975","line":"}"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"fn parseBreakOrContinue(","class":"lineCov","hits":"2","order":"4478","possible_hits":"2",},
{"lineNum":"  978","line":"    psr: *TsParser,"},
{"lineNum":"  979","line":"    comptime ty: NodeType,"},
{"lineNum":"  980","line":") ParseResult {"},
{"lineNum":"  981","line":"    std.debug.assert(std.mem.eql(","class":"lineCov","hits":"2","order":"4480","possible_hits":"2",},
{"lineNum":"  982","line":"        u8,"},
{"lineNum":"  983","line":"        @tagName(psr.lexer.token.ty),","class":"lineCov","hits":"2","order":"4479","possible_hits":"2",},
{"lineNum":"  984","line":"        @tagName(ty),"},
{"lineNum":"  985","line":"    ));"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"2","order":"4481","possible_hits":"2",},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"2","order":"4482","possible_hits":"2",},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"    var label: ?[]const u8 = null;","class":"lineCov","hits":"2","order":"4483","possible_hits":"2",},
{"lineNum":"  992","line":""},
{"lineNum":"  993","line":"    if (psr.lexer.token.ty == .Ident) {","class":"lineCov","hits":"4","order":"4484","possible_hits":"4",},
{"lineNum":"  994","line":"        label = psr.lexer.token.data;","class":"lineCov","hits":"2","order":"4751","possible_hits":"2",},
{"lineNum":"  995","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"2","order":"4752","possible_hits":"2",},
{"lineNum":"  996","line":"    }"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"    eatSemi(psr);","class":"lineCov","hits":"2","order":"4485","possible_hits":"2",},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"    return ParseResult.success(makeNode(psr.getAllocator(), csr, ty, label));","class":"lineCov","hits":"2","order":"4486","possible_hits":"2",},
{"lineNum":" 1001","line":"}"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"test \"can parse \'break\' without label\" {","class":"lineCov","hits":"2","order":"4743","possible_hits":"2",},
{"lineNum":" 1004","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4748","possible_hits":"1",},
{"lineNum":" 1005","line":"        .code = \"break;\","},
{"lineNum":" 1006","line":"        .check = (struct {"},
{"lineNum":" 1007","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4745","possible_hits":"2",},
{"lineNum":" 1008","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"4746","possible_hits":"1",},
{"lineNum":" 1009","line":"                try expect(value.data.Break == null);","class":"lineCov","hits":"2","order":"4747","possible_hits":"2",},
{"lineNum":" 1010","line":"            }"},
{"lineNum":" 1011","line":"        }).check,"},
{"lineNum":" 1012","line":"    }).run();","class":"lineCov","hits":"1","order":"4744","possible_hits":"1",},
{"lineNum":" 1013","line":"}"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"test \"can parse \'break\' with label\" {","class":"lineCov","hits":"2","order":"4749","possible_hits":"2",},
{"lineNum":" 1016","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4756","possible_hits":"1",},
{"lineNum":" 1017","line":"        .code = \"break abc;\","},
{"lineNum":" 1018","line":"        .check = (struct {"},
{"lineNum":" 1019","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4753","possible_hits":"2",},
{"lineNum":" 1020","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"4754","possible_hits":"1",},
{"lineNum":" 1021","line":"                try expectEqualStrings(\"abc\", value.data.Break.?);","class":"lineCov","hits":"2","order":"4755","possible_hits":"2",},
{"lineNum":" 1022","line":"            }"},
{"lineNum":" 1023","line":"        }).check,"},
{"lineNum":" 1024","line":"    }).run();","class":"lineCov","hits":"1","order":"4750","possible_hits":"1",},
{"lineNum":" 1025","line":"}"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"test \"can parse \'continue\' without label\" {","class":"lineCov","hits":"2","order":"4757","possible_hits":"2",},
{"lineNum":" 1028","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4763","possible_hits":"1",},
{"lineNum":" 1029","line":"        .code = \"continue;\","},
{"lineNum":" 1030","line":"        .check = (struct {"},
{"lineNum":" 1031","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4760","possible_hits":"2",},
{"lineNum":" 1032","line":"                try expectEqual(NodeType.Continue, value.getType());","class":"lineCov","hits":"1","order":"4761","possible_hits":"1",},
{"lineNum":" 1033","line":"                try expect(value.data.Continue == null);","class":"lineCov","hits":"2","order":"4762","possible_hits":"2",},
{"lineNum":" 1034","line":"            }"},
{"lineNum":" 1035","line":"        }).check,"},
{"lineNum":" 1036","line":"    }).run();","class":"lineCov","hits":"1","order":"4758","possible_hits":"1",},
{"lineNum":" 1037","line":"}"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"test \"can parse \'continue\' with label\" {","class":"lineCov","hits":"2","order":"4764","possible_hits":"2",},
{"lineNum":" 1040","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4769","possible_hits":"1",},
{"lineNum":" 1041","line":"        .code = \"continue abc;\","},
{"lineNum":" 1042","line":"        .check = (struct {"},
{"lineNum":" 1043","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4766","possible_hits":"2",},
{"lineNum":" 1044","line":"                try expectEqual(NodeType.Continue, value.getType());","class":"lineCov","hits":"1","order":"4767","possible_hits":"1",},
{"lineNum":" 1045","line":"                try expectEqualStrings(\"abc\", value.data.Continue.?);","class":"lineCov","hits":"2","order":"4768","possible_hits":"2",},
{"lineNum":" 1046","line":"            }"},
{"lineNum":" 1047","line":"        }).check,"},
{"lineNum":" 1048","line":"    }).run();","class":"lineCov","hits":"1","order":"4765","possible_hits":"1",},
{"lineNum":" 1049","line":"}"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"fn parseThrow(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4773","possible_hits":"1",},
{"lineNum":" 1052","line":"    std.debug.assert(psr.lexer.token.ty == .Throw);","class":"lineCov","hits":"1","order":"4774","possible_hits":"1",},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4775","possible_hits":"1",},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4776","possible_hits":"1",},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"4777","possible_hits":"1",},
{"lineNum":" 1059","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"4778","possible_hits":"2",},
{"lineNum":" 1060","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"4779","possible_hits":"1",},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"    return ParseResult.success(","class":"lineCov","hits":"1","order":"4781","possible_hits":"1",},
{"lineNum":" 1065","line":"        makeNode(psr.getAllocator(), csr, .Throw, expr.Success),","class":"linePartCov","hits":"1","order":"4780","possible_hits":"2",},
{"lineNum":" 1066","line":"    );"},
{"lineNum":" 1067","line":"}"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"test \"can parse \'throw\' statement\" {","class":"lineCov","hits":"2","order":"4770","possible_hits":"2",},
{"lineNum":" 1070","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4787","possible_hits":"1",},
{"lineNum":" 1071","line":"        .code = \"throw abc;\","},
{"lineNum":" 1072","line":"        .check = (struct {"},
{"lineNum":" 1073","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4782","possible_hits":"2",},
{"lineNum":" 1074","line":"                try expectEqual(NodeType.Throw, value.getType());","class":"lineCov","hits":"1","order":"4783","possible_hits":"1",},
{"lineNum":" 1075","line":"                const expr = value.data.Throw;","class":"linePartCov","hits":"2","order":"4784","possible_hits":"3",},
{"lineNum":" 1076","line":"                try expectEqual(NodeType.Ident, expr.getType());","class":"linePartCov","hits":"1","order":"4785","possible_hits":"2",},
{"lineNum":" 1077","line":"                try expectEqualStrings(\"abc\", expr.data.Ident);","class":"lineCov","hits":"2","order":"4786","possible_hits":"2",},
{"lineNum":" 1078","line":"            }"},
{"lineNum":" 1079","line":"        }).check,"},
{"lineNum":" 1080","line":"    }).run();","class":"lineCov","hits":"1","order":"4771","possible_hits":"1",},
{"lineNum":" 1081","line":"}"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"fn parseTry(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4791","possible_hits":"1",},
{"lineNum":" 1084","line":"    std.debug.assert(psr.lexer.token.ty == .Try);","class":"lineCov","hits":"1","order":"4792","possible_hits":"1",},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"4793","possible_hits":"1",},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4794","possible_hits":"1",},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"    const tryBlock = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"4795","possible_hits":"1",},
{"lineNum":" 1091","line":"    if (!tryBlock.isSuccess())","class":"lineCov","hits":"2","order":"4796","possible_hits":"2",},
{"lineNum":" 1092","line":"        return tryBlock;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"    var nd = makeNode(psr.getAllocator(), csr, .Try, node.Try{","class":"lineCov","hits":"2","order":"4797","possible_hits":"2",},
{"lineNum":" 1095","line":"        .tryBlock = tryBlock.Success,","class":"linePartCov","hits":"2","order":"4798","possible_hits":"3",},
{"lineNum":" 1096","line":"        .catchBlocks = node.Try.CatchList{},","class":"lineCov","hits":"1","order":"4799","possible_hits":"1",},
{"lineNum":" 1097","line":"        .finallyBlock = null,","class":"lineCov","hits":"1","order":"4800","possible_hits":"1",},
{"lineNum":" 1098","line":"    });"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"    while (psr.lexer.token.ty == .Catch) {","class":"lineCov","hits":"3","order":"4801","possible_hits":"3",},
{"lineNum":" 1101","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4802","possible_hits":"1",},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"        if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"4803","possible_hits":"2",},
{"lineNum":" 1104","line":"            return ParseResult.expected(\"\'(\' after \'catch\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4804","possible_hits":"1",},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"        if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"4805","possible_hits":"2",},
{"lineNum":" 1109","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1110","line":"                \"identifier for caught exception\","},
{"lineNum":" 1111","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1112","line":"            );"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"        const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"4806","possible_hits":"1",},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4807","possible_hits":"1",},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"        if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"4808","possible_hits":"2",},
{"lineNum":" 1119","line":"            return ParseResult.expected(\"\')\' after \'catch\'\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4809","possible_hits":"1",},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"        const block = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"4810","possible_hits":"1",},
{"lineNum":" 1124","line":"        if (!block.isSuccess())","class":"lineCov","hits":"2","order":"4811","possible_hits":"2",},
{"lineNum":" 1125","line":"            return block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"        nd.data.Try.catchBlocks.append(psr.getAllocator(), node.Try.Catch{","class":"linePartCov","hits":"3","order":"4812","possible_hits":"4",},
{"lineNum":" 1128","line":"            .name = name,","class":"lineCov","hits":"1","order":"4813","possible_hits":"1",},
{"lineNum":" 1129","line":"            .block = block.Success,","class":"linePartCov","hits":"2","order":"4814","possible_hits":"3",},
{"lineNum":" 1130","line":"        }) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"4815","possible_hits":"2",},
{"lineNum":" 1131","line":"    }"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"    if (psr.lexer.token.ty == .Finally) {","class":"linePartCov","hits":"2","order":"4816","possible_hits":"3",},
{"lineNum":" 1134","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4817","possible_hits":"1",},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"        const block = parseBlockStmt(psr);","class":"lineCov","hits":"1","order":"4818","possible_hits":"1",},
{"lineNum":" 1137","line":"        if (!block.isSuccess())","class":"lineCov","hits":"2","order":"4819","possible_hits":"2",},
{"lineNum":" 1138","line":"            return block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"        nd.data.Try.finallyBlock = block.Success;","class":"linePartCov","hits":"2","order":"4820","possible_hits":"3",},
{"lineNum":" 1141","line":"    }"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"4821","possible_hits":"1",},
{"lineNum":" 1144","line":"}"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"test \"can parse try-catch\" {","class":"lineCov","hits":"2","order":"4788","possible_hits":"2",},
{"lineNum":" 1147","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4833","possible_hits":"1",},
{"lineNum":" 1148","line":"        .code = \"try {} catch (e) {} catch (f) {} finally {}\","},
{"lineNum":" 1149","line":"        .check = (struct {"},
{"lineNum":" 1150","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4822","possible_hits":"2",},
{"lineNum":" 1151","line":"                try expectEqual(NodeType.Try, value.getType());","class":"lineCov","hits":"1","order":"4823","possible_hits":"1",},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"                const t = value.data.Try;","class":"linePartCov","hits":"2","order":"4824","possible_hits":"3",},
{"lineNum":" 1154","line":"                try expectEqual(NodeType.Block, t.tryBlock.getType());","class":"linePartCov","hits":"1","order":"4825","possible_hits":"2",},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"                const catches = t.catchBlocks.items;","class":"lineCov","hits":"1","order":"4826","possible_hits":"1",},
{"lineNum":" 1157","line":"                try expectEqual(@intCast(usize, 2), catches.len);","class":"lineCov","hits":"1","order":"4827","possible_hits":"1",},
{"lineNum":" 1158","line":"                try expectEqualStrings(\"e\", catches[0].name);","class":"linePartCov","hits":"1","order":"4828","possible_hits":"2",},
{"lineNum":" 1159","line":"                try expectEqual(NodeType.Block, catches[0].block.getType());","class":"linePartCov","hits":"1","order":"4829","possible_hits":"2",},
{"lineNum":" 1160","line":"                try expectEqualStrings(\"f\", catches[1].name);","class":"linePartCov","hits":"1","order":"4830","possible_hits":"2",},
{"lineNum":" 1161","line":"                try expectEqual(NodeType.Block, catches[1].block.getType());","class":"linePartCov","hits":"1","order":"4831","possible_hits":"2",},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"                try expectEqual(NodeType.Block, t.finallyBlock.?.getType());","class":"linePartCov","hits":"1","order":"4832","possible_hits":"2",},
{"lineNum":" 1164","line":"            }"},
{"lineNum":" 1165","line":"        }).check,"},
{"lineNum":" 1166","line":"    }).run();","class":"lineCov","hits":"1","order":"4789","possible_hits":"1",},
{"lineNum":" 1167","line":"}"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"fn parseExprStmt(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4469","possible_hits":"1",},
{"lineNum":" 1170","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"4470","possible_hits":"1",},
{"lineNum":" 1171","line":"    switch (expr) {","class":"linePartCov","hits":"1","order":"4471","possible_hits":"2",},
{"lineNum":" 1172","line":"        .Success => {"},
{"lineNum":" 1173","line":"            eatSemi(psr);","class":"lineCov","hits":"1","order":"4472","possible_hits":"1",},
{"lineNum":" 1174","line":"            return expr;","class":"lineCov","hits":"1","order":"4473","possible_hits":"1",},
{"lineNum":" 1175","line":"        },"},
{"lineNum":" 1176","line":"        .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1177","line":"        .NoMatch => return ParseResult.expected(\"a statement\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1178","line":"    }"},
{"lineNum":" 1179","line":"}"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"test \"can parse expression statements\" {","class":"lineCov","hits":"2","order":"4834","possible_hits":"2",},
{"lineNum":" 1182","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4844","possible_hits":"1",},
{"lineNum":" 1183","line":"        .code = \"a = 3;\","},
{"lineNum":" 1184","line":"        .check = (struct {"},
{"lineNum":" 1185","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4836","possible_hits":"2",},
{"lineNum":" 1186","line":"                try expectEqual(NodeType.BinaryOp, value.getType());","class":"lineCov","hits":"1","order":"4837","possible_hits":"1",},
{"lineNum":" 1187","line":"                const op = value.data.BinaryOp;","class":"linePartCov","hits":"2","order":"4838","possible_hits":"3",},
{"lineNum":" 1188","line":"                try expectEqual(TokenType.Assign, op.op);","class":"linePartCov","hits":"1","order":"4839","possible_hits":"2",},
{"lineNum":" 1189","line":"                try expectEqual(NodeType.Ident, op.left.getType());","class":"lineCov","hits":"1","order":"4840","possible_hits":"1",},
{"lineNum":" 1190","line":"                try expectEqualStrings(\"a\", op.left.data.Ident);","class":"lineCov","hits":"2","order":"4841","possible_hits":"2",},
{"lineNum":" 1191","line":"                try expectEqual(NodeType.Int, op.right.getType());","class":"lineCov","hits":"1","order":"4842","possible_hits":"1",},
{"lineNum":" 1192","line":"                try expectEqualStrings(\"3\", op.right.data.Int);","class":"lineCov","hits":"2","order":"4843","possible_hits":"2",},
{"lineNum":" 1193","line":"            }"},
{"lineNum":" 1194","line":"        }).check,"},
{"lineNum":" 1195","line":"    }).run();","class":"lineCov","hits":"1","order":"4835","possible_hits":"1",},
{"lineNum":" 1196","line":"}"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"fn parseLabelled(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"4584","possible_hits":"1",},
{"lineNum":" 1199","line":"    std.debug.assert(psr.lexer.token.ty == .Ident);","class":"lineCov","hits":"1","order":"4585","possible_hits":"1",},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"    const ctx = psr.lexer.save();","class":"lineCov","hits":"1","order":"4586","possible_hits":"1",},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"    if (psr.lexer.next().ty == .Colon) {","class":"lineCov","hits":"2","order":"4587","possible_hits":"2",},
{"lineNum":" 1204","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4847","possible_hits":"1",},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"        const stmt = psr.parseStmt();","class":"lineCov","hits":"1","order":"4848","possible_hits":"1",},
{"lineNum":" 1207","line":"        if (!stmt.isSuccess())","class":"lineCov","hits":"2","order":"4849","possible_hits":"2",},
{"lineNum":" 1208","line":"            return stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"        return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4854","possible_hits":"1",},
{"lineNum":" 1211","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"4850","possible_hits":"1",},
{"lineNum":" 1212","line":"            ctx.token.csr,","class":"lineCov","hits":"1","order":"4851","possible_hits":"1",},
{"lineNum":" 1213","line":"            .Labelled,"},
{"lineNum":" 1214","line":"            node.Labelled{"},
{"lineNum":" 1215","line":"                .label = ctx.token.data,","class":"lineCov","hits":"1","order":"4852","possible_hits":"1",},
{"lineNum":" 1216","line":"                .stmt = stmt.Success,","class":"linePartCov","hits":"2","order":"4853","possible_hits":"3",},
{"lineNum":" 1217","line":"            },"},
{"lineNum":" 1218","line":"        ));"},
{"lineNum":" 1219","line":"    }"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"    psr.lexer.restore(ctx);","class":"lineCov","hits":"1","order":"4588","possible_hits":"1",},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"    return parseExprStmt(psr);","class":"lineCov","hits":"1","order":"4589","possible_hits":"1",},
{"lineNum":" 1224","line":"}"},
{"lineNum":" 1225","line":""},
{"lineNum":" 1226","line":"test \"can parse labelled statement\" {","class":"lineCov","hits":"2","order":"4845","possible_hits":"2",},
{"lineNum":" 1227","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4860","possible_hits":"1",},
{"lineNum":" 1228","line":"        .code = \"aLabel: a = 3;\","},
{"lineNum":" 1229","line":"        .check = (struct {"},
{"lineNum":" 1230","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4855","possible_hits":"2",},
{"lineNum":" 1231","line":"                try expectEqual(NodeType.Labelled, value.getType());","class":"lineCov","hits":"1","order":"4856","possible_hits":"1",},
{"lineNum":" 1232","line":"                const labelled = value.data.Labelled;","class":"linePartCov","hits":"2","order":"4857","possible_hits":"3",},
{"lineNum":" 1233","line":"                try expectEqualStrings(\"aLabel\", labelled.label);","class":"linePartCov","hits":"1","order":"4858","possible_hits":"2",},
{"lineNum":" 1234","line":"                try expectEqual(NodeType.BinaryOp, labelled.stmt.getType());","class":"lineCov","hits":"1","order":"4859","possible_hits":"1",},
{"lineNum":" 1235","line":"            }"},
{"lineNum":" 1236","line":"        }).check,"},
{"lineNum":" 1237","line":"    }).run();","class":"lineCov","hits":"1","order":"4846","possible_hits":"1",},
{"lineNum":" 1238","line":"}"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"fn parseAlias(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2978","possible_hits":"1",},
{"lineNum":" 1241","line":"    std.debug.assert(psr.lexer.token.ty == .Type);","class":"lineCov","hits":"1","order":"2979","possible_hits":"1",},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2980","possible_hits":"1",},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"2981","possible_hits":"1",},
{"lineNum":" 1246","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"2","order":"2982","possible_hits":"2",},
{"lineNum":" 1247","line":"        return ParseResult.expected(\"name for type alias\", name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2983","possible_hits":"1",},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"    if (psr.lexer.token.ty != .Assign)","class":"lineCov","hits":"2","order":"2984","possible_hits":"2",},
{"lineNum":" 1252","line":"        return ParseResult.expected(Token.Type.Assign, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2985","possible_hits":"1",},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"    const value = psr.parseType();","class":"lineCov","hits":"1","order":"2986","possible_hits":"1",},
{"lineNum":" 1257","line":"    if (value.isError()) {","class":"lineCov","hits":"2","order":"3025","possible_hits":"2",},
{"lineNum":" 1258","line":"        return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1259","line":"    } else if (value.isNoMatch()) {","class":"lineCov","hits":"2","order":"3028","possible_hits":"2",},
{"lineNum":" 1260","line":"        return ParseResult.expected(\"name for type alias\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1261","line":"    }"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"3031","possible_hits":"1",},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3037","possible_hits":"1",},
{"lineNum":" 1266","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3035","possible_hits":"1",},
{"lineNum":" 1267","line":"        csr,"},
{"lineNum":" 1268","line":"        .Alias,"},
{"lineNum":" 1269","line":"        node.Alias.new(name.data, value.Success),","class":"linePartCov","hits":"1","order":"3036","possible_hits":"2",},
{"lineNum":" 1270","line":"    ));"},
{"lineNum":" 1271","line":"}"},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"test \"can parse type alias statement\" {","class":"lineCov","hits":"2","order":"4861","possible_hits":"2",},
{"lineNum":" 1274","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4874","possible_hits":"1",},
{"lineNum":" 1275","line":"        .code = \"type IntOrString = int | string;\","},
{"lineNum":" 1276","line":"        .check = (struct {"},
{"lineNum":" 1277","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4863","possible_hits":"2",},
{"lineNum":" 1278","line":"                try expectEqual(NodeType.Alias, value.getType());","class":"lineCov","hits":"1","order":"4864","possible_hits":"1",},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"                const alias = value.data.Alias;","class":"linePartCov","hits":"2","order":"4865","possible_hits":"3",},
{"lineNum":" 1281","line":"                try expectEqualStrings(\"IntOrString\", alias.name);","class":"linePartCov","hits":"1","order":"4866","possible_hits":"2",},
{"lineNum":" 1282","line":"                try expectEqual(NodeType.UnionType, alias.value.getType());","class":"lineCov","hits":"1","order":"4867","possible_hits":"1",},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"                const types = alias.value.data.UnionType.items;","class":"linePartCov","hits":"2","order":"4868","possible_hits":"3",},
{"lineNum":" 1285","line":"                try expectEqual(@intCast(usize, 2), types.len);","class":"linePartCov","hits":"1","order":"4869","possible_hits":"2",},
{"lineNum":" 1286","line":"                try expectEqual(NodeType.TypeName, types[0].getType());","class":"linePartCov","hits":"1","order":"4870","possible_hits":"2",},
{"lineNum":" 1287","line":"                try expectEqualStrings(\"int\", types[0].data.TypeName);","class":"linePartCov","hits":"1","order":"4871","possible_hits":"2",},
{"lineNum":" 1288","line":"                try expectEqual(NodeType.TypeName, types[1].getType());","class":"linePartCov","hits":"1","order":"4872","possible_hits":"2",},
{"lineNum":" 1289","line":"                try expectEqualStrings(\"string\", types[1].data.TypeName);","class":"linePartCov","hits":"1","order":"4873","possible_hits":"2",},
{"lineNum":" 1290","line":"            }"},
{"lineNum":" 1291","line":"        }).check,"},
{"lineNum":" 1292","line":"    }).run();","class":"lineCov","hits":"1","order":"4862","possible_hits":"1",},
{"lineNum":" 1293","line":"}"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"fn parseInterface(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3256","possible_hits":"1",},
{"lineNum":" 1296","line":"    std.debug.assert(psr.lexer.token.ty == .Interface);","class":"lineCov","hits":"1","order":"3257","possible_hits":"1",},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3258","possible_hits":"1",},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"3259","possible_hits":"1",},
{"lineNum":" 1301","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"2","order":"3260","possible_hits":"2",},
{"lineNum":" 1302","line":"        return ParseResult.expected(\"name for interface\", name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3261","possible_hits":"1",},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"    var ty = switch (typeParser.parseInlineInterfaceType(psr)) {","class":"lineCov","hits":"1","order":"3262","possible_hits":"1",},
{"lineNum":" 1307","line":"        .Success => |result| result,","class":"lineCov","hits":"1","order":"3294","possible_hits":"1",},
{"lineNum":" 1308","line":"        else => |result| return result,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1309","line":"    };"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"    ty.csr = csr;","class":"lineCov","hits":"1","order":"3295","possible_hits":"1",},
{"lineNum":" 1312","line":"    ty.data.InterfaceType.name = name.data;","class":"linePartCov","hits":"1","order":"3296","possible_hits":"2",},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"    return ParseResult.success(ty);","class":"lineCov","hits":"1","order":"3297","possible_hits":"1",},
{"lineNum":" 1315","line":"}"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"test \"can parse interface statement\" {","class":"lineCov","hits":"2","order":"4875","possible_hits":"2",},
{"lineNum":" 1318","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4890","possible_hits":"1",},
{"lineNum":" 1319","line":"        .code = \"interface AnInterface { a: number, b: string }\","},
{"lineNum":" 1320","line":"        .check = (struct {"},
{"lineNum":" 1321","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4877","possible_hits":"2",},
{"lineNum":" 1322","line":"                try expectEqual(NodeType.InterfaceType, value.getType());","class":"lineCov","hits":"1","order":"4878","possible_hits":"1",},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"                const in = value.data.InterfaceType;","class":"linePartCov","hits":"2","order":"4879","possible_hits":"3",},
{"lineNum":" 1325","line":"                try expectEqualStrings(\"AnInterface\", in.name.?);","class":"linePartCov","hits":"1","order":"4880","possible_hits":"3",},
{"lineNum":" 1326","line":"                try expectEqual(@intCast(usize, 2), in.members.items.len);","class":"lineCov","hits":"1","order":"4881","possible_hits":"1",},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"                const a = in.members.items[0];","class":"linePartCov","hits":"1","order":"4882","possible_hits":"2",},
{"lineNum":" 1329","line":"                try expectEqualStrings(\"a\", a.name);","class":"linePartCov","hits":"1","order":"4883","possible_hits":"2",},
{"lineNum":" 1330","line":"                try expectEqual(NodeType.TypeName, a.ty.getType());","class":"lineCov","hits":"1","order":"4884","possible_hits":"1",},
{"lineNum":" 1331","line":"                try expectEqualStrings(\"number\", a.ty.data.TypeName);","class":"lineCov","hits":"2","order":"4885","possible_hits":"2",},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"                const b = in.members.items[1];","class":"linePartCov","hits":"1","order":"4886","possible_hits":"2",},
{"lineNum":" 1334","line":"                try expectEqualStrings(\"b\", b.name);","class":"linePartCov","hits":"1","order":"4887","possible_hits":"2",},
{"lineNum":" 1335","line":"                try expectEqual(NodeType.TypeName, b.ty.getType());","class":"lineCov","hits":"1","order":"4888","possible_hits":"1",},
{"lineNum":" 1336","line":"                try expectEqualStrings(\"string\", b.ty.data.TypeName);","class":"lineCov","hits":"2","order":"4889","possible_hits":"2",},
{"lineNum":" 1337","line":"            }"},
{"lineNum":" 1338","line":"        }).check,"},
{"lineNum":" 1339","line":"    }).run();","class":"lineCov","hits":"1","order":"4876","possible_hits":"1",},
{"lineNum":" 1340","line":"}"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"fn parseMemberFunction(","class":"lineCov","hits":"1","order":"4947","possible_hits":"1",},
{"lineNum":" 1343","line":"    psr: *TsParser,"},
{"lineNum":" 1344","line":"    csr: Cursor,"},
{"lineNum":" 1345","line":"    visibility: node.Visibility,"},
{"lineNum":" 1346","line":"    isStatic: bool,"},
{"lineNum":" 1347","line":"    name: []const u8,"},
{"lineNum":" 1348","line":") ParseResult {"},
{"lineNum":" 1349","line":"    std.debug.assert(psr.lexer.token.ty == .LParen);","class":"lineCov","hits":"1","order":"4948","possible_hits":"1",},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":"    const res = psr.parseLongFunction(csr, name);","class":"lineCov","hits":"1","order":"4949","possible_hits":"1",},
{"lineNum":" 1352","line":"    switch (res) {","class":"linePartCov","hits":"1","order":"4952","possible_hits":"2",},
{"lineNum":" 1353","line":"        .Success => |n| {","class":"lineCov","hits":"1","order":"4953","possible_hits":"1",},
{"lineNum":" 1354","line":"            std.debug.assert(n.getType() == .Function);","class":"lineCov","hits":"1","order":"4954","possible_hits":"1",},
{"lineNum":" 1355","line":"            return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"4960","possible_hits":"1",},
{"lineNum":" 1356","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"4955","possible_hits":"1",},
{"lineNum":" 1357","line":"                csr,"},
{"lineNum":" 1358","line":"                .ClassTypeMember,"},
{"lineNum":" 1359","line":"                node.ClassTypeMember{"},
{"lineNum":" 1360","line":"                    .isStatic = isStatic,","class":"lineCov","hits":"1","order":"4956","possible_hits":"1",},
{"lineNum":" 1361","line":"                    .visibility = visibility,","class":"lineCov","hits":"1","order":"4957","possible_hits":"1",},
{"lineNum":" 1362","line":"                    .data = .{","class":"lineCov","hits":"1","order":"4958","possible_hits":"1",},
{"lineNum":" 1363","line":"                        .Func = n.data.Function,","class":"linePartCov","hits":"2","order":"4959","possible_hits":"3",},
{"lineNum":" 1364","line":"                    },"},
{"lineNum":" 1365","line":"                },"},
{"lineNum":" 1366","line":"            ));"},
{"lineNum":" 1367","line":"        },"},
{"lineNum":" 1368","line":"        .NoMatch => return ParseResult.errMessage(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1369","line":"            csr,"},
{"lineNum":" 1370","line":"            \"Invalid class member function\","},
{"lineNum":" 1371","line":"        ),"},
{"lineNum":" 1372","line":"        .Error => return res,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1373","line":"    }"},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"fn parseClassMember(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3397","possible_hits":"1",},
{"lineNum":" 1377","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3398","possible_hits":"1",},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"    var visibility = node.Visibility.Public;","class":"lineCov","hits":"1","order":"3399","possible_hits":"1",},
{"lineNum":" 1380","line":"    var isStatic = false;","class":"lineCov","hits":"1","order":"3400","possible_hits":"1",},
{"lineNum":" 1381","line":"    var isReadOnly = false;","class":"lineCov","hits":"1","order":"3401","possible_hits":"1",},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"    modifiers: while (true) {","class":"lineCov","hits":"2","order":"3402","possible_hits":"2",},
{"lineNum":" 1384","line":"        switch (psr.lexer.token.ty) {","class":"linePartCov","hits":"4","order":"3403","possible_hits":"5",},
{"lineNum":" 1385","line":"            .Public => visibility = .Public,","class":"lineCov","hits":"1","order":"4912","possible_hits":"1",},
{"lineNum":" 1386","line":"            .Protected => visibility = .Protected,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1387","line":"            .Private => visibility = .Private,","class":"lineCov","hits":"1","order":"3404","possible_hits":"1",},
{"lineNum":" 1388","line":"            .Static => isStatic = true,","class":"lineCov","hits":"1","order":"4910","possible_hits":"1",},
{"lineNum":" 1389","line":"            .ReadOnly => isReadOnly = true,","class":"lineCov","hits":"1","order":"4911","possible_hits":"1",},
{"lineNum":" 1390","line":"            else => break :modifiers,","class":"lineCov","hits":"1","order":"3406","possible_hits":"1",},
{"lineNum":" 1391","line":"        }"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3405","possible_hits":"1",},
{"lineNum":" 1394","line":"    }"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"    if (psr.lexer.token.ty != .Ident)","class":"lineCov","hits":"2","order":"3407","possible_hits":"2",},
{"lineNum":" 1397","line":"        return ParseResult.expected(\"a class member\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":"    const name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3408","possible_hits":"1",},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3409","possible_hits":"1",},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"    if (psr.lexer.token.ty == .LParen) {","class":"lineCov","hits":"2","order":"3410","possible_hits":"2",},
{"lineNum":" 1404","line":"        if (isReadOnly)","class":"lineCov","hits":"2","order":"4945","possible_hits":"2",},
{"lineNum":" 1405","line":"            return ParseResult.errMessage(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1406","line":"                csr,"},
{"lineNum":" 1407","line":"                \"Class member function cannot be marked as \'readonly\'\","},
{"lineNum":" 1408","line":"            );"},
{"lineNum":" 1409","line":"        return parseMemberFunction(psr, csr, visibility, isStatic, name);","class":"lineCov","hits":"1","order":"4946","possible_hits":"1",},
{"lineNum":" 1410","line":"    }"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"    var ty: ?Node = null;","class":"lineCov","hits":"1","order":"3411","possible_hits":"1",},
{"lineNum":" 1413","line":"    if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"2","order":"3412","possible_hits":"2",},
{"lineNum":" 1414","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3413","possible_hits":"1",},
{"lineNum":" 1415","line":"        const tyRes = psr.parseType();","class":"lineCov","hits":"1","order":"3414","possible_hits":"1",},
{"lineNum":" 1416","line":"        switch (tyRes) {","class":"linePartCov","hits":"1","order":"3415","possible_hits":"2",},
{"lineNum":" 1417","line":"            .Success => |success| ty = success,","class":"lineCov","hits":"1","order":"3416","possible_hits":"1",},
{"lineNum":" 1418","line":"            .Error => return tyRes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1419","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1420","line":"                \"a type for class member after \':\'\","},
{"lineNum":" 1421","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1422","line":"            ),"},
{"lineNum":" 1423","line":"        }"},
{"lineNum":" 1424","line":"    }"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"    var value: ?Node = null;","class":"lineCov","hits":"1","order":"3417","possible_hits":"1",},
{"lineNum":" 1427","line":"    if (psr.lexer.token.ty == .Assign) {","class":"lineCov","hits":"2","order":"3418","possible_hits":"2",},
{"lineNum":" 1428","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4913","possible_hits":"1",},
{"lineNum":" 1429","line":"        const exprRes = psr.parseExpr();","class":"lineCov","hits":"1","order":"4914","possible_hits":"1",},
{"lineNum":" 1430","line":"        switch (exprRes) {","class":"linePartCov","hits":"1","order":"4915","possible_hits":"2",},
{"lineNum":" 1431","line":"            .Success => |success| value = success,","class":"lineCov","hits":"1","order":"4916","possible_hits":"1",},
{"lineNum":" 1432","line":"            .Error => return exprRes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1433","line":"            .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1434","line":"                \"a value for class member after \'=\'\","},
{"lineNum":" 1435","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1436","line":"            ),"},
{"lineNum":" 1437","line":"        }"},
{"lineNum":" 1438","line":"    }"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"    eatSemi(psr);","class":"lineCov","hits":"1","order":"3419","possible_hits":"1",},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3428","possible_hits":"1",},
{"lineNum":" 1443","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3420","possible_hits":"1",},
{"lineNum":" 1444","line":"        csr,"},
{"lineNum":" 1445","line":"        .ClassTypeMember,"},
{"lineNum":" 1446","line":"        node.ClassTypeMember{"},
{"lineNum":" 1447","line":"            .isStatic = isStatic,","class":"lineCov","hits":"1","order":"3421","possible_hits":"1",},
{"lineNum":" 1448","line":"            .visibility = visibility,","class":"lineCov","hits":"1","order":"3422","possible_hits":"1",},
{"lineNum":" 1449","line":"            .data = .{"},
{"lineNum":" 1450","line":"                .Var = .{","class":"lineCov","hits":"1","order":"3423","possible_hits":"1",},
{"lineNum":" 1451","line":"                    .isReadOnly = isReadOnly,","class":"lineCov","hits":"1","order":"3424","possible_hits":"1",},
{"lineNum":" 1452","line":"                    .name = name,","class":"lineCov","hits":"1","order":"3425","possible_hits":"1",},
{"lineNum":" 1453","line":"                    .ty = ty,","class":"lineCov","hits":"1","order":"3426","possible_hits":"1",},
{"lineNum":" 1454","line":"                    .value = value,","class":"lineCov","hits":"1","order":"3427","possible_hits":"1",},
{"lineNum":" 1455","line":"                },"},
{"lineNum":" 1456","line":"            },"},
{"lineNum":" 1457","line":"        },"},
{"lineNum":" 1458","line":"    ));"},
{"lineNum":" 1459","line":"}"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"fn parseClass(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"3338","possible_hits":"1",},
{"lineNum":" 1462","line":"    std.debug.assert(psr.lexer.token.ty == .Class);","class":"lineCov","hits":"1","order":"3339","possible_hits":"1",},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"3340","possible_hits":"1",},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"    const name = psr.lexer.next();","class":"lineCov","hits":"1","order":"3341","possible_hits":"1",},
{"lineNum":" 1467","line":"    if (name.ty != .Ident)","class":"lineCov","hits":"2","order":"3342","possible_hits":"2",},
{"lineNum":" 1468","line":"        return ParseResult.expected(\"name for class\", name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"    var extends: ?[]const u8 = null;","class":"lineCov","hits":"1","order":"3343","possible_hits":"1",},
{"lineNum":" 1471","line":""},
{"lineNum":" 1472","line":"    if (psr.lexer.next().ty == .Extends) {","class":"lineCov","hits":"2","order":"3344","possible_hits":"2",},
{"lineNum":" 1473","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3392","possible_hits":"1",},
{"lineNum":" 1474","line":"        if (psr.lexer.token.ty != .Ident) {","class":"lineCov","hits":"2","order":"3393","possible_hits":"2",},
{"lineNum":" 1475","line":"            return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1476","line":"                \"name of class to extend\","},
{"lineNum":" 1477","line":"                psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1478","line":"            );"},
{"lineNum":" 1479","line":"        }"},
{"lineNum":" 1480","line":"        extends = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"3394","possible_hits":"1",},
{"lineNum":" 1481","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3395","possible_hits":"1",},
{"lineNum":" 1482","line":"    }"},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"    if (psr.lexer.token.ty != .LBrace)","class":"lineCov","hits":"2","order":"3345","possible_hits":"2",},
{"lineNum":" 1485","line":"        return ParseResult.expected(\"opening \'{\' in class\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1486","line":""},
{"lineNum":" 1487","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3346","possible_hits":"1",},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"    var class = makeNode(","class":"lineCov","hits":"1","order":"3349","possible_hits":"1",},
{"lineNum":" 1490","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"3347","possible_hits":"1",},
{"lineNum":" 1491","line":"        csr,"},
{"lineNum":" 1492","line":"        .ClassType,"},
{"lineNum":" 1493","line":"        node.ClassType.new(name.data, extends),","class":"lineCov","hits":"1","order":"3348","possible_hits":"1",},
{"lineNum":" 1494","line":"    );"},
{"lineNum":" 1495","line":""},
{"lineNum":" 1496","line":"    members: while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"3350","possible_hits":"2",},
{"lineNum":" 1497","line":"        const res = parseClassMember(psr);","class":"lineCov","hits":"1","order":"3396","possible_hits":"1",},
{"lineNum":" 1498","line":"        switch (res) {","class":"linePartCov","hits":"2","order":"3429","possible_hits":"3",},
{"lineNum":" 1499","line":"            .Success => |member| class.data.ClassType.members.append(","class":"linePartCov","hits":"3","order":"3430","possible_hits":"4",},
{"lineNum":" 1500","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3431","possible_hits":"1",},
{"lineNum":" 1501","line":"                member,","class":"lineCov","hits":"1","order":"3432","possible_hits":"1",},
{"lineNum":" 1502","line":"            ) catch allocate.reportAndExit(),","class":"linePartCov","hits":"2","order":"3433","possible_hits":"3",},
{"lineNum":" 1503","line":"            .Error => return res,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1504","line":"            .NoMatch => break :members,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1505","line":"        }"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"    if (psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"2","order":"3351","possible_hits":"2",},
{"lineNum":" 1509","line":"        return ParseResult.expected(\"closing \'}\' after class\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3352","possible_hits":"1",},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"    return ParseResult.success(class);","class":"lineCov","hits":"1","order":"3353","possible_hits":"1",},
{"lineNum":" 1514","line":"}"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"test \"can parse empty class statement\" {","class":"lineCov","hits":"2","order":"4891","possible_hits":"2",},
{"lineNum":" 1517","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4898","possible_hits":"1",},
{"lineNum":" 1518","line":"        .code = \"class MyClass {}\","},
{"lineNum":" 1519","line":"        .check = (struct {"},
{"lineNum":" 1520","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4893","possible_hits":"2",},
{"lineNum":" 1521","line":"                try expectEqual(NodeType.ClassType, value.getType());","class":"lineCov","hits":"1","order":"4894","possible_hits":"1",},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"                const cls = value.data.ClassType;","class":"linePartCov","hits":"2","order":"4895","possible_hits":"3",},
{"lineNum":" 1524","line":"                try expectEqualStrings(\"MyClass\", cls.name);","class":"linePartCov","hits":"1","order":"4896","possible_hits":"2",},
{"lineNum":" 1525","line":"                try expect(cls.extends == null);","class":"lineCov","hits":"1","order":"4897","possible_hits":"1",},
{"lineNum":" 1526","line":"            }"},
{"lineNum":" 1527","line":"        }).check,"},
{"lineNum":" 1528","line":"    }).run();","class":"lineCov","hits":"1","order":"4892","possible_hits":"1",},
{"lineNum":" 1529","line":"}"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"test \"can parse empty class statement with \'extends\'\" {","class":"lineCov","hits":"2","order":"4899","possible_hits":"2",},
{"lineNum":" 1532","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4907","possible_hits":"1",},
{"lineNum":" 1533","line":"        .code = \"class MyClass extends SomeOtherClass {}\","},
{"lineNum":" 1534","line":"        .check = (struct {"},
{"lineNum":" 1535","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4901","possible_hits":"2",},
{"lineNum":" 1536","line":"                try expectEqual(NodeType.ClassType, value.getType());","class":"lineCov","hits":"1","order":"4902","possible_hits":"1",},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"                const cls = value.data.ClassType;","class":"linePartCov","hits":"2","order":"4903","possible_hits":"3",},
{"lineNum":" 1539","line":"                try expectEqualStrings(\"MyClass\", cls.name);","class":"linePartCov","hits":"1","order":"4904","possible_hits":"2",},
{"lineNum":" 1540","line":"                try expect(cls.extends != null);","class":"lineCov","hits":"1","order":"4905","possible_hits":"1",},
{"lineNum":" 1541","line":"                try expectEqualStrings(\"SomeOtherClass\", cls.extends.?);","class":"linePartCov","hits":"1","order":"4906","possible_hits":"2",},
{"lineNum":" 1542","line":"            }"},
{"lineNum":" 1543","line":"        }).check,"},
{"lineNum":" 1544","line":"    }).run();","class":"lineCov","hits":"1","order":"4900","possible_hits":"1",},
{"lineNum":" 1545","line":"}"},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"test \"can parse a class with a property\" {","class":"lineCov","hits":"2","order":"4908","possible_hits":"2",},
{"lineNum":" 1548","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4942","possible_hits":"1",},
{"lineNum":" 1549","line":"        .code = \"class MyClass { static readonly public a: number = 0; }\","},
{"lineNum":" 1550","line":"        .check = (struct {"},
{"lineNum":" 1551","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4917","possible_hits":"2",},
{"lineNum":" 1552","line":"                try expectEqual(NodeType.ClassType, value.getType());","class":"lineCov","hits":"1","order":"4918","possible_hits":"1",},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"                const cls = value.data.ClassType;","class":"linePartCov","hits":"2","order":"4919","possible_hits":"3",},
{"lineNum":" 1555","line":"                try expectEqualStrings(\"MyClass\", cls.name);","class":"linePartCov","hits":"1","order":"4920","possible_hits":"2",},
{"lineNum":" 1556","line":"                try expect(cls.extends == null);","class":"lineCov","hits":"1","order":"4921","possible_hits":"1",},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"                const members = cls.members.items;","class":"lineCov","hits":"1","order":"4922","possible_hits":"1",},
{"lineNum":" 1559","line":"                try expectEqual(@intCast(usize, 1), members.len);","class":"lineCov","hits":"1","order":"4923","possible_hits":"1",},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"                try expect(members[0].getType() == .ClassTypeMember);","class":"linePartCov","hits":"1","order":"4924","possible_hits":"2",},
{"lineNum":" 1562","line":"                const member = members[0].data.ClassTypeMember;","class":"linePartCov","hits":"1","order":"4925","possible_hits":"3",},
{"lineNum":" 1563","line":"                try expectEqual(true, member.isStatic);","class":"linePartCov","hits":"1","order":"4926","possible_hits":"2",},
{"lineNum":" 1564","line":"                try expectEqual(node.Visibility.Public, member.visibility);","class":"lineCov","hits":"1","order":"4927","possible_hits":"1",},
{"lineNum":" 1565","line":"                try expect(member.getType() == .Var);","class":"lineCov","hits":"1","order":"4928","possible_hits":"1",},
{"lineNum":" 1566","line":"                const v = member.data.Var;","class":"linePartCov","hits":"2","order":"4933","possible_hits":"3",},
{"lineNum":" 1567","line":"                try expectEqual(true, v.isReadOnly);","class":"linePartCov","hits":"1","order":"4934","possible_hits":"2",},
{"lineNum":" 1568","line":"                try expectEqualStrings(\"a\", v.name);","class":"lineCov","hits":"1","order":"4935","possible_hits":"1",},
{"lineNum":" 1569","line":"                try expect(v.ty != null);","class":"lineCov","hits":"1","order":"4936","possible_hits":"1",},
{"lineNum":" 1570","line":"                try expectEqual(NodeType.TypeName, v.ty.?.getType());","class":"linePartCov","hits":"1","order":"4937","possible_hits":"2",},
{"lineNum":" 1571","line":"                try expectEqualStrings(\"number\", v.ty.?.data.TypeName);","class":"linePartCov","hits":"1","order":"4938","possible_hits":"2",},
{"lineNum":" 1572","line":"                try expect(v.value != null);","class":"lineCov","hits":"1","order":"4939","possible_hits":"1",},
{"lineNum":" 1573","line":"                try expectEqual(NodeType.Int, v.value.?.getType());","class":"linePartCov","hits":"1","order":"4940","possible_hits":"2",},
{"lineNum":" 1574","line":"                try expectEqualStrings(\"0\", v.value.?.data.Int);","class":"linePartCov","hits":"1","order":"4941","possible_hits":"2",},
{"lineNum":" 1575","line":"            }"},
{"lineNum":" 1576","line":"        }).check,"},
{"lineNum":" 1577","line":"    }).run();","class":"lineCov","hits":"1","order":"4909","possible_hits":"1",},
{"lineNum":" 1578","line":"}"},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":"test \"can parse a class with a member function\" {","class":"lineCov","hits":"2","order":"4943","possible_hits":"2",},
{"lineNum":" 1581","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4970","possible_hits":"1",},
{"lineNum":" 1582","line":"        .code = \"class MyClass { private static func(a: number) {} }\","},
{"lineNum":" 1583","line":"        .check = (struct {"},
{"lineNum":" 1584","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4961","possible_hits":"2",},
{"lineNum":" 1585","line":"                try expectEqual(NodeType.ClassType, value.getType());","class":"lineCov","hits":"1","order":"4962","possible_hits":"1",},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"                const cls = value.data.ClassType;","class":"linePartCov","hits":"2","order":"4963","possible_hits":"3",},
{"lineNum":" 1588","line":"                try expectEqualStrings(\"MyClass\", cls.name);","class":"linePartCov","hits":"1","order":"4964","possible_hits":"2",},
{"lineNum":" 1589","line":"                try expect(cls.extends == null);","class":"lineCov","hits":"1","order":"4965","possible_hits":"1",},
{"lineNum":" 1590","line":""},
{"lineNum":" 1591","line":"                const members = cls.members.items;","class":"lineCov","hits":"1","order":"4966","possible_hits":"1",},
{"lineNum":" 1592","line":"                try expectEqual(@intCast(usize, 1), members.len);","class":"lineCov","hits":"1","order":"4967","possible_hits":"1",},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"                try expect(members[0].getType() == .ClassTypeMember);","class":"linePartCov","hits":"1","order":"4968","possible_hits":"2",},
{"lineNum":" 1595","line":"                const member = members[0].data.ClassTypeMember;","class":"linePartCov","hits":"1","order":"4969","possible_hits":"3",},
{"lineNum":" 1596","line":"                _ = member;"},
{"lineNum":" 1597","line":"                // try expectEqual(true, member.isStatic);"},
{"lineNum":" 1598","line":"                // try expectEqual(true, member.isReadOnly);"},
{"lineNum":" 1599","line":"                // try expectEqual(node.Visibility.Public, member.visibility);"},
{"lineNum":" 1600","line":"                // try expectEqualStrings(\"a\", member.name);"},
{"lineNum":" 1601","line":"                // try expect(member.ty != null);"},
{"lineNum":" 1602","line":"                // try expectEqual(NodeType.TypeName, member.ty.?.getType());"},
{"lineNum":" 1603","line":"                // try expectEqualStrings(\"number\", member.ty.?.data.TypeName);"},
{"lineNum":" 1604","line":"                // try expect(member.value != null);"},
{"lineNum":" 1605","line":"                // try expectEqual(NodeType.Int, member.value.?.getType());"},
{"lineNum":" 1606","line":"                // try expectEqualStrings(\"0\", member.value.?.data.Int);"},
{"lineNum":" 1607","line":"            }"},
{"lineNum":" 1608","line":"        }).check,"},
{"lineNum":" 1609","line":"    }).run();","class":"lineCov","hits":"1","order":"4944","possible_hits":"1",},
{"lineNum":" 1610","line":"}"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"fn parseStmtInternal(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"2974","possible_hits":"1",},
{"lineNum":" 1613","line":"    while (psr.lexer.token.ty == .Semi)","class":"lineCov","hits":"2","order":"2975","possible_hits":"2",},
{"lineNum":" 1614","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"4978","possible_hits":"1",},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"    return switch (psr.lexer.token.ty) {","class":"lineCov","hits":"21","order":"2976","possible_hits":"21",},
{"lineNum":" 1617","line":"        .Var => parseDecl(psr, .Var),","class":"lineCov","hits":"1","order":"3531","possible_hits":"1",},
{"lineNum":" 1618","line":"        .Let => parseDecl(psr, .Let),","class":"lineCov","hits":"1","order":"4297","possible_hits":"1",},
{"lineNum":" 1619","line":"        .Const => parseDecl(psr, .Const),","class":"lineCov","hits":"1","order":"3143","possible_hits":"1",},
{"lineNum":" 1620","line":"        .Return => parseReturn(psr),","class":"lineCov","hits":"1","order":"4488","possible_hits":"1",},
{"lineNum":" 1621","line":"        .If => parseIf(psr),","class":"lineCov","hits":"1","order":"4332","possible_hits":"1",},
{"lineNum":" 1622","line":"        .Switch => parseSwitch(psr),","class":"lineCov","hits":"1","order":"4438","possible_hits":"1",},
{"lineNum":" 1623","line":"        .While => parseWhile(psr),","class":"lineCov","hits":"1","order":"4665","possible_hits":"1",},
{"lineNum":" 1624","line":"        .For => parseFor(psr),","class":"lineCov","hits":"1","order":"4547","possible_hits":"1",},
{"lineNum":" 1625","line":"        .Do => parseDo(psr),","class":"lineCov","hits":"1","order":"4689","possible_hits":"1",},
{"lineNum":" 1626","line":"        .LBrace => parseBlockStmt(psr),","class":"lineCov","hits":"1","order":"4357","possible_hits":"1",},
{"lineNum":" 1627","line":"        .Break => parseBreakOrContinue(psr, .Break),","class":"lineCov","hits":"1","order":"4477","possible_hits":"1",},
{"lineNum":" 1628","line":"        .Continue => parseBreakOrContinue(psr, .Continue),","class":"lineCov","hits":"1","order":"4759","possible_hits":"1",},
{"lineNum":" 1629","line":"        .Throw => parseThrow(psr),","class":"lineCov","hits":"1","order":"4772","possible_hits":"1",},
{"lineNum":" 1630","line":"        .Try => parseTry(psr),","class":"lineCov","hits":"1","order":"4790","possible_hits":"1",},
{"lineNum":" 1631","line":"        .Type => parseAlias(psr),","class":"lineCov","hits":"1","order":"2977","possible_hits":"1",},
{"lineNum":" 1632","line":"        .Interface => parseInterface(psr),","class":"lineCov","hits":"1","order":"3255","possible_hits":"1",},
{"lineNum":" 1633","line":"        .Class => parseClass(psr),","class":"lineCov","hits":"1","order":"3337","possible_hits":"1",},
{"lineNum":" 1634","line":"        .EOF => ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"3046","possible_hits":"1",},
{"lineNum":" 1635","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"3044","possible_hits":"1",},
{"lineNum":" 1636","line":"            psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3045","possible_hits":"1",},
{"lineNum":" 1637","line":"            .EOF,"},
{"lineNum":" 1638","line":"            {},"},
{"lineNum":" 1639","line":"        )),"},
{"lineNum":" 1640","line":"        .Ident => parseLabelled(psr),","class":"lineCov","hits":"1","order":"4583","possible_hits":"1",},
{"lineNum":" 1641","line":"        else => parseExprStmt(psr),","class":"lineCov","hits":"1","order":"4468","possible_hits":"1",},
{"lineNum":" 1642","line":"    };"},
{"lineNum":" 1643","line":"}"},
{"lineNum":" 1644","line":""},
{"lineNum":" 1645","line":"pub fn parseStmt(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"2972","possible_hits":"1",},
{"lineNum":" 1646","line":"    return parseStmtInternal(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"2973","possible_hits":"1",},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"test \"can parse end-of-file\" {","class":"lineCov","hits":"2","order":"4971","possible_hits":"2",},
{"lineNum":" 1650","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4975","possible_hits":"1",},
{"lineNum":" 1651","line":"        .code = \"\","},
{"lineNum":" 1652","line":"        .check = (struct {"},
{"lineNum":" 1653","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4973","possible_hits":"2",},
{"lineNum":" 1654","line":"                try expectEqual(NodeType.EOF, value.getType());","class":"lineCov","hits":"1","order":"4974","possible_hits":"1",},
{"lineNum":" 1655","line":"            }"},
{"lineNum":" 1656","line":"        }).check,"},
{"lineNum":" 1657","line":"    }).run();","class":"lineCov","hits":"1","order":"4972","possible_hits":"1",},
{"lineNum":" 1658","line":"}"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"test \"can skip empty statements\" {","class":"lineCov","hits":"2","order":"4976","possible_hits":"2",},
{"lineNum":" 1661","line":"    try (StmtTestCase{","class":"lineCov","hits":"1","order":"4981","possible_hits":"1",},
{"lineNum":" 1662","line":"        .code = \"; ;; break;\","},
{"lineNum":" 1663","line":"        .check = (struct {"},
{"lineNum":" 1664","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"4979","possible_hits":"2",},
{"lineNum":" 1665","line":"                try expectEqual(NodeType.Break, value.getType());","class":"lineCov","hits":"1","order":"4980","possible_hits":"1",},
{"lineNum":" 1666","line":"            }"},
{"lineNum":" 1667","line":"        }).check,"},
{"lineNum":" 1668","line":"    }).run();","class":"lineCov","hits":"1","order":"4977","possible_hits":"1",},
{"lineNum":" 1669","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-09 08:39:20", "instrumented" : 912, "covered" : 813,};
var merged_data = [];
