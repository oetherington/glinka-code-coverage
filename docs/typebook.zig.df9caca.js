var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   22","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   23","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   24","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"const OpEntry = union(Variant) {"},
{"lineNum":"   27","line":"    const Variant = enum {"},
{"lineNum":"   28","line":"        Unary,"},
{"lineNum":"   29","line":"        Binary,"},
{"lineNum":"   30","line":"    };"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    // When output is null, the output type is the same as the input type"},
{"lineNum":"   33","line":"    Unary: struct {"},
{"lineNum":"   34","line":"        input: Type.Ptr,"},
{"lineNum":"   35","line":"        output: ?Type.Ptr,"},
{"lineNum":"   36","line":"    },"},
{"lineNum":"   37","line":"    Binary: struct {"},
{"lineNum":"   38","line":"        input: Type.Ptr,"},
{"lineNum":"   39","line":"        output: ?Type.Ptr,"},
{"lineNum":"   40","line":"    },"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn un(input: Type.Ptr, output: ?Type.Ptr) OpEntry {","class":"lineCov","hits":"1","order":"186","possible_hits":"1",},
{"lineNum":"   43","line":"        return OpEntry{","class":"lineCov","hits":"1","order":"190","possible_hits":"1",},
{"lineNum":"   44","line":"            .Unary = .{","class":"lineCov","hits":"1","order":"187","possible_hits":"1",},
{"lineNum":"   45","line":"                .input = input,","class":"lineCov","hits":"1","order":"188","possible_hits":"1",},
{"lineNum":"   46","line":"                .output = output,","class":"lineCov","hits":"1","order":"189","possible_hits":"1",},
{"lineNum":"   47","line":"            },"},
{"lineNum":"   48","line":"        };"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    pub fn bin(input: Type.Ptr, output: ?Type.Ptr) OpEntry {","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"   52","line":"        return OpEntry{","class":"lineCov","hits":"1","order":"202","possible_hits":"1",},
{"lineNum":"   53","line":"            .Binary = .{","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"   54","line":"                .input = input,","class":"lineCov","hits":"1","order":"200","possible_hits":"1",},
{"lineNum":"   55","line":"                .output = output,","class":"lineCov","hits":"1","order":"201","possible_hits":"1",},
{"lineNum":"   56","line":"            },"},
{"lineNum":"   57","line":"        };"},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"const OpMap = [std.meta.fields(TokenType).len]?OpEntry;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"fn createOpMap(b: *TypeBook) void {","class":"lineCov","hits":"2","order":"182","possible_hits":"2",},
{"lineNum":"   64","line":"    std.mem.set(?OpEntry, b.opMap[0..], null);","class":"lineCov","hits":"1","order":"183","possible_hits":"1",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    const h = (struct {"},
{"lineNum":"   67","line":"        book: *TypeBook,"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        fn put(self: @This(), op: TokenType, entry: OpEntry) void {","class":"lineCov","hits":"2","order":"191","possible_hits":"2",},
{"lineNum":"   70","line":"            self.book.opMap[@enumToInt(op)] = entry;","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"    }){ .book = b };","class":"lineCov","hits":"1","order":"184","possible_hits":"1",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    h.put(.Inc, OpEntry.un(&b.numberTy, null));","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"   75","line":"    h.put(.Dec, OpEntry.un(&b.numberTy, null));","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"   76","line":"    h.put(.BitNot, OpEntry.un(&b.numberTy, null));","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    h.put(.LogicalNot, OpEntry.un(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"195","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    h.put(.Nullish, OpEntry.un(&b.anyTy, &b.anyTy)); // TODO: Fix output","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    h.put(.Assign, OpEntry.bin(&b.anyTy, null));","class":"lineCov","hits":"1","order":"197","possible_hits":"1",},
{"lineNum":"   83","line":"    h.put(.NullishAssign, OpEntry.bin(&b.anyTy, &b.anyTy)); // TODO: Fix output","class":"lineCov","hits":"1","order":"203","possible_hits":"1",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    h.put(","class":"lineCov","hits":"1","order":"232","possible_hits":"1",},
{"lineNum":"   86","line":"        .Add,"},
{"lineNum":"   87","line":"        OpEntry.bin(b.getUnion(&.{ &b.numberTy, &b.stringTy }), null),","class":"lineCov","hits":"1","order":"204","possible_hits":"1",},
{"lineNum":"   88","line":"    );"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    h.put(.Sub, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":"   91","line":"    h.put(.Mul, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"234","possible_hits":"1",},
{"lineNum":"   92","line":"    h.put(.Pow, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"235","possible_hits":"1",},
{"lineNum":"   93","line":"    h.put(.Div, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"236","possible_hits":"1",},
{"lineNum":"   94","line":"    h.put(.Mod, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"237","possible_hits":"1",},
{"lineNum":"   95","line":"    h.put(.AddAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"238","possible_hits":"1",},
{"lineNum":"   96","line":"    h.put(.SubAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"239","possible_hits":"1",},
{"lineNum":"   97","line":"    h.put(.MulAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"240","possible_hits":"1",},
{"lineNum":"   98","line":"    h.put(.DivAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"241","possible_hits":"1",},
{"lineNum":"   99","line":"    h.put(.ModAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"242","possible_hits":"1",},
{"lineNum":"  100","line":"    h.put(.PowAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"243","possible_hits":"1",},
{"lineNum":"  101","line":"    h.put(.BitAndAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"244","possible_hits":"1",},
{"lineNum":"  102","line":"    h.put(.BitOrAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"245","possible_hits":"1",},
{"lineNum":"  103","line":"    h.put(.BitNotAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"246","possible_hits":"1",},
{"lineNum":"  104","line":"    h.put(.BitXorAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"247","possible_hits":"1",},
{"lineNum":"  105","line":"    h.put(.ShiftRightAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"248","possible_hits":"1",},
{"lineNum":"  106","line":"    h.put(.ShiftRightUnsignedAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"249","possible_hits":"1",},
{"lineNum":"  107","line":"    h.put(.ShiftLeftAssign, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"250","possible_hits":"1",},
{"lineNum":"  108","line":"    h.put(.BitAnd, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"251","possible_hits":"1",},
{"lineNum":"  109","line":"    h.put(.BitOr, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"252","possible_hits":"1",},
{"lineNum":"  110","line":"    h.put(.BitXor, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"253","possible_hits":"1",},
{"lineNum":"  111","line":"    h.put(.ShiftRight, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"254","possible_hits":"1",},
{"lineNum":"  112","line":"    h.put(.ShiftRightUnsigned, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"255","possible_hits":"1",},
{"lineNum":"  113","line":"    h.put(.ShiftLeft, OpEntry.bin(&b.numberTy, null));","class":"lineCov","hits":"1","order":"256","possible_hits":"1",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    h.put(.CmpGreater, OpEntry.bin(&b.numberTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"257","possible_hits":"1",},
{"lineNum":"  116","line":"    h.put(.CmpGreaterEq, OpEntry.bin(&b.numberTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"258","possible_hits":"1",},
{"lineNum":"  117","line":"    h.put(.CmpLess, OpEntry.bin(&b.numberTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"259","possible_hits":"1",},
{"lineNum":"  118","line":"    h.put(.CmpLessEq, OpEntry.bin(&b.numberTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"260","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    h.put(.CmpEq, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"261","possible_hits":"1",},
{"lineNum":"  121","line":"    h.put(.CmpStrictEq, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"262","possible_hits":"1",},
{"lineNum":"  122","line":"    h.put(.CmpNotEq, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"263","possible_hits":"1",},
{"lineNum":"  123","line":"    h.put(.CmpStrictNotEq, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"264","possible_hits":"1",},
{"lineNum":"  124","line":"    h.put(.LogicalAnd, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"265","possible_hits":"1",},
{"lineNum":"  125","line":"    h.put(.LogicalOr, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  126","line":"    h.put(.LogicalAndAssign, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"267","possible_hits":"1",},
{"lineNum":"  127","line":"    h.put(.LogicalOrAssign, OpEntry.bin(&b.anyTy, &b.booleanTy));","class":"lineCov","hits":"1","order":"268","possible_hits":"1",},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"pub const TypeBook = struct {"},
{"lineNum":"  131","line":"    const TypeMap = std.HashMap("},
{"lineNum":"  132","line":"        Type.Ptr,"},
{"lineNum":"  133","line":"        Type.Ptr,"},
{"lineNum":"  134","line":"        struct {"},
{"lineNum":"  135","line":"            pub fn hash(self: @This(), value: Type.Ptr) u64 {","class":"lineCov","hits":"1","order":"4615","possible_hits":"1",},
{"lineNum":"  136","line":"                _ = self;"},
{"lineNum":"  137","line":"                return value.hash();","class":"lineCov","hits":"1","order":"4616","possible_hits":"1",},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"            pub fn eql(self: @This(), a: Type.Ptr, b: Type.Ptr) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"                _ = self;"},
{"lineNum":"  142","line":"                return a.eql(b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"            }"},
{"lineNum":"  144","line":"        },"},
{"lineNum":"  145","line":"        std.hash_map.default_max_load_percentage,"},
{"lineNum":"  146","line":"    );"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    alloc: Allocator,"},
{"lineNum":"  149","line":"    opMap: OpMap,"},
{"lineNum":"  150","line":"    unknownTy: Type = Type.newUnknown(),"},
{"lineNum":"  151","line":"    anyTy: Type = Type.newAny(),"},
{"lineNum":"  152","line":"    voidTy: Type = Type.newVoid(),"},
{"lineNum":"  153","line":"    nullTy: Type = Type.newNull(),"},
{"lineNum":"  154","line":"    undefinedTy: Type = Type.newUndefined(),"},
{"lineNum":"  155","line":"    neverTy: Type = Type.newNever(),"},
{"lineNum":"  156","line":"    numberTy: Type = Type.newNumber(),"},
{"lineNum":"  157","line":"    stringTy: Type = Type.newString(),"},
{"lineNum":"  158","line":"    booleanTy: Type = Type.newBoolean(),"},
{"lineNum":"  159","line":"    objectTy: Type = Type.newObject(),"},
{"lineNum":"  160","line":"    arrayTys: Type.ArrayType.Map,"},
{"lineNum":"  161","line":"    functionTys: Type.FunctionType.Map,"},
{"lineNum":"  162","line":"    unionTys: Type.UnionType.Map,"},
{"lineNum":"  163","line":"    tyMap: TypeMap,"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    pub fn new(alloc: Allocator) *TypeBook {","class":"lineCov","hits":"1","order":"163","possible_hits":"1",},
{"lineNum":"  166","line":"        var self = alloc.create(TypeBook) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"164","possible_hits":"1",},
{"lineNum":"  167","line":"        self.* = TypeBook{","class":"lineCov","hits":"2","order":"165","possible_hits":"2",},
{"lineNum":"  168","line":"            .alloc = alloc,","class":"lineCov","hits":"1","order":"166","possible_hits":"1",},
{"lineNum":"  169","line":"            .opMap = undefined,","class":"lineCov","hits":"1","order":"167","possible_hits":"1",},
{"lineNum":"  170","line":"            .arrayTys = Type.ArrayType.Map.new(alloc),","class":"lineCov","hits":"1","order":"168","possible_hits":"1",},
{"lineNum":"  171","line":"            .functionTys = Type.FunctionType.Map.new(alloc),","class":"lineCov","hits":"1","order":"172","possible_hits":"1",},
{"lineNum":"  172","line":"            .unionTys = Type.UnionType.Map.new(alloc),","class":"lineCov","hits":"1","order":"176","possible_hits":"1",},
{"lineNum":"  173","line":"            .tyMap = TypeMap.init(alloc),","class":"lineCov","hits":"1","order":"180","possible_hits":"1",},
{"lineNum":"  174","line":"        };"},
{"lineNum":"  175","line":"        createOpMap(self);","class":"lineCov","hits":"1","order":"181","possible_hits":"1",},
{"lineNum":"  176","line":"        return self;","class":"lineCov","hits":"1","order":"269","possible_hits":"1",},
{"lineNum":"  177","line":"    }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    pub fn deinit(self: *TypeBook) void {","class":"lineCov","hits":"2","order":"305","possible_hits":"2",},
{"lineNum":"  180","line":"        var it = self.tyMap.valueIterator();","class":"lineCov","hits":"1","order":"306","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        while (it.next()) |val| {","class":"lineCov","hits":"2","order":"307","possible_hits":"2",},
{"lineNum":"  183","line":"            // TODO: Properly free the types"},
{"lineNum":"  184","line":"            // const ty = val.*.*;"},
{"lineNum":"  185","line":"            // std.debug.assert(std.meta.activeTag(ty) == .Function);"},
{"lineNum":"  186","line":"            // self.map.allocator.free(ty.Function.args);"},
{"lineNum":"  187","line":"            self.tyMap.allocator.destroy(val.*);","class":"lineCov","hits":"1","order":"4618","possible_hits":"1",},
{"lineNum":"  188","line":"        }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        self.tyMap.deinit();","class":"lineCov","hits":"1","order":"308","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        self.unionTys.deinit();","class":"lineCov","hits":"1","order":"309","possible_hits":"1",},
{"lineNum":"  193","line":"        self.functionTys.deinit();","class":"lineCov","hits":"1","order":"318","possible_hits":"1",},
{"lineNum":"  194","line":"        self.arrayTys.deinit();","class":"lineCov","hits":"1","order":"323","possible_hits":"1",},
{"lineNum":"  195","line":"        self.alloc.destroy(self);","class":"lineCov","hits":"1","order":"328","possible_hits":"1",},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    pub fn getOpEntry(self: *TypeBook, ty: TokenType) ?OpEntry {","class":"lineCov","hits":"1","order":"2206","possible_hits":"1",},
{"lineNum":"  199","line":"        return self.opMap[@enumToInt(ty)];","class":"lineCov","hits":"1","order":"2207","possible_hits":"1",},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    pub fn getUnknown(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2084","possible_hits":"1",},
{"lineNum":"  203","line":"        return &self.unknownTy;","class":"lineCov","hits":"1","order":"2085","possible_hits":"1",},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    pub fn getAny(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2087","possible_hits":"1",},
{"lineNum":"  207","line":"        return &self.anyTy;","class":"lineCov","hits":"1","order":"2088","possible_hits":"1",},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    pub fn getVoid(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2090","possible_hits":"1",},
{"lineNum":"  211","line":"        return &self.voidTy;","class":"lineCov","hits":"1","order":"2091","possible_hits":"1",},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    pub fn getNull(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2093","possible_hits":"1",},
{"lineNum":"  215","line":"        return &self.nullTy;","class":"lineCov","hits":"1","order":"2094","possible_hits":"1",},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    pub fn getUndefined(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2096","possible_hits":"1",},
{"lineNum":"  219","line":"        return &self.undefinedTy;","class":"lineCov","hits":"1","order":"2097","possible_hits":"1",},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    pub fn getNever(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2099","possible_hits":"1",},
{"lineNum":"  223","line":"        return &self.neverTy;","class":"lineCov","hits":"1","order":"2100","possible_hits":"1",},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    pub fn getNumber(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2102","possible_hits":"1",},
{"lineNum":"  227","line":"        return &self.numberTy;","class":"lineCov","hits":"1","order":"2103","possible_hits":"1",},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    pub fn getString(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2105","possible_hits":"1",},
{"lineNum":"  231","line":"        return &self.stringTy;","class":"lineCov","hits":"1","order":"2106","possible_hits":"1",},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    pub fn getBoolean(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"1973","possible_hits":"1",},
{"lineNum":"  235","line":"        return &self.booleanTy;","class":"lineCov","hits":"1","order":"1974","possible_hits":"1",},
{"lineNum":"  236","line":"    }"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    pub fn getObject(self: *TypeBook) Type.Ptr {","class":"lineCov","hits":"1","order":"2109","possible_hits":"1",},
{"lineNum":"  239","line":"        return &self.objectTy;","class":"lineCov","hits":"1","order":"2110","possible_hits":"1",},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    pub fn getArray(self: *TypeBook, subtype: Type.Ptr) Type.Ptr {","class":"lineCov","hits":"1","order":"2117","possible_hits":"1",},
{"lineNum":"  243","line":"        return self.arrayTys.get(subtype);","class":"lineCov","hits":"1","order":"2118","possible_hits":"1",},
{"lineNum":"  244","line":"    }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    pub fn getFunction(","class":"lineCov","hits":"1","order":"2169","possible_hits":"1",},
{"lineNum":"  247","line":"        self: *TypeBook,"},
{"lineNum":"  248","line":"        ret: Type.Ptr,"},
{"lineNum":"  249","line":"        args: []Type.Ptr,"},
{"lineNum":"  250","line":"    ) Type.Ptr {"},
{"lineNum":"  251","line":"        return self.functionTys.get(ret, args);","class":"lineCov","hits":"1","order":"2170","possible_hits":"1",},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    pub fn getUnion(self: *TypeBook, tys: []Type.Ptr) Type.Ptr {","class":"lineCov","hits":"1","order":"205","possible_hits":"1",},
{"lineNum":"  255","line":"        return self.unionTys.get(tys);","class":"lineCov","hits":"1","order":"206","possible_hits":"1",},
{"lineNum":"  256","line":"    }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    pub fn getAlias(self: *TypeBook, name: []const u8, ty: Type.Ptr) Type.Ptr {","class":"lineCov","hits":"1","order":"4609","possible_hits":"1",},
{"lineNum":"  259","line":"        const alias = Type{ .Alias = Type.AliasType.new(name, ty) };","class":"lineCov","hits":"1","order":"4610","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        if (self.tyMap.get(&alias)) |t|","class":"lineCov","hits":"2","order":"4611","possible_hits":"2",},
{"lineNum":"  262","line":"            return t;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"        var t = allocate.create(self.alloc, Type);","class":"lineCov","hits":"1","order":"4612","possible_hits":"1",},
{"lineNum":"  265","line":"        t.* = alias;","class":"lineCov","hits":"1","order":"4613","possible_hits":"1",},
{"lineNum":"  266","line":"        self.tyMap.put(&alias, t) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"4614","possible_hits":"1",},
{"lineNum":"  267","line":"        return t;","class":"lineCov","hits":"1","order":"4617","possible_hits":"1",},
{"lineNum":"  268","line":"    }"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    pub fn combine(self: *TypeBook, a: Type.Ptr, b: Type.Ptr) Type.Ptr {","class":"lineCov","hits":"1","order":"2221","possible_hits":"1",},
{"lineNum":"  271","line":"        if (b.isAssignableTo(a))","class":"lineCov","hits":"2","order":"2222","possible_hits":"2",},
{"lineNum":"  272","line":"            return a;","class":"lineCov","hits":"1","order":"2223","possible_hits":"1",},
{"lineNum":"  273","line":"        return self.getUnion(&[_]Type.Ptr{ a, b });","class":"lineCov","hits":"1","order":"2226","possible_hits":"1",},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":"};"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"test \"type book can return builtin types\" {","class":"lineCov","hits":"3","order":"2081","possible_hits":"3",},
{"lineNum":"  278","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2082","possible_hits":"1",},
{"lineNum":"  279","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2111","possible_hits":"11",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    try expectEqual(Type.Type.Unknown, book.getUnknown().getType());","class":"linePartCov","hits":"1","order":"2083","possible_hits":"2",},
{"lineNum":"  282","line":"    try expectEqual(Type.Type.Any, book.getAny().getType());","class":"linePartCov","hits":"1","order":"2086","possible_hits":"2",},
{"lineNum":"  283","line":"    try expectEqual(Type.Type.Void, book.getVoid().getType());","class":"linePartCov","hits":"1","order":"2089","possible_hits":"2",},
{"lineNum":"  284","line":"    try expectEqual(Type.Type.Null, book.getNull().getType());","class":"linePartCov","hits":"1","order":"2092","possible_hits":"2",},
{"lineNum":"  285","line":"    try expectEqual(Type.Type.Undefined, book.getUndefined().getType());","class":"linePartCov","hits":"1","order":"2095","possible_hits":"2",},
{"lineNum":"  286","line":"    try expectEqual(Type.Type.Never, book.getNever().getType());","class":"linePartCov","hits":"1","order":"2098","possible_hits":"2",},
{"lineNum":"  287","line":"    try expectEqual(Type.Type.Number, book.getNumber().getType());","class":"linePartCov","hits":"1","order":"2101","possible_hits":"2",},
{"lineNum":"  288","line":"    try expectEqual(Type.Type.String, book.getString().getType());","class":"linePartCov","hits":"1","order":"2104","possible_hits":"2",},
{"lineNum":"  289","line":"    try expectEqual(Type.Type.Boolean, book.getBoolean().getType());","class":"linePartCov","hits":"1","order":"2107","possible_hits":"2",},
{"lineNum":"  290","line":"    try expectEqual(Type.Type.Object, book.getObject().getType());","class":"linePartCov","hits":"1","order":"2108","possible_hits":"2",},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"test \"type book can create and retrieve array types\" {","class":"lineCov","hits":"3","order":"2112","possible_hits":"3",},
{"lineNum":"  294","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2113","possible_hits":"1",},
{"lineNum":"  295","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2140","possible_hits":"9",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    const num: *const Type = &book.numberTy;","class":"lineCov","hits":"1","order":"2114","possible_hits":"1",},
{"lineNum":"  298","line":"    const str: *const Type = &book.stringTy;","class":"lineCov","hits":"1","order":"2115","possible_hits":"1",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    const numArray = book.getArray(num);","class":"lineCov","hits":"1","order":"2116","possible_hits":"1",},
{"lineNum":"  301","line":"    try expectEqual(Type.Type.Array, numArray.getType());","class":"linePartCov","hits":"1","order":"2128","possible_hits":"2",},
{"lineNum":"  302","line":"    try expectEqual(num, numArray.Array.subtype);","class":"linePartCov","hits":"2","order":"2129","possible_hits":"3",},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    const strArray = book.getArray(str);","class":"lineCov","hits":"1","order":"2130","possible_hits":"1",},
{"lineNum":"  305","line":"    try expectEqual(Type.Type.Array, strArray.getType());","class":"linePartCov","hits":"1","order":"2133","possible_hits":"2",},
{"lineNum":"  306","line":"    try expectEqual(str, strArray.Array.subtype);","class":"linePartCov","hits":"2","order":"2134","possible_hits":"3",},
{"lineNum":"  307","line":"    try expect(numArray != strArray);","class":"linePartCov","hits":"1","order":"2135","possible_hits":"2",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    const numArrayArray = book.getArray(numArray);","class":"lineCov","hits":"1","order":"2136","possible_hits":"1",},
{"lineNum":"  310","line":"    try expectEqual(Type.Type.Array, numArrayArray.getType());","class":"linePartCov","hits":"1","order":"2137","possible_hits":"2",},
{"lineNum":"  311","line":"    try expectEqual(numArray, numArrayArray.Array.subtype);","class":"linePartCov","hits":"2","order":"2138","possible_hits":"3",},
{"lineNum":"  312","line":"    try expect(numArray != numArrayArray);","class":"linePartCov","hits":"1","order":"2139","possible_hits":"2",},
{"lineNum":"  313","line":"}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"test \"type book can create and retrieve union types\" {","class":"lineCov","hits":"3","order":"2142","possible_hits":"3",},
{"lineNum":"  316","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2143","possible_hits":"1",},
{"lineNum":"  317","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2162","possible_hits":"7",},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    const num = &book.numberTy;","class":"lineCov","hits":"1","order":"2144","possible_hits":"1",},
{"lineNum":"  320","line":"    const str = &book.stringTy;","class":"lineCov","hits":"1","order":"2145","possible_hits":"1",},
{"lineNum":"  321","line":"    const numStr = book.getUnion(&.{ num, str });","class":"lineCov","hits":"1","order":"2146","possible_hits":"1",},
{"lineNum":"  322","line":"    try expectEqual(Type.Type.Union, numStr.getType());","class":"linePartCov","hits":"1","order":"2151","possible_hits":"2",},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    const tys = numStr.Union.tys;","class":"linePartCov","hits":"2","order":"2152","possible_hits":"3",},
{"lineNum":"  325","line":"    try expectEqual(@intCast(usize, 2), tys.len);","class":"linePartCov","hits":"1","order":"2153","possible_hits":"3",},
{"lineNum":"  326","line":"    try expect(tys[0] == num and tys[1] == str);","class":"linePartCov","hits":"1","order":"2154","possible_hits":"3",},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    const numStr2 = book.getUnion(&.{ num, str });","class":"lineCov","hits":"1","order":"2155","possible_hits":"1",},
{"lineNum":"  329","line":"    try expectEqual(numStr, numStr2);","class":"linePartCov","hits":"1","order":"2156","possible_hits":"2",},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    const strNum = book.getUnion(&.{ str, num });","class":"lineCov","hits":"1","order":"2157","possible_hits":"1",},
{"lineNum":"  332","line":"    try expectEqual(numStr, strNum);","class":"linePartCov","hits":"1","order":"2158","possible_hits":"2",},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    const boolean = &book.booleanTy;","class":"lineCov","hits":"1","order":"2159","possible_hits":"1",},
{"lineNum":"  335","line":"    const boolNum = book.getUnion(&.{ boolean, num });","class":"lineCov","hits":"1","order":"2160","possible_hits":"1",},
{"lineNum":"  336","line":"    try expect(numStr != boolNum);","class":"linePartCov","hits":"1","order":"2161","possible_hits":"2",},
{"lineNum":"  337","line":"}"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"test \"type book can create and retrieve function types\" {","class":"lineCov","hits":"3","order":"2163","possible_hits":"3",},
{"lineNum":"  340","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2164","possible_hits":"1",},
{"lineNum":"  341","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2198","possible_hits":"7",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    const n: *const Type = &book.numberTy;","class":"lineCov","hits":"1","order":"2165","possible_hits":"1",},
{"lineNum":"  344","line":"    const s: *const Type = &book.stringTy;","class":"lineCov","hits":"1","order":"2166","possible_hits":"1",},
{"lineNum":"  345","line":"    const b: *const Type = &book.booleanTy;","class":"lineCov","hits":"1","order":"2167","possible_hits":"1",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    const func = book.getFunction(n, &[_]Type.Ptr{ s, b });","class":"lineCov","hits":"1","order":"2168","possible_hits":"1",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    try expectEqual(Type.Type.Function, func.getType());","class":"linePartCov","hits":"1","order":"2188","possible_hits":"2",},
{"lineNum":"  350","line":"    try expectEqual(n, func.Function.ret);","class":"linePartCov","hits":"2","order":"2189","possible_hits":"3",},
{"lineNum":"  351","line":"    try expectEqual(@intCast(usize, 2), func.Function.args.len);","class":"linePartCov","hits":"2","order":"2190","possible_hits":"3",},
{"lineNum":"  352","line":"    try expectEqual(s, func.Function.args[0]);","class":"linePartCov","hits":"2","order":"2191","possible_hits":"3",},
{"lineNum":"  353","line":"    try expectEqual(b, func.Function.args[1]);","class":"linePartCov","hits":"2","order":"2192","possible_hits":"3",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    const func2 = book.getFunction(n, &[_]Type.Ptr{ s, b });","class":"lineCov","hits":"1","order":"2193","possible_hits":"1",},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    try expectEqual(func, func2);","class":"linePartCov","hits":"1","order":"2197","possible_hits":"2",},
{"lineNum":"  358","line":"}"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"test \"type book can return an OpEntry\" {","class":"lineCov","hits":"3","order":"2203","possible_hits":"3",},
{"lineNum":"  361","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2204","possible_hits":"1",},
{"lineNum":"  362","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2210","possible_hits":"3",},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    const ty = TokenType.Sub;"},
{"lineNum":"  365","line":"    const entry = book.getOpEntry(ty).?;","class":"linePartCov","hits":"1","order":"2205","possible_hits":"2",},
{"lineNum":"  366","line":"    try expectEqual(Type.Type.Number, entry.Binary.input.getType());","class":"linePartCov","hits":"1","order":"2208","possible_hits":"3",},
{"lineNum":"  367","line":"    try expect(entry.Binary.output == null);","class":"linePartCov","hits":"2","order":"2209","possible_hits":"3",},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"test \"invalid token types don\'t have an OpEntry\" {","class":"lineCov","hits":"3","order":"2211","possible_hits":"3",},
{"lineNum":"  371","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2212","possible_hits":"1",},
{"lineNum":"  372","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2215","possible_hits":"2",},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    const ty = TokenType.LParen;"},
{"lineNum":"  375","line":"    const entry = book.getOpEntry(ty);","class":"lineCov","hits":"1","order":"2213","possible_hits":"1",},
{"lineNum":"  376","line":"    try expect(entry == null);","class":"linePartCov","hits":"1","order":"2214","possible_hits":"2",},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"test \"typebook can combine types\" {","class":"lineCov","hits":"3","order":"2216","possible_hits":"3",},
{"lineNum":"  380","line":"    var book = TypeBook.new(std.testing.allocator);","class":"lineCov","hits":"1","order":"2217","possible_hits":"1",},
{"lineNum":"  381","line":"    defer book.deinit();","class":"linePartCov","hits":"1","order":"2230","possible_hits":"5",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    const num = book.getNumber();","class":"lineCov","hits":"1","order":"2218","possible_hits":"1",},
{"lineNum":"  384","line":"    const str = book.getString();","class":"lineCov","hits":"1","order":"2219","possible_hits":"1",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    const a = book.combine(num, num);","class":"lineCov","hits":"1","order":"2220","possible_hits":"1",},
{"lineNum":"  387","line":"    try expectEqual(num, a);","class":"linePartCov","hits":"1","order":"2224","possible_hits":"2",},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    const b = book.combine(num, str);","class":"lineCov","hits":"1","order":"2225","possible_hits":"1",},
{"lineNum":"  390","line":"    try expectEqual(Type.Type.Union, b.getType());","class":"linePartCov","hits":"1","order":"2227","possible_hits":"2",},
{"lineNum":"  391","line":"    try expectEqual(num, b.Union.tys[0]);","class":"linePartCov","hits":"2","order":"2228","possible_hits":"3",},
{"lineNum":"  392","line":"    try expectEqual(str, b.Union.tys[1]);","class":"linePartCov","hits":"2","order":"2229","possible_hits":"3",},
{"lineNum":"  393","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-05 21:30:20", "instrumented" : 206, "covered" : 203,};
var merged_data = [];
