var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   22","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   23","line":"const Config = @import(\"../common/config.zig\").Config;"},
{"lineNum":"   24","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   25","line":"const Node = @import(\"../common/node.zig\").Node;"},
{"lineNum":"   26","line":"const Backend = @import(\"../common/backend.zig\").Backend;"},
{"lineNum":"   27","line":"const Scope = @import(\"scope.zig\").Scope;"},
{"lineNum":"   28","line":"const Type = @import(\"../common/types/type.zig\").Type;"},
{"lineNum":"   29","line":"const TypeBook = @import(\"typebook.zig\").TypeBook;"},
{"lineNum":"   30","line":"const TypeError = @import(\"errors/type_error.zig\").TypeError;"},
{"lineNum":"   31","line":"const implicitAnyError = @import(\"errors/implicit_any_error.zig\");"},
{"lineNum":"   32","line":"const ImplicitAnyError = implicitAnyError.ImplicitAnyError;"},
{"lineNum":"   33","line":"const CompileError = @import(\"errors/compile_error.zig\").CompileError;"},
{"lineNum":"   34","line":"const ErrorContext = @import(\"errors/error_context.zig\").ErrorContext;"},
{"lineNum":"   35","line":"const inferrer = @import(\"inferrer.zig\");"},
{"lineNum":"   36","line":"const typeFinder = @import(\"type_finder.zig\");"},
{"lineNum":"   37","line":"const expression = @import(\"expression.zig\");"},
{"lineNum":"   38","line":"const block = @import(\"block.zig\");"},
{"lineNum":"   39","line":"const declaration = @import(\"declaration.zig\");"},
{"lineNum":"   40","line":"const conditional = @import(\"conditional.zig\");"},
{"lineNum":"   41","line":"const loop = @import(\"loop.zig\");"},
{"lineNum":"   42","line":"const throw = @import(\"throw.zig\");"},
{"lineNum":"   43","line":"const function = @import(\"function.zig\");"},
{"lineNum":"   44","line":"const types = @import(\"types.zig\");"},
{"lineNum":"   45","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   46","line":"const NopBackend = @import(\"compiler_test_case.zig\").NopBackend;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"pub const Compiler = struct {"},
{"lineNum":"   49","line":"    const StringList = std.ArrayList([]u8);"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    alloc: Allocator,"},
{"lineNum":"   52","line":"    config: *const Config,"},
{"lineNum":"   53","line":"    backend: *Backend,"},
{"lineNum":"   54","line":"    scope: *Scope,"},
{"lineNum":"   55","line":"    typebook: *TypeBook,"},
{"lineNum":"   56","line":"    errors: ErrorContext,"},
{"lineNum":"   57","line":"    strings: StringList,"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    pub fn new(","class":"lineCov","hits":"1","order":"151","possible_hits":"1",},
{"lineNum":"   60","line":"        alloc: Allocator,"},
{"lineNum":"   61","line":"        config: *const Config,"},
{"lineNum":"   62","line":"        backend: *Backend,"},
{"lineNum":"   63","line":"    ) Compiler {"},
{"lineNum":"   64","line":"        return Compiler{","class":"lineCov","hits":"1","order":"274","possible_hits":"1",},
{"lineNum":"   65","line":"            .alloc = alloc,","class":"lineCov","hits":"1","order":"152","possible_hits":"1",},
{"lineNum":"   66","line":"            .config = config,","class":"lineCov","hits":"1","order":"153","possible_hits":"1",},
{"lineNum":"   67","line":"            .backend = backend,","class":"lineCov","hits":"1","order":"154","possible_hits":"1",},
{"lineNum":"   68","line":"            .scope = Scope.new(alloc, null),","class":"lineCov","hits":"1","order":"155","possible_hits":"1",},
{"lineNum":"   69","line":"            .typebook = TypeBook.new(alloc),","class":"lineCov","hits":"1","order":"162","possible_hits":"1",},
{"lineNum":"   70","line":"            .errors = ErrorContext.new(alloc),","class":"lineCov","hits":"1","order":"269","possible_hits":"1",},
{"lineNum":"   71","line":"            .strings = StringList.init(alloc),","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"   72","line":"        };"},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    pub fn deinit(self: *Compiler) void {","class":"lineCov","hits":"2","order":"300","possible_hits":"2",},
{"lineNum":"   76","line":"        std.debug.assert(self.scope.parent == null);","class":"lineCov","hits":"1","order":"301","possible_hits":"1",},
{"lineNum":"   77","line":"        self.scope.deinit();","class":"lineCov","hits":"1","order":"302","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        self.typebook.deinit();","class":"lineCov","hits":"1","order":"303","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        self.errors.deinit();","class":"lineCov","hits":"1","order":"325","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        for (self.strings.items) |string|","class":"lineCov","hits":"2","order":"328","possible_hits":"2",},
{"lineNum":"   84","line":"            self.alloc.free(string);","class":"lineCov","hits":"1","order":"3716","possible_hits":"1",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        self.strings.deinit();","class":"lineCov","hits":"1","order":"329","possible_hits":"1",},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    pub fn pushScope(self: *Compiler) void {","class":"lineCov","hits":"2","order":"278","possible_hits":"2",},
{"lineNum":"   90","line":"        self.scope = Scope.new(self.alloc, self.scope);","class":"lineCov","hits":"1","order":"279","possible_hits":"1",},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    pub fn popScope(self: *Compiler) void {","class":"lineCov","hits":"2","order":"284","possible_hits":"2",},
{"lineNum":"   94","line":"        std.debug.assert(self.scope.parent != null);","class":"lineCov","hits":"1","order":"285","possible_hits":"1",},
{"lineNum":"   95","line":"        var old = self.scope;","class":"lineCov","hits":"1","order":"286","possible_hits":"1",},
{"lineNum":"   96","line":"        self.scope = old.parent.?;","class":"lineCov","hits":"1","order":"287","possible_hits":"1",},
{"lineNum":"   97","line":"        old.deinit();","class":"lineCov","hits":"1","order":"288","possible_hits":"1",},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    pub fn hasErrors(self: Compiler) bool {","class":"lineCov","hits":"1","order":"3247","possible_hits":"1",},
{"lineNum":"  101","line":"        return self.errors.count() > 0;","class":"lineCov","hits":"1","order":"3248","possible_hits":"1",},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    pub fn reportErrors(self: Compiler) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"        try self.errors.reportToStdErr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    pub fn getError(self: Compiler, index: usize) CompileError {","class":"lineCov","hits":"1","order":"3290","possible_hits":"1",},
{"lineNum":"  109","line":"        return self.errors.list.items[index];","class":"lineCov","hits":"1","order":"3291","possible_hits":"1",},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    pub fn fmt(","class":"linePartCov","hits":"5","order":"3697","possible_hits":"8",},
{"lineNum":"  113","line":"        self: *Compiler,"},
{"lineNum":"  114","line":"        comptime format: []const u8,"},
{"lineNum":"  115","line":"        args: anytype,"},
{"lineNum":"  116","line":"    ) []u8 {"},
{"lineNum":"  117","line":"        const string = std.fmt.allocPrint(","class":"linePartCov","hits":"5","order":"3700","possible_hits":"8",},
{"lineNum":"  118","line":"            self.alloc,","class":"linePartCov","hits":"5","order":"3698","possible_hits":"8",},
{"lineNum":"  119","line":"            format,"},
{"lineNum":"  120","line":"            args,","class":"linePartCov","hits":"5","order":"3699","possible_hits":"8",},
{"lineNum":"  121","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"5","order":"3701","possible_hits":"8",},
{"lineNum":"  122","line":"        self.strings.append(string) catch allocate.reportAndExit();","class":"linePartCov","hits":"5","order":"3702","possible_hits":"8",},
{"lineNum":"  123","line":"        return string;","class":"linePartCov","hits":"5","order":"3703","possible_hits":"8",},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    pub fn implicitAny(","class":"lineCov","hits":"1","order":"3425","possible_hits":"1",},
{"lineNum":"  127","line":"        self: *Compiler,"},
{"lineNum":"  128","line":"        csr: Cursor,"},
{"lineNum":"  129","line":"        symbol: []const u8,"},
{"lineNum":"  130","line":"    ) Type.Ptr {"},
{"lineNum":"  131","line":"        if (self.config.errorOnImplicitAny)","class":"lineCov","hits":"2","order":"3426","possible_hits":"2",},
{"lineNum":"  132","line":"            self.errors.append(CompileError.implicitAnyError(","class":"lineCov","hits":"2","order":"3427","possible_hits":"2",},
{"lineNum":"  133","line":"                ImplicitAnyError.new(csr, symbol),","class":"lineCov","hits":"1","order":"3428","possible_hits":"1",},
{"lineNum":"  134","line":"            )) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3429","possible_hits":"1",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        return self.typebook.getAny();","class":"lineCov","hits":"1","order":"3430","possible_hits":"1",},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    pub fn inferExprType(self: *Compiler, nd: Node) ?Type.Ptr {","class":"lineCov","hits":"1","order":"3230","possible_hits":"1",},
{"lineNum":"  140","line":"        const valTy = inferrer.inferExprType(self, nd);","class":"lineCov","hits":"1","order":"3231","possible_hits":"1",},
{"lineNum":"  141","line":"        switch (valTy) {","class":"linePartCov","hits":"1","order":"3239","possible_hits":"2",},
{"lineNum":"  142","line":"            .Success => |ty| {","class":"lineCov","hits":"1","order":"3240","possible_hits":"1",},
{"lineNum":"  143","line":"                nd.ty = ty;","class":"lineCov","hits":"1","order":"3241","possible_hits":"1",},
{"lineNum":"  144","line":"                return ty;","class":"lineCov","hits":"1","order":"3242","possible_hits":"1",},
{"lineNum":"  145","line":"            },"},
{"lineNum":"  146","line":"            .Error => |err| {","class":"lineCov","hits":"1","order":"3284","possible_hits":"1",},
{"lineNum":"  147","line":"                self.errors.append(err) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"3285","possible_hits":"1",},
{"lineNum":"  148","line":"                return null;","class":"lineCov","hits":"1","order":"3286","possible_hits":"1",},
{"lineNum":"  149","line":"            },"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    pub fn findType(self: *Compiler, nd: Node) ?Type.Ptr {","class":"lineCov","hits":"1","order":"3444","possible_hits":"1",},
{"lineNum":"  154","line":"        return typeFinder.findType(self.scope, self.typebook, nd);","class":"lineCov","hits":"1","order":"3445","possible_hits":"1",},
{"lineNum":"  155","line":"    }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    pub fn processNode(self: *Compiler, nd: Node) void {","class":"lineCov","hits":"2","order":"3218","possible_hits":"2",},
{"lineNum":"  158","line":"        switch (nd.data) {","class":"lineCov","hits":"15","order":"3219","possible_hits":"15",},
{"lineNum":"  159","line":"            .PrefixOp,"},
{"lineNum":"  160","line":"            .PostfixOp,"},
{"lineNum":"  161","line":"            .BinaryOp,"},
{"lineNum":"  162","line":"            .Ternary,"},
{"lineNum":"  163","line":"            .Ident,"},
{"lineNum":"  164","line":"            .True,"},
{"lineNum":"  165","line":"            .False,"},
{"lineNum":"  166","line":"            .Null,"},
{"lineNum":"  167","line":"            .Undefined,"},
{"lineNum":"  168","line":"            .Int,"},
{"lineNum":"  169","line":"            .String,"},
{"lineNum":"  170","line":"            .Call,"},
{"lineNum":"  171","line":"            => expression.processExpression(self, nd),","class":"lineCov","hits":"1","order":"3253","possible_hits":"1",},
{"lineNum":"  172","line":"            .Block => block.processBlock(self, nd),","class":"lineCov","hits":"1","order":"3390","possible_hits":"1",},
{"lineNum":"  173","line":"            .Decl => declaration.processDecl(self, nd),","class":"lineCov","hits":"1","order":"3220","possible_hits":"1",},
{"lineNum":"  174","line":"            .If => conditional.processConditional(self, nd),","class":"lineCov","hits":"1","order":"3478","possible_hits":"1",},
{"lineNum":"  175","line":"            .Switch => conditional.processSwitch(self, nd),","class":"lineCov","hits":"1","order":"3502","possible_hits":"1",},
{"lineNum":"  176","line":"            .For => loop.processFor(self, nd),","class":"lineCov","hits":"1","order":"3530","possible_hits":"1",},
{"lineNum":"  177","line":"            .While => loop.processWhile(self, nd),","class":"lineCov","hits":"1","order":"3382","possible_hits":"1",},
{"lineNum":"  178","line":"            .Do => loop.processDo(self, nd),","class":"lineCov","hits":"1","order":"3551","possible_hits":"1",},
{"lineNum":"  179","line":"            .Break => loop.processBreak(self, nd),","class":"lineCov","hits":"1","order":"3515","possible_hits":"1",},
{"lineNum":"  180","line":"            .Continue => loop.processContinue(self, nd),","class":"lineCov","hits":"1","order":"3580","possible_hits":"1",},
{"lineNum":"  181","line":"            .Throw => throw.processThrow(self, nd),","class":"lineCov","hits":"1","order":"3602","possible_hits":"1",},
{"lineNum":"  182","line":"            .Try => throw.processTry(self, nd),","class":"lineCov","hits":"1","order":"3609","possible_hits":"1",},
{"lineNum":"  183","line":"            .Function => function.processFunction(self, nd),","class":"lineCov","hits":"1","order":"3633","possible_hits":"1",},
{"lineNum":"  184","line":"            .Return => function.processReturn(self, nd),","class":"lineCov","hits":"1","order":"3522","possible_hits":"1",},
{"lineNum":"  185","line":"            .Alias => types.processAlias(self, nd),","class":"lineCov","hits":"1","order":"3794","possible_hits":"1",},
{"lineNum":"  186","line":"            else => std.debug.panic(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"                \"Unhandled node type in Compiler.processNode: {?}\\n\","},
{"lineNum":"  188","line":"                .{nd.getType()},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"            ),"},
{"lineNum":"  190","line":"        }"},
{"lineNum":"  191","line":"    }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    pub fn compileProgramNode(self: *Compiler, nd: Node) !void {","class":"lineCov","hits":"2","order":"3212","possible_hits":"2",},
{"lineNum":"  194","line":"        std.debug.assert(nd.getType() == .Program);","class":"lineCov","hits":"1","order":"3213","possible_hits":"1",},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        try self.backend.prolog();","class":"lineCov","hits":"1","order":"3214","possible_hits":"1",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        for (nd.data.Program.items) |child| {","class":"lineCov","hits":"3","order":"3216","possible_hits":"3",},
{"lineNum":"  199","line":"            self.processNode(child);","class":"lineCov","hits":"1","order":"3217","possible_hits":"1",},
{"lineNum":"  200","line":"            if (!self.hasErrors())","class":"lineCov","hits":"2","order":"3246","possible_hits":"2",},
{"lineNum":"  201","line":"                try self.backend.processNode(child);","class":"lineCov","hits":"1","order":"3249","possible_hits":"1",},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        try self.backend.epilog();","class":"lineCov","hits":"1","order":"3267","possible_hits":"1",},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    pub fn compile(self: *Compiler, driver: anytype, path: []const u8) !void {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  208","line":"        var arena = Arena.init(self.alloc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"        defer arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        const file = try driver.parseFile(&arena, path);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"        const nd = switch (file.res) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"            .Success => |node| node,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"            .Error => |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"                try self.errors.append(CompileError.parseError(err));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  218","line":"            },"},
{"lineNum":"  219","line":"            .NoMatch => std.debug.panic(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"                \"parseFile should never return NoMatch\","},
{"lineNum":"  221","line":"                .{},"},
{"lineNum":"  222","line":"            ),"},
{"lineNum":"  223","line":"        };"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"        try self.compileProgramNode(nd);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":"};"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"test \"can push and pop compiler scopes\" {","class":"lineCov","hits":"3","order":"142","possible_hits":"3",},
{"lineNum":"  230","line":"    const config = Config{};"},
{"lineNum":"  231","line":"    var backend = NopBackend.new();","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    var compiler = Compiler.new(","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":"  234","line":"        std.testing.allocator,"},
{"lineNum":"  235","line":"        &config,"},
{"lineNum":"  236","line":"        &backend.backend,"},
{"lineNum":"  237","line":"    );"},
{"lineNum":"  238","line":"    defer compiler.deinit();","class":"linePartCov","hits":"1","order":"299","possible_hits":"6",},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    const first = compiler.scope;","class":"lineCov","hits":"1","order":"275","possible_hits":"1",},
{"lineNum":"  241","line":"    try expect(first.parent == null);","class":"linePartCov","hits":"1","order":"276","possible_hits":"2",},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    compiler.pushScope();","class":"lineCov","hits":"1","order":"277","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    const second = compiler.scope;","class":"lineCov","hits":"1","order":"280","possible_hits":"1",},
{"lineNum":"  246","line":"    try expect(first != second);","class":"linePartCov","hits":"1","order":"281","possible_hits":"2",},
{"lineNum":"  247","line":"    try expectEqual(first, second.parent.?);","class":"linePartCov","hits":"1","order":"282","possible_hits":"3",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    compiler.popScope();","class":"lineCov","hits":"1","order":"283","possible_hits":"1",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    const third = compiler.scope;","class":"lineCov","hits":"1","order":"296","possible_hits":"1",},
{"lineNum":"  252","line":"    try expectEqual(first, third);","class":"linePartCov","hits":"1","order":"297","possible_hits":"2",},
{"lineNum":"  253","line":"    try expect(third.parent == null);","class":"linePartCov","hits":"1","order":"298","possible_hits":"2",},
{"lineNum":"  254","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 19:23:58", "instrumented" : 106, "covered" : 91,};
var merged_data = [];
