var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const Arena = std.heap.ArenaAllocator;"},
{"lineNum":"   24","line":"const TsParser = @import(\"ts_parser.zig\").TsParser;"},
{"lineNum":"   25","line":"const Parser = @import(\"../common/parser.zig\").Parser;"},
{"lineNum":"   26","line":"const Cursor = @import(\"../common/cursor.zig\").Cursor;"},
{"lineNum":"   27","line":"const node = @import(\"../common/node.zig\");"},
{"lineNum":"   28","line":"const Node = node.Node;"},
{"lineNum":"   29","line":"const NodeType = node.NodeType;"},
{"lineNum":"   30","line":"const makeNode = node.makeNode;"},
{"lineNum":"   31","line":"const Decl = node.Decl;"},
{"lineNum":"   32","line":"const TokenType = @import(\"../common/token.zig\").Token.Type;"},
{"lineNum":"   33","line":"const parseresult = @import(\"../common/parse_result.zig\");"},
{"lineNum":"   34","line":"const ParseResult = parseresult.ParseResult;"},
{"lineNum":"   35","line":"const ParseError = @import(\"../common/parse_error.zig\").ParseError;"},
{"lineNum":"   36","line":"const allocate = @import(\"../common/allocate.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"const ExprTestCase = struct {"},
{"lineNum":"   39","line":"    expr: []const u8,"},
{"lineNum":"   40","line":"    startingCh: u32 = 0,"},
{"lineNum":"   41","line":"    check: fn (value: Node) anyerror!void,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    pub fn run(comptime self: @This()) !void {","class":"lineCov","hits":"168","order":"1732","possible_hits":"168",},
{"lineNum":"   44","line":"        const code = \"var a = \" ++ self.expr ++ \";\";"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        var arena = Arena.init(std.testing.allocator);","class":"lineCov","hits":"56","order":"1733","possible_hits":"56",},
{"lineNum":"   47","line":"        defer arena.deinit();","class":"linePartCov","hits":"56","order":"1847","possible_hits":"392",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        var tsParser = TsParser.new(&arena, code);","class":"lineCov","hits":"56","order":"1734","possible_hits":"56",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        var parser = tsParser.getParser();","class":"lineCov","hits":"56","order":"1735","possible_hits":"56",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        const res = parser.next();","class":"lineCov","hits":"56","order":"1738","possible_hits":"56",},
{"lineNum":"   54","line":"        try res.reportIfError(std.io.getStdErr().writer());","class":"linePartCov","hits":"56","order":"1831","possible_hits":"112",},
{"lineNum":"   55","line":"        try expect(res.isSuccess());","class":"linePartCov","hits":"56","order":"1834","possible_hits":"112",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        const value = res.Success.data.Decl.value.?;","class":"lineCov","hits":"112","order":"1835","possible_hits":"112",},
{"lineNum":"   58","line":"        try expectEqual(Cursor.new(1, 9 + self.startingCh), value.csr);","class":"linePartCov","hits":"56","order":"1836","possible_hits":"168",},
{"lineNum":"   59","line":"        try self.check(value);","class":"linePartCov","hits":"56","order":"1837","possible_hits":"112",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        const eof = parser.next();","class":"lineCov","hits":"56","order":"1841","possible_hits":"56",},
{"lineNum":"   62","line":"        try expect(eof.isSuccess());","class":"linePartCov","hits":"56","order":"1845","possible_hits":"112",},
{"lineNum":"   63","line":"        try expectEqual(NodeType.EOF, eof.Success.getType());","class":"linePartCov","hits":"112","order":"1846","possible_hits":"168",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"fn parseParenExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1787","possible_hits":"1",},
{"lineNum":"   68","line":"    std.debug.assert(psr.lexer.token.ty == .LParen);","class":"lineCov","hits":"1","order":"1788","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1789","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"1790","possible_hits":"1",},
{"lineNum":"   73","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"1817","possible_hits":"2",},
{"lineNum":"   74","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"1818","possible_hits":"2",},
{"lineNum":"   77","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1819","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    return expr;","class":"lineCov","hits":"1","order":"1820","possible_hits":"1",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"test \"can parse paren primary expression\" {","class":"lineCov","hits":"2","order":"1730","possible_hits":"2",},
{"lineNum":"   85","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"1848","possible_hits":"1",},
{"lineNum":"   86","line":"        .expr = \"(123456)\","},
{"lineNum":"   87","line":"        .startingCh = 1,"},
{"lineNum":"   88","line":"        .check = (struct {"},
{"lineNum":"   89","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"1838","possible_hits":"2",},
{"lineNum":"   90","line":"                try expectEqual(NodeType.Int, value.getType());","class":"lineCov","hits":"1","order":"1839","possible_hits":"1",},
{"lineNum":"   91","line":"                try expectEqualStrings(\"123456\", value.data.Int);","class":"lineCov","hits":"2","order":"1840","possible_hits":"2",},
{"lineNum":"   92","line":"            }"},
{"lineNum":"   93","line":"        }).check,"},
{"lineNum":"   94","line":"    }).run();","class":"lineCov","hits":"1","order":"1731","possible_hits":"1",},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"fn parseArrayLiteral(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1853","possible_hits":"1",},
{"lineNum":"   98","line":"    std.debug.assert(psr.lexer.token.ty == .LBrack);","class":"lineCov","hits":"1","order":"1854","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    const nd = makeNode(","class":"lineCov","hits":"1","order":"1857","possible_hits":"1",},
{"lineNum":"  101","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"1855","possible_hits":"1",},
{"lineNum":"  102","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"1856","possible_hits":"1",},
{"lineNum":"  103","line":"        .Array,"},
{"lineNum":"  104","line":"        node.NodeList{},"},
{"lineNum":"  105","line":"    );"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1858","possible_hits":"1",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    while (psr.lexer.token.ty != .RBrack) {","class":"lineCov","hits":"2","order":"1859","possible_hits":"2",},
{"lineNum":"  110","line":"        const item = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"1860","possible_hits":"1",},
{"lineNum":"  111","line":"        if (!item.isSuccess())","class":"lineCov","hits":"2","order":"1862","possible_hits":"2",},
{"lineNum":"  112","line":"            return item;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        nd.data.Array.append(","class":"linePartCov","hits":"2","order":"1863","possible_hits":"3",},
{"lineNum":"  115","line":"            psr.getAllocator(),","class":"lineCov","hits":"1","order":"1864","possible_hits":"1",},
{"lineNum":"  116","line":"            item.Success,","class":"linePartCov","hits":"2","order":"1865","possible_hits":"3",},
{"lineNum":"  117","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"1866","possible_hits":"2",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"1867","possible_hits":"2",},
{"lineNum":"  120","line":"            break;","class":"lineCov","hits":"1","order":"1872","possible_hits":"1",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1868","possible_hits":"1",},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    if (psr.lexer.token.ty != .RBrack)","class":"lineCov","hits":"2","order":"1873","possible_hits":"2",},
{"lineNum":"  126","line":"        return ParseResult.expected(TokenType.RBrack, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1874","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1875","possible_hits":"1",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"test \"can parse array literal primary expression\" {","class":"lineCov","hits":"2","order":"1849","possible_hits":"2",},
{"lineNum":"  134","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"1885","possible_hits":"1",},
{"lineNum":"  135","line":"        .expr = \"[ 123, \'abc\', true ]\","},
{"lineNum":"  136","line":"        .check = (struct {"},
{"lineNum":"  137","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"1876","possible_hits":"2",},
{"lineNum":"  138","line":"                try expectEqual(NodeType.Array, value.getType());","class":"lineCov","hits":"1","order":"1877","possible_hits":"1",},
{"lineNum":"  139","line":"                const items = value.data.Array.items;","class":"linePartCov","hits":"2","order":"1878","possible_hits":"3",},
{"lineNum":"  140","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"1879","possible_hits":"2",},
{"lineNum":"  141","line":"                try expectEqual(NodeType.Int, items[0].getType());","class":"linePartCov","hits":"1","order":"1880","possible_hits":"2",},
{"lineNum":"  142","line":"                try expectEqualStrings(\"123\", items[0].data.Int);","class":"linePartCov","hits":"1","order":"1881","possible_hits":"2",},
{"lineNum":"  143","line":"                try expectEqual(NodeType.String, items[1].getType());","class":"linePartCov","hits":"1","order":"1882","possible_hits":"2",},
{"lineNum":"  144","line":"                try expectEqualStrings(\"\'abc\'\", items[1].data.String);","class":"linePartCov","hits":"1","order":"1883","possible_hits":"2",},
{"lineNum":"  145","line":"                try expectEqual(NodeType.True, items[2].getType());","class":"linePartCov","hits":"1","order":"1884","possible_hits":"2",},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":"        }).check,"},
{"lineNum":"  148","line":"    }).run();","class":"lineCov","hits":"1","order":"1850","possible_hits":"1",},
{"lineNum":"  149","line":"}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"fn parsePropertyKey(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1897","possible_hits":"1",},
{"lineNum":"  152","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"1898","possible_hits":"1",},
{"lineNum":"  153","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"1899","possible_hits":"1",},
{"lineNum":"  154","line":"    const data = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"1900","possible_hits":"1",},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    const nd = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"3","order":"1901","possible_hits":"3",},
{"lineNum":"  157","line":"        .Ident => makeNode(alloc, csr, .Ident, data),","class":"lineCov","hits":"1","order":"1902","possible_hits":"1",},
{"lineNum":"  158","line":"        .String => makeNode(alloc, csr, .String, data),","class":"lineCov","hits":"1","order":"1921","possible_hits":"1",},
{"lineNum":"  159","line":"        .Int => makeNode(alloc, csr, .Int, data),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"        else => return ParseResult.expected(\"property key\", psr.lexer.token),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"    };"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1903","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1905","possible_hits":"1",},
{"lineNum":"  166","line":"}"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"fn parseObjectLiteral(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1889","possible_hits":"1",},
{"lineNum":"  169","line":"    std.debug.assert(psr.lexer.token.ty == .LBrace);","class":"lineCov","hits":"1","order":"1890","possible_hits":"1",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    const nd = makeNode(","class":"lineCov","hits":"1","order":"1893","possible_hits":"1",},
{"lineNum":"  172","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"1891","possible_hits":"1",},
{"lineNum":"  173","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"1892","possible_hits":"1",},
{"lineNum":"  174","line":"        .Object,"},
{"lineNum":"  175","line":"        node.Object{},"},
{"lineNum":"  176","line":"    );"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1894","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    while (psr.lexer.token.ty != .RBrace) {","class":"lineCov","hits":"2","order":"1895","possible_hits":"2",},
{"lineNum":"  181","line":"        const key = parsePropertyKey(psr);","class":"lineCov","hits":"1","order":"1896","possible_hits":"1",},
{"lineNum":"  182","line":"        if (!key.isSuccess())","class":"lineCov","hits":"2","order":"1906","possible_hits":"2",},
{"lineNum":"  183","line":"            return key;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"3","order":"1907","possible_hits":"3",},
{"lineNum":"  186","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1908","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            const value = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"1909","possible_hits":"1",},
{"lineNum":"  189","line":"            if (!value.isSuccess())","class":"lineCov","hits":"2","order":"1910","possible_hits":"2",},
{"lineNum":"  190","line":"                return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"            nd.data.Object.append(","class":"linePartCov","hits":"2","order":"1911","possible_hits":"3",},
{"lineNum":"  193","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"1912","possible_hits":"1",},
{"lineNum":"  194","line":"                node.ObjectProperty.new(key.Success, value.Success),","class":"linePartCov","hits":"2","order":"1913","possible_hits":"3",},
{"lineNum":"  195","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"1918","possible_hits":"2",},
{"lineNum":"  196","line":"        } else if (key.Success.getType() == .Ident) {","class":"lineCov","hits":"3","order":"1923","possible_hits":"3",},
{"lineNum":"  197","line":"            nd.data.Object.append(","class":"linePartCov","hits":"2","order":"1924","possible_hits":"3",},
{"lineNum":"  198","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"1925","possible_hits":"1",},
{"lineNum":"  199","line":"                node.ObjectProperty.new(key.Success, key.Success),","class":"linePartCov","hits":"2","order":"1926","possible_hits":"3",},
{"lineNum":"  200","line":"            ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"1927","possible_hits":"2",},
{"lineNum":"  201","line":"        } else {"},
{"lineNum":"  202","line":"            return ParseResult.expected(\"property value\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"1919","possible_hits":"2",},
{"lineNum":"  206","line":"            break;","class":"lineCov","hits":"1","order":"1928","possible_hits":"1",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1920","possible_hits":"1",},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    if (psr.lexer.token.ty != .RBrace)","class":"lineCov","hits":"2","order":"1929","possible_hits":"2",},
{"lineNum":"  212","line":"        return ParseResult.expected(TokenType.RBrace, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1930","possible_hits":"1",},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1931","possible_hits":"1",},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"test \"can parse object literal primary expression\" {","class":"lineCov","hits":"2","order":"1886","possible_hits":"2",},
{"lineNum":"  220","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"1947","possible_hits":"1",},
{"lineNum":"  221","line":"        .expr = \"{ a: \'hello\', \'b\': true, c }\","},
{"lineNum":"  222","line":"        .check = (struct {"},
{"lineNum":"  223","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"1932","possible_hits":"2",},
{"lineNum":"  224","line":"                try expectEqual(NodeType.Object, value.getType());","class":"lineCov","hits":"1","order":"1933","possible_hits":"1",},
{"lineNum":"  225","line":"                const items = value.data.Object.items;","class":"linePartCov","hits":"2","order":"1934","possible_hits":"3",},
{"lineNum":"  226","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"1935","possible_hits":"2",},
{"lineNum":"  227","line":"                try expectEqual(NodeType.Ident, items[0].key.getType());","class":"linePartCov","hits":"1","order":"1936","possible_hits":"2",},
{"lineNum":"  228","line":"                try expectEqualStrings(\"a\", items[0].key.data.Ident);","class":"linePartCov","hits":"1","order":"1937","possible_hits":"2",},
{"lineNum":"  229","line":"                try expectEqual(NodeType.String, items[0].value.getType());","class":"linePartCov","hits":"1","order":"1938","possible_hits":"2",},
{"lineNum":"  230","line":"                try expectEqualStrings(\"\'hello\'\", items[0].value.data.String);","class":"linePartCov","hits":"1","order":"1939","possible_hits":"2",},
{"lineNum":"  231","line":"                try expectEqual(NodeType.String, items[1].key.getType());","class":"linePartCov","hits":"1","order":"1940","possible_hits":"2",},
{"lineNum":"  232","line":"                try expectEqualStrings(\"\'b\'\", items[1].key.data.String);","class":"linePartCov","hits":"1","order":"1941","possible_hits":"2",},
{"lineNum":"  233","line":"                try expectEqual(NodeType.True, items[1].value.getType());","class":"linePartCov","hits":"1","order":"1942","possible_hits":"2",},
{"lineNum":"  234","line":"                try expectEqual(NodeType.Ident, items[2].key.getType());","class":"linePartCov","hits":"1","order":"1943","possible_hits":"2",},
{"lineNum":"  235","line":"                try expectEqualStrings(\"c\", items[2].key.data.Ident);","class":"linePartCov","hits":"1","order":"1944","possible_hits":"2",},
{"lineNum":"  236","line":"                try expectEqual(NodeType.Ident, items[2].value.getType());","class":"linePartCov","hits":"1","order":"1945","possible_hits":"2",},
{"lineNum":"  237","line":"                try expectEqualStrings(\"c\", items[2].value.data.Ident);","class":"linePartCov","hits":"1","order":"1946","possible_hits":"2",},
{"lineNum":"  238","line":"            }"},
{"lineNum":"  239","line":"        }).check,"},
{"lineNum":"  240","line":"    }).run();","class":"lineCov","hits":"1","order":"1887","possible_hits":"1",},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"fn parseFunctionExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1951","possible_hits":"1",},
{"lineNum":"  244","line":"    std.debug.assert(psr.lexer.token.ty == .Function);","class":"lineCov","hits":"1","order":"1952","possible_hits":"1",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1954","possible_hits":"1",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    var func: node.Function = undefined;","class":"lineCov","hits":"1","order":"1955","possible_hits":"1",},
{"lineNum":"  251","line":"    func.isArrow = false;","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    if (psr.lexer.token.ty == .Ident) {","class":"lineCov","hits":"2","order":"1957","possible_hits":"2",},
{"lineNum":"  254","line":"        func.name = psr.lexer.token.data;","class":"lineCov","hits":"1","order":"1958","possible_hits":"1",},
{"lineNum":"  255","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1959","possible_hits":"1",},
{"lineNum":"  256","line":"    } else {"},
{"lineNum":"  257","line":"        func.name = null;","class":"lineCov","hits":"1","order":"3609","possible_hits":"1",},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    if (psr.lexer.token.ty != .LParen)","class":"lineCov","hits":"2","order":"1960","possible_hits":"2",},
{"lineNum":"  261","line":"        return ParseResult.expected(\"function argument list\", psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1961","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    func.args = node.Function.ArgList{};","class":"lineCov","hits":"1","order":"1962","possible_hits":"1",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    while (psr.lexer.token.ty != .RParen) {","class":"lineCov","hits":"2","order":"1963","possible_hits":"2",},
{"lineNum":"  268","line":"        const arg = psr.lexer.token;","class":"lineCov","hits":"1","order":"1964","possible_hits":"1",},
{"lineNum":"  269","line":"        if (arg.ty != .Ident)","class":"lineCov","hits":"2","order":"1965","possible_hits":"2",},
{"lineNum":"  270","line":"            return ParseResult.expected(\"a function argument\", arg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1966","possible_hits":"1",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        var ty: ?Node = null;","class":"lineCov","hits":"1","order":"1967","possible_hits":"1",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"3","order":"1968","possible_hits":"3",},
{"lineNum":"  277","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1969","possible_hits":"1",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"            const tyRes = psr.parseType();","class":"lineCov","hits":"1","order":"1970","possible_hits":"1",},
{"lineNum":"  280","line":"            if (!tyRes.isSuccess())","class":"lineCov","hits":"2","order":"1994","possible_hits":"2",},
{"lineNum":"  281","line":"                return tyRes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"            ty = tyRes.Success;","class":"linePartCov","hits":"2","order":"1995","possible_hits":"3",},
{"lineNum":"  284","line":"        }"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"        func.args.append(psr.getAllocator(), node.Function.Arg{","class":"lineCov","hits":"2","order":"1996","possible_hits":"2",},
{"lineNum":"  287","line":"            .csr = arg.csr,","class":"lineCov","hits":"1","order":"1997","possible_hits":"1",},
{"lineNum":"  288","line":"            .name = arg.data,","class":"lineCov","hits":"1","order":"1998","possible_hits":"1",},
{"lineNum":"  289","line":"            .ty = ty,","class":"lineCov","hits":"1","order":"1999","possible_hits":"1",},
{"lineNum":"  290","line":"        }) catch allocate.reportAndExit();","class":"lineCov","hits":"1","order":"2000","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        if (psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"2001","possible_hits":"2",},
{"lineNum":"  293","line":"            break;","class":"lineCov","hits":"1","order":"2003","possible_hits":"1",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2002","possible_hits":"1",},
{"lineNum":"  296","line":"    }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2004","possible_hits":"2",},
{"lineNum":"  299","line":"        return ParseResult.expected(TokenType.RParen, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2005","possible_hits":"1",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    if (psr.lexer.token.ty == .Colon) {","class":"lineCov","hits":"2","order":"2006","possible_hits":"2",},
{"lineNum":"  304","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2007","possible_hits":"1",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        const retTy = psr.parseType();","class":"lineCov","hits":"1","order":"2008","possible_hits":"1",},
{"lineNum":"  307","line":"        if (!retTy.isSuccess())","class":"lineCov","hits":"2","order":"2009","possible_hits":"2",},
{"lineNum":"  308","line":"            return retTy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"        func.retTy = retTy.Success;","class":"linePartCov","hits":"2","order":"2010","possible_hits":"3",},
{"lineNum":"  311","line":"    } else {"},
{"lineNum":"  312","line":"        func.retTy = null;","class":"lineCov","hits":"1","order":"3565","possible_hits":"1",},
{"lineNum":"  313","line":"    }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    switch (psr.parseBlock()) {","class":"linePartCov","hits":"1","order":"2011","possible_hits":"2",},
{"lineNum":"  316","line":"        .Success => |body| func.body = body,","class":"lineCov","hits":"1","order":"2026","possible_hits":"1",},
{"lineNum":"  317","line":"        .Error => |err| return ParseResult.err(err),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"            \"function body or return type\","},
{"lineNum":"  320","line":"            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"        ),"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2029","possible_hits":"1",},
{"lineNum":"  325","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2027","possible_hits":"1",},
{"lineNum":"  326","line":"        csr,"},
{"lineNum":"  327","line":"        .Function,"},
{"lineNum":"  328","line":"        func,","class":"lineCov","hits":"1","order":"2028","possible_hits":"1",},
{"lineNum":"  329","line":"    ));"},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"test \"can parse function definition\" {","class":"lineCov","hits":"2","order":"1948","possible_hits":"2",},
{"lineNum":"  333","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2051","possible_hits":"1",},
{"lineNum":"  334","line":"        .expr = \"function hello(world: number, foo: string, bar) : bool {}\","},
{"lineNum":"  335","line":"        .check = (struct {"},
{"lineNum":"  336","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2030","possible_hits":"2",},
{"lineNum":"  337","line":"                try expectEqual(NodeType.Function, value.getType());","class":"lineCov","hits":"1","order":"2031","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"                const func = value.data.Function;","class":"linePartCov","hits":"2","order":"2032","possible_hits":"3",},
{"lineNum":"  340","line":"                try expectEqual(false, func.isArrow);","class":"linePartCov","hits":"1","order":"2033","possible_hits":"2",},
{"lineNum":"  341","line":"                try expectEqualStrings(\"hello\", func.name.?);","class":"linePartCov","hits":"1","order":"2034","possible_hits":"2",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"                const retTy = func.retTy.?;","class":"linePartCov","hits":"1","order":"2035","possible_hits":"2",},
{"lineNum":"  344","line":"                try expectEqual(NodeType.TypeName, retTy.getType());","class":"linePartCov","hits":"1","order":"2036","possible_hits":"2",},
{"lineNum":"  345","line":"                try expectEqualStrings(\"bool\", retTy.data.TypeName);","class":"lineCov","hits":"2","order":"2037","possible_hits":"2",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"                const args = func.args.items;","class":"lineCov","hits":"1","order":"2038","possible_hits":"1",},
{"lineNum":"  348","line":"                try expectEqual(@intCast(usize, 3), args.len);","class":"lineCov","hits":"1","order":"2039","possible_hits":"1",},
{"lineNum":"  349","line":"                try expectEqualStrings(\"world\", args[0].name);","class":"linePartCov","hits":"1","order":"2040","possible_hits":"2",},
{"lineNum":"  350","line":"                try expectEqual(NodeType.TypeName, args[0].ty.?.getType());","class":"linePartCov","hits":"1","order":"2041","possible_hits":"2",},
{"lineNum":"  351","line":"                try expectEqualStrings(\"number\", args[0].ty.?.data.TypeName);","class":"linePartCov","hits":"1","order":"2042","possible_hits":"2",},
{"lineNum":"  352","line":"                try expectEqualStrings(\"foo\", args[1].name);","class":"linePartCov","hits":"1","order":"2043","possible_hits":"2",},
{"lineNum":"  353","line":"                try expectEqual(NodeType.TypeName, args[1].ty.?.getType());","class":"linePartCov","hits":"1","order":"2044","possible_hits":"2",},
{"lineNum":"  354","line":"                try expectEqualStrings(\"string\", args[1].ty.?.data.TypeName);","class":"linePartCov","hits":"1","order":"2045","possible_hits":"2",},
{"lineNum":"  355","line":"                try expectEqualStrings(\"bar\", args[2].name);","class":"linePartCov","hits":"1","order":"2046","possible_hits":"2",},
{"lineNum":"  356","line":"                try expect(args[2].ty == null);","class":"linePartCov","hits":"1","order":"2047","possible_hits":"2",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                const body = func.body;","class":"lineCov","hits":"1","order":"2048","possible_hits":"1",},
{"lineNum":"  359","line":"                try expectEqual(NodeType.Block, body.getType());","class":"lineCov","hits":"1","order":"2049","possible_hits":"1",},
{"lineNum":"  360","line":"                try expectEqual(@intCast(usize, 0), body.data.Block.items.len);","class":"lineCov","hits":"2","order":"2050","possible_hits":"2",},
{"lineNum":"  361","line":"            }"},
{"lineNum":"  362","line":"        }).check,"},
{"lineNum":"  363","line":"    }).run();","class":"lineCov","hits":"1","order":"1949","possible_hits":"1",},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"fn parsePrimaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1780","possible_hits":"1",},
{"lineNum":"  367","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"1781","possible_hits":"1",},
{"lineNum":"  368","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"1784","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    const nd = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"9","order":"1785","possible_hits":"9",},
{"lineNum":"  371","line":"        .Ident => makeNode(alloc, csr, .Ident, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"2054","possible_hits":"1",},
{"lineNum":"  372","line":"        .Int => makeNode(alloc, csr, .Int, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"1791","possible_hits":"1",},
{"lineNum":"  373","line":"        .String => makeNode(alloc, csr, .String, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"1869","possible_hits":"1",},
{"lineNum":"  374","line":"        .Template => makeNode(alloc, csr, .Template, psr.lexer.token.data),","class":"lineCov","hits":"1","order":"2073","possible_hits":"1",},
{"lineNum":"  375","line":"        .True => makeNode(alloc, csr, .True, {}),","class":"lineCov","hits":"1","order":"1870","possible_hits":"1",},
{"lineNum":"  376","line":"        .False => makeNode(alloc, csr, .False, {}),","class":"lineCov","hits":"1","order":"2085","possible_hits":"1",},
{"lineNum":"  377","line":"        .Null => makeNode(alloc, csr, .Null, {}),","class":"lineCov","hits":"1","order":"2091","possible_hits":"1",},
{"lineNum":"  378","line":"        .Undefined => makeNode(alloc, csr, .Undefined, {}),","class":"lineCov","hits":"1","order":"2097","possible_hits":"1",},
{"lineNum":"  379","line":"        .This => makeNode(alloc, csr, .This, {}),","class":"lineCov","hits":"1","order":"2103","possible_hits":"1",},
{"lineNum":"  380","line":"        .LParen => return parseParenExpr(psr),","class":"lineCov","hits":"1","order":"1786","possible_hits":"1",},
{"lineNum":"  381","line":"        .LBrack => return parseArrayLiteral(psr),","class":"lineCov","hits":"1","order":"1852","possible_hits":"1",},
{"lineNum":"  382","line":"        .LBrace => return parseObjectLiteral(psr),","class":"lineCov","hits":"1","order":"1888","possible_hits":"1",},
{"lineNum":"  383","line":"        .Function => return parseFunctionExpr(psr),","class":"lineCov","hits":"1","order":"1950","possible_hits":"1",},
{"lineNum":"  384","line":"        else => return ParseResult.noMatchExpected(","class":"lineCov","hits":"1","order":"2690","possible_hits":"1",},
{"lineNum":"  385","line":"            \"a primary expression\","},
{"lineNum":"  386","line":"            psr.lexer.token,","class":"lineCov","hits":"1","order":"2689","possible_hits":"1",},
{"lineNum":"  387","line":"        ),"},
{"lineNum":"  388","line":"    };"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"1792","possible_hits":"1",},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1794","possible_hits":"1",},
{"lineNum":"  393","line":"}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"test \"can parse variable name primary expression\" {","class":"lineCov","hits":"2","order":"2052","possible_hits":"2",},
{"lineNum":"  396","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2058","possible_hits":"1",},
{"lineNum":"  397","line":"        .expr = \"aVariableName\","},
{"lineNum":"  398","line":"        .check = (struct {"},
{"lineNum":"  399","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2055","possible_hits":"2",},
{"lineNum":"  400","line":"                try expectEqual(NodeType.Ident, value.getType());","class":"lineCov","hits":"1","order":"2056","possible_hits":"1",},
{"lineNum":"  401","line":"                try expectEqualStrings(\"aVariableName\", value.data.Ident);","class":"lineCov","hits":"2","order":"2057","possible_hits":"2",},
{"lineNum":"  402","line":"            }"},
{"lineNum":"  403","line":"        }).check,"},
{"lineNum":"  404","line":"    }).run();","class":"lineCov","hits":"1","order":"2053","possible_hits":"1",},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"test \"can parse int primary expression\" {","class":"lineCov","hits":"2","order":"2059","possible_hits":"2",},
{"lineNum":"  408","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2064","possible_hits":"1",},
{"lineNum":"  409","line":"        .expr = \"123456\","},
{"lineNum":"  410","line":"        .check = (struct {"},
{"lineNum":"  411","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2061","possible_hits":"2",},
{"lineNum":"  412","line":"                try expectEqual(NodeType.Int, value.getType());","class":"lineCov","hits":"1","order":"2062","possible_hits":"1",},
{"lineNum":"  413","line":"                try expectEqualStrings(\"123456\", value.data.Int);","class":"lineCov","hits":"2","order":"2063","possible_hits":"2",},
{"lineNum":"  414","line":"            }"},
{"lineNum":"  415","line":"        }).check,"},
{"lineNum":"  416","line":"    }).run();","class":"lineCov","hits":"1","order":"2060","possible_hits":"1",},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"test \"can parse string primary expression\" {","class":"lineCov","hits":"2","order":"2065","possible_hits":"2",},
{"lineNum":"  420","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2070","possible_hits":"1",},
{"lineNum":"  421","line":"        .expr = \"\'a test string\'\","},
{"lineNum":"  422","line":"        .check = (struct {"},
{"lineNum":"  423","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2067","possible_hits":"2",},
{"lineNum":"  424","line":"                try expectEqual(NodeType.String, value.getType());","class":"lineCov","hits":"1","order":"2068","possible_hits":"1",},
{"lineNum":"  425","line":"                try expectEqualStrings(\"\'a test string\'\", value.data.String);","class":"lineCov","hits":"2","order":"2069","possible_hits":"2",},
{"lineNum":"  426","line":"            }"},
{"lineNum":"  427","line":"        }).check,"},
{"lineNum":"  428","line":"    }).run();","class":"lineCov","hits":"1","order":"2066","possible_hits":"1",},
{"lineNum":"  429","line":"}"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"test \"can parse template primary expression\" {","class":"lineCov","hits":"2","order":"2071","possible_hits":"2",},
{"lineNum":"  432","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2077","possible_hits":"1",},
{"lineNum":"  433","line":"        .expr = \"`a test template`\","},
{"lineNum":"  434","line":"        .check = (struct {"},
{"lineNum":"  435","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2074","possible_hits":"2",},
{"lineNum":"  436","line":"                try expectEqual(NodeType.Template, value.getType());","class":"lineCov","hits":"1","order":"2075","possible_hits":"1",},
{"lineNum":"  437","line":"                try expectEqualStrings(\"`a test template`\", value.data.Template);","class":"lineCov","hits":"2","order":"2076","possible_hits":"2",},
{"lineNum":"  438","line":"            }"},
{"lineNum":"  439","line":"        }).check,"},
{"lineNum":"  440","line":"    }).run();","class":"lineCov","hits":"1","order":"2072","possible_hits":"1",},
{"lineNum":"  441","line":"}"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"test \"can parse \'true\' primary expression\" {","class":"lineCov","hits":"2","order":"2078","possible_hits":"2",},
{"lineNum":"  444","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2082","possible_hits":"1",},
{"lineNum":"  445","line":"        .expr = \"true\","},
{"lineNum":"  446","line":"        .check = (struct {"},
{"lineNum":"  447","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2080","possible_hits":"2",},
{"lineNum":"  448","line":"                try expectEqual(NodeType.True, value.getType());","class":"lineCov","hits":"1","order":"2081","possible_hits":"1",},
{"lineNum":"  449","line":"            }"},
{"lineNum":"  450","line":"        }).check,"},
{"lineNum":"  451","line":"    }).run();","class":"lineCov","hits":"1","order":"2079","possible_hits":"1",},
{"lineNum":"  452","line":"}"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"test \"can parse \'false\' primary expression\" {","class":"lineCov","hits":"2","order":"2083","possible_hits":"2",},
{"lineNum":"  455","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2088","possible_hits":"1",},
{"lineNum":"  456","line":"        .expr = \"false\","},
{"lineNum":"  457","line":"        .check = (struct {"},
{"lineNum":"  458","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2086","possible_hits":"2",},
{"lineNum":"  459","line":"                try expectEqual(NodeType.False, value.getType());","class":"lineCov","hits":"1","order":"2087","possible_hits":"1",},
{"lineNum":"  460","line":"            }"},
{"lineNum":"  461","line":"        }).check,"},
{"lineNum":"  462","line":"    }).run();","class":"lineCov","hits":"1","order":"2084","possible_hits":"1",},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"test \"can parse \'null\' primary expression\" {","class":"lineCov","hits":"2","order":"2089","possible_hits":"2",},
{"lineNum":"  466","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2094","possible_hits":"1",},
{"lineNum":"  467","line":"        .expr = \"null\","},
{"lineNum":"  468","line":"        .check = (struct {"},
{"lineNum":"  469","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2092","possible_hits":"2",},
{"lineNum":"  470","line":"                try expectEqual(NodeType.Null, value.getType());","class":"lineCov","hits":"1","order":"2093","possible_hits":"1",},
{"lineNum":"  471","line":"            }"},
{"lineNum":"  472","line":"        }).check,"},
{"lineNum":"  473","line":"    }).run();","class":"lineCov","hits":"1","order":"2090","possible_hits":"1",},
{"lineNum":"  474","line":"}"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"test \"can parse \'undefined\' primary expression\" {","class":"lineCov","hits":"2","order":"2095","possible_hits":"2",},
{"lineNum":"  477","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2100","possible_hits":"1",},
{"lineNum":"  478","line":"        .expr = \"undefined\","},
{"lineNum":"  479","line":"        .check = (struct {"},
{"lineNum":"  480","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2098","possible_hits":"2",},
{"lineNum":"  481","line":"                try expectEqual(NodeType.Undefined, value.getType());","class":"lineCov","hits":"1","order":"2099","possible_hits":"1",},
{"lineNum":"  482","line":"            }"},
{"lineNum":"  483","line":"        }).check,"},
{"lineNum":"  484","line":"    }).run();","class":"lineCov","hits":"1","order":"2096","possible_hits":"1",},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"test \"can parse \'this\' primary expression\" {","class":"lineCov","hits":"2","order":"2101","possible_hits":"2",},
{"lineNum":"  488","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2106","possible_hits":"1",},
{"lineNum":"  489","line":"        .expr = \"this\","},
{"lineNum":"  490","line":"        .check = (struct {"},
{"lineNum":"  491","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2104","possible_hits":"2",},
{"lineNum":"  492","line":"                try expectEqual(NodeType.This, value.getType());","class":"lineCov","hits":"1","order":"2105","possible_hits":"1",},
{"lineNum":"  493","line":"            }"},
{"lineNum":"  494","line":"        }).check,"},
{"lineNum":"  495","line":"    }).run();","class":"lineCov","hits":"1","order":"2102","possible_hits":"1",},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"fn parseMemberExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1778","possible_hits":"1",},
{"lineNum":"  499","line":"    const left = parsePrimaryExpr(psr);","class":"lineCov","hits":"1","order":"1779","possible_hits":"1",},
{"lineNum":"  500","line":"    if (!left.isSuccess())","class":"lineCov","hits":"2","order":"1795","possible_hits":"2",},
{"lineNum":"  501","line":"        return left;","class":"lineCov","hits":"1","order":"2695","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    var nd = left.Success;","class":"linePartCov","hits":"2","order":"1796","possible_hits":"3",},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    while (true) {","class":"lineCov","hits":"3","order":"1797","possible_hits":"3",},
{"lineNum":"  506","line":"        switch (psr.lexer.token.ty) {","class":"lineCov","hits":"3","order":"1798","possible_hits":"3",},
{"lineNum":"  507","line":"            .Dot => {"},
{"lineNum":"  508","line":"                const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2109","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"                const ident = psr.lexer.next();","class":"lineCov","hits":"1","order":"2110","possible_hits":"1",},
{"lineNum":"  511","line":"                if (ident.ty != .Ident)","class":"lineCov","hits":"2","order":"2111","possible_hits":"2",},
{"lineNum":"  512","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"                        \"identifier after \'.\'\","},
{"lineNum":"  514","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"                    );"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2112","possible_hits":"1",},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"2116","possible_hits":"1",},
{"lineNum":"  520","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"2113","possible_hits":"1",},
{"lineNum":"  521","line":"                    csr,"},
{"lineNum":"  522","line":"                    .Dot,"},
{"lineNum":"  523","line":"                    node.Dot{"},
{"lineNum":"  524","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"2114","possible_hits":"1",},
{"lineNum":"  525","line":"                        .ident = ident.data,","class":"lineCov","hits":"1","order":"2115","possible_hits":"1",},
{"lineNum":"  526","line":"                    },"},
{"lineNum":"  527","line":"                );"},
{"lineNum":"  528","line":"            },"},
{"lineNum":"  529","line":"            .LBrack => {"},
{"lineNum":"  530","line":"                const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2129","possible_hits":"1",},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2130","possible_hits":"1",},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"                const expr = psr.parseExpr();","class":"lineCov","hits":"1","order":"2131","possible_hits":"1",},
{"lineNum":"  535","line":"                if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"2132","possible_hits":"2",},
{"lineNum":"  536","line":"                    return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"                if (psr.lexer.token.ty != .RBrack)","class":"lineCov","hits":"2","order":"2133","possible_hits":"2",},
{"lineNum":"  539","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"                        \"\']\' after array access\","},
{"lineNum":"  541","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"                    );"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2134","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"2138","possible_hits":"1",},
{"lineNum":"  547","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"2135","possible_hits":"1",},
{"lineNum":"  548","line":"                    csr,"},
{"lineNum":"  549","line":"                    .ArrayAccess,"},
{"lineNum":"  550","line":"                    node.ArrayAccess{"},
{"lineNum":"  551","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"2136","possible_hits":"1",},
{"lineNum":"  552","line":"                        .index = expr.Success,","class":"linePartCov","hits":"2","order":"2137","possible_hits":"3",},
{"lineNum":"  553","line":"                    },"},
{"lineNum":"  554","line":"                );"},
{"lineNum":"  555","line":"            },"},
{"lineNum":"  556","line":"            .LParen => {"},
{"lineNum":"  557","line":"                nd = makeNode(","class":"lineCov","hits":"1","order":"2157","possible_hits":"1",},
{"lineNum":"  558","line":"                    psr.getAllocator(),","class":"lineCov","hits":"1","order":"2153","possible_hits":"1",},
{"lineNum":"  559","line":"                    psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2154","possible_hits":"1",},
{"lineNum":"  560","line":"                    .Call,"},
{"lineNum":"  561","line":"                    node.Call{"},
{"lineNum":"  562","line":"                        .expr = nd,","class":"lineCov","hits":"1","order":"2155","possible_hits":"1",},
{"lineNum":"  563","line":"                        .args = node.NodeList{},","class":"lineCov","hits":"1","order":"2156","possible_hits":"1",},
{"lineNum":"  564","line":"                    },"},
{"lineNum":"  565","line":"                );"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2158","possible_hits":"1",},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"                while (psr.lexer.token.ty != .RParen) {","class":"lineCov","hits":"2","order":"2159","possible_hits":"2",},
{"lineNum":"  570","line":"                    const expr = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"2171","possible_hits":"1",},
{"lineNum":"  571","line":"                    switch (expr) {","class":"linePartCov","hits":"2","order":"2172","possible_hits":"3",},
{"lineNum":"  572","line":"                        .Success => |arg| nd.data.Call.args.append(","class":"linePartCov","hits":"3","order":"2173","possible_hits":"4",},
{"lineNum":"  573","line":"                            psr.getAllocator(),","class":"lineCov","hits":"1","order":"2174","possible_hits":"1",},
{"lineNum":"  574","line":"                            arg,","class":"lineCov","hits":"1","order":"2175","possible_hits":"1",},
{"lineNum":"  575","line":"                        ) catch allocate.reportAndExit(),","class":"linePartCov","hits":"2","order":"2176","possible_hits":"3",},
{"lineNum":"  576","line":"                        .Error => return expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"                        .NoMatch => return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"                            \"an expression for function call\","},
{"lineNum":"  579","line":"                            psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"                        ),"},
{"lineNum":"  581","line":"                    }"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"                    if (psr.lexer.token.ty == .Comma) {","class":"lineCov","hits":"1","order":"2177","possible_hits":"1",},
{"lineNum":"  584","line":"                        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2178","possible_hits":"1",},
{"lineNum":"  585","line":"                    } else {"},
{"lineNum":"  586","line":"                        break;","class":"lineCov","hits":"1","order":"2179","possible_hits":"1",},
{"lineNum":"  587","line":"                    }"},
{"lineNum":"  588","line":"                }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"                if (psr.lexer.token.ty != .RParen)","class":"lineCov","hits":"2","order":"2160","possible_hits":"2",},
{"lineNum":"  591","line":"                    return ParseResult.expected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"                        \"\')\' after function call arguments\","},
{"lineNum":"  593","line":"                        psr.lexer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"                    );"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"                _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2161","possible_hits":"1",},
{"lineNum":"  597","line":"            },"},
{"lineNum":"  598","line":"            else => break,","class":"lineCov","hits":"1","order":"1799","possible_hits":"1",},
{"lineNum":"  599","line":"        }"},
{"lineNum":"  600","line":"    }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    return ParseResult.success(nd);","class":"lineCov","hits":"1","order":"1800","possible_hits":"1",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"test \"can parse dot expression\" {","class":"lineCov","hits":"2","order":"2107","possible_hits":"2",},
{"lineNum":"  606","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2126","possible_hits":"1",},
{"lineNum":"  607","line":"        .expr = \"a.b.c\","},
{"lineNum":"  608","line":"        .startingCh = 3,"},
{"lineNum":"  609","line":"        .check = (struct {"},
{"lineNum":"  610","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2117","possible_hits":"2",},
{"lineNum":"  611","line":"                try expectEqual(NodeType.Dot, value.getType());","class":"lineCov","hits":"1","order":"2118","possible_hits":"1",},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"                const second = value.data.Dot;","class":"linePartCov","hits":"2","order":"2119","possible_hits":"3",},
{"lineNum":"  614","line":"                try expectEqualStrings(\"c\", second.ident);","class":"linePartCov","hits":"1","order":"2120","possible_hits":"2",},
{"lineNum":"  615","line":"                try expectEqual(NodeType.Dot, second.expr.getType());","class":"lineCov","hits":"1","order":"2121","possible_hits":"1",},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"                const first = second.expr.data.Dot;","class":"linePartCov","hits":"2","order":"2122","possible_hits":"3",},
{"lineNum":"  618","line":"                try expectEqualStrings(\"b\", first.ident);","class":"linePartCov","hits":"1","order":"2123","possible_hits":"2",},
{"lineNum":"  619","line":"                try expectEqual(NodeType.Ident, first.expr.getType());","class":"lineCov","hits":"1","order":"2124","possible_hits":"1",},
{"lineNum":"  620","line":"                try expectEqualStrings(\"a\", first.expr.data.Ident);","class":"lineCov","hits":"2","order":"2125","possible_hits":"2",},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":"        }).check,"},
{"lineNum":"  623","line":"    }).run();","class":"lineCov","hits":"1","order":"2108","possible_hits":"1",},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"can parse array access expression\" {","class":"lineCov","hits":"2","order":"2127","possible_hits":"2",},
{"lineNum":"  627","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2150","possible_hits":"1",},
{"lineNum":"  628","line":"        .expr = \"a[b][c]\","},
{"lineNum":"  629","line":"        .startingCh = 4,"},
{"lineNum":"  630","line":"        .check = (struct {"},
{"lineNum":"  631","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2139","possible_hits":"2",},
{"lineNum":"  632","line":"                try expectEqual(NodeType.ArrayAccess, value.getType());","class":"lineCov","hits":"1","order":"2140","possible_hits":"1",},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"                const second = value.data.ArrayAccess;","class":"linePartCov","hits":"2","order":"2141","possible_hits":"3",},
{"lineNum":"  635","line":"                try expectEqual(NodeType.Ident, second.index.getType());","class":"linePartCov","hits":"1","order":"2142","possible_hits":"2",},
{"lineNum":"  636","line":"                try expectEqualStrings(\"c\", second.index.data.Ident);","class":"lineCov","hits":"2","order":"2143","possible_hits":"2",},
{"lineNum":"  637","line":"                try expectEqual(NodeType.ArrayAccess, second.expr.getType());","class":"lineCov","hits":"1","order":"2144","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"                const first = second.expr.data.ArrayAccess;","class":"linePartCov","hits":"2","order":"2145","possible_hits":"3",},
{"lineNum":"  640","line":"                try expectEqual(NodeType.Ident, first.index.getType());","class":"linePartCov","hits":"1","order":"2146","possible_hits":"2",},
{"lineNum":"  641","line":"                try expectEqualStrings(\"b\", first.index.data.Ident);","class":"lineCov","hits":"2","order":"2147","possible_hits":"2",},
{"lineNum":"  642","line":"                try expectEqual(NodeType.Ident, first.expr.getType());","class":"lineCov","hits":"1","order":"2148","possible_hits":"1",},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"                try expectEqualStrings(\"a\", first.expr.data.Ident);","class":"lineCov","hits":"2","order":"2149","possible_hits":"2",},
{"lineNum":"  645","line":"            }"},
{"lineNum":"  646","line":"        }).check,"},
{"lineNum":"  647","line":"    }).run();","class":"lineCov","hits":"1","order":"2128","possible_hits":"1",},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"test \"can parse function call without arguments\" {","class":"lineCov","hits":"2","order":"2151","possible_hits":"2",},
{"lineNum":"  651","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2168","possible_hits":"1",},
{"lineNum":"  652","line":"        .expr = \"a()\","},
{"lineNum":"  653","line":"        .startingCh = 1,"},
{"lineNum":"  654","line":"        .check = (struct {"},
{"lineNum":"  655","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2162","possible_hits":"2",},
{"lineNum":"  656","line":"                try expectEqual(NodeType.Call, value.getType());","class":"lineCov","hits":"1","order":"2163","possible_hits":"1",},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"                const call = value.data.Call;","class":"linePartCov","hits":"2","order":"2164","possible_hits":"3",},
{"lineNum":"  659","line":"                try expectEqual(NodeType.Ident, call.expr.getType());","class":"linePartCov","hits":"1","order":"2165","possible_hits":"2",},
{"lineNum":"  660","line":"                try expectEqualStrings(\"a\", call.expr.data.Ident);","class":"lineCov","hits":"2","order":"2166","possible_hits":"2",},
{"lineNum":"  661","line":"                try expectEqual(@intCast(usize, 0), call.args.items.len);","class":"lineCov","hits":"1","order":"2167","possible_hits":"1",},
{"lineNum":"  662","line":"            }"},
{"lineNum":"  663","line":"        }).check,"},
{"lineNum":"  664","line":"    }).run();","class":"lineCov","hits":"1","order":"2152","possible_hits":"1",},
{"lineNum":"  665","line":"}"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"test \"can parse function call with arguments\" {","class":"lineCov","hits":"2","order":"2169","possible_hits":"2",},
{"lineNum":"  668","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2192","possible_hits":"1",},
{"lineNum":"  669","line":"        .expr = \"a(b, true, 4)\","},
{"lineNum":"  670","line":"        .startingCh = 1,"},
{"lineNum":"  671","line":"        .check = (struct {"},
{"lineNum":"  672","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2180","possible_hits":"2",},
{"lineNum":"  673","line":"                try expectEqual(NodeType.Call, value.getType());","class":"lineCov","hits":"1","order":"2181","possible_hits":"1",},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"                const call = value.data.Call;","class":"linePartCov","hits":"2","order":"2182","possible_hits":"3",},
{"lineNum":"  676","line":"                try expectEqual(NodeType.Ident, call.expr.getType());","class":"linePartCov","hits":"1","order":"2183","possible_hits":"2",},
{"lineNum":"  677","line":"                try expectEqualStrings(\"a\", call.expr.data.Ident);","class":"lineCov","hits":"2","order":"2184","possible_hits":"2",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"                const args = call.args.items;","class":"lineCov","hits":"1","order":"2185","possible_hits":"1",},
{"lineNum":"  680","line":"                try expectEqual(@intCast(usize, 3), args.len);","class":"lineCov","hits":"1","order":"2186","possible_hits":"1",},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"                try expectEqual(NodeType.Ident, args[0].getType());","class":"linePartCov","hits":"1","order":"2187","possible_hits":"2",},
{"lineNum":"  683","line":"                try expectEqualStrings(\"b\", args[0].data.Ident);","class":"linePartCov","hits":"1","order":"2188","possible_hits":"2",},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"                try expectEqual(NodeType.True, args[1].getType());","class":"linePartCov","hits":"1","order":"2189","possible_hits":"2",},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"                try expectEqual(NodeType.Int, args[2].getType());","class":"linePartCov","hits":"1","order":"2190","possible_hits":"2",},
{"lineNum":"  688","line":"                try expectEqualStrings(\"4\", args[2].data.Int);","class":"linePartCov","hits":"1","order":"2191","possible_hits":"2",},
{"lineNum":"  689","line":"            }"},
{"lineNum":"  690","line":"        }).check,"},
{"lineNum":"  691","line":"    }).run();","class":"lineCov","hits":"1","order":"2170","possible_hits":"1",},
{"lineNum":"  692","line":"}"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"fn parsePostfixExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1776","possible_hits":"1",},
{"lineNum":"  695","line":"    const res = parseMemberExpr(psr);","class":"lineCov","hits":"1","order":"1777","possible_hits":"1",},
{"lineNum":"  696","line":"    if (!res.isSuccess())","class":"lineCov","hits":"2","order":"1801","possible_hits":"2",},
{"lineNum":"  697","line":"        return res;","class":"lineCov","hits":"1","order":"2696","possible_hits":"1",},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"    var left = res.Success;","class":"linePartCov","hits":"2","order":"1802","possible_hits":"3",},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    while (true) {","class":"lineCov","hits":"3","order":"1803","possible_hits":"3",},
{"lineNum":"  702","line":"        if (psr.lexer.token.ty == .Inc) {","class":"lineCov","hits":"3","order":"1804","possible_hits":"3",},
{"lineNum":"  703","line":"            left = makeNode(","class":"lineCov","hits":"1","order":"2202","possible_hits":"1",},
{"lineNum":"  704","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"2195","possible_hits":"1",},
{"lineNum":"  705","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2196","possible_hits":"1",},
{"lineNum":"  706","line":"                .PostfixOp,"},
{"lineNum":"  707","line":"                node.UnaryOp.new(.Inc, left),","class":"lineCov","hits":"1","order":"2197","possible_hits":"1",},
{"lineNum":"  708","line":"            );"},
{"lineNum":"  709","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2203","possible_hits":"1",},
{"lineNum":"  710","line":"        } else if (psr.lexer.token.ty == .Dec) {","class":"lineCov","hits":"1","order":"1805","possible_hits":"1",},
{"lineNum":"  711","line":"            left = makeNode(","class":"lineCov","hits":"1","order":"3217","possible_hits":"1",},
{"lineNum":"  712","line":"                psr.getAllocator(),","class":"lineCov","hits":"1","order":"3214","possible_hits":"1",},
{"lineNum":"  713","line":"                psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"3215","possible_hits":"1",},
{"lineNum":"  714","line":"                .PostfixOp,"},
{"lineNum":"  715","line":"                node.UnaryOp.new(.Dec, left),","class":"lineCov","hits":"1","order":"3216","possible_hits":"1",},
{"lineNum":"  716","line":"            );"},
{"lineNum":"  717","line":"            _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"3218","possible_hits":"1",},
{"lineNum":"  718","line":"        } else {"},
{"lineNum":"  719","line":"            return ParseResult.success(left);","class":"lineCov","hits":"1","order":"1806","possible_hits":"1",},
{"lineNum":"  720","line":"        }"},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":"}"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"test \"can parse postfix unary operator expressions\" {","class":"lineCov","hits":"2","order":"2193","possible_hits":"2",},
{"lineNum":"  725","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2210","possible_hits":"1",},
{"lineNum":"  726","line":"        .expr = \"b++\","},
{"lineNum":"  727","line":"        .startingCh = 1,"},
{"lineNum":"  728","line":"        .check = (struct {"},
{"lineNum":"  729","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2204","possible_hits":"2",},
{"lineNum":"  730","line":"                try expectEqual(NodeType.PostfixOp, value.getType());","class":"lineCov","hits":"1","order":"2205","possible_hits":"1",},
{"lineNum":"  731","line":"                const data = value.data.PostfixOp;","class":"linePartCov","hits":"2","order":"2206","possible_hits":"3",},
{"lineNum":"  732","line":"                try expectEqual(TokenType.Inc, data.op);","class":"linePartCov","hits":"1","order":"2207","possible_hits":"2",},
{"lineNum":"  733","line":"                try expectEqual(NodeType.Ident, data.expr.getType());","class":"lineCov","hits":"1","order":"2208","possible_hits":"1",},
{"lineNum":"  734","line":"                try expectEqualStrings(\"b\", data.expr.data.Ident);","class":"lineCov","hits":"2","order":"2209","possible_hits":"2",},
{"lineNum":"  735","line":"            }"},
{"lineNum":"  736","line":"        }).check,"},
{"lineNum":"  737","line":"    }).run();","class":"lineCov","hits":"1","order":"2194","possible_hits":"1",},
{"lineNum":"  738","line":"}"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"fn parsePrefixExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1773","possible_hits":"1",},
{"lineNum":"  741","line":"    const op = switch (psr.lexer.token.ty) {","class":"lineCov","hits":"1","order":"1774","possible_hits":"1",},
{"lineNum":"  742","line":"        .Delete,"},
{"lineNum":"  743","line":"        .Void,"},
{"lineNum":"  744","line":"        .TypeOf,"},
{"lineNum":"  745","line":"        .Inc,"},
{"lineNum":"  746","line":"        .Dec,"},
{"lineNum":"  747","line":"        .Add,"},
{"lineNum":"  748","line":"        .Sub,"},
{"lineNum":"  749","line":"        .BitNot,"},
{"lineNum":"  750","line":"        .LogicalNot,"},
{"lineNum":"  751","line":"        => psr.lexer.token,","class":"lineCov","hits":"1","order":"2213","possible_hits":"1",},
{"lineNum":"  752","line":"        else => return parsePostfixExpr(psr),","class":"lineCov","hits":"1","order":"1775","possible_hits":"1",},
{"lineNum":"  753","line":"    };"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2214","possible_hits":"1",},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    const expr = parsePrefixExpr(psr);","class":"lineCov","hits":"1","order":"2215","possible_hits":"1",},
{"lineNum":"  758","line":"    if (!expr.isSuccess())","class":"lineCov","hits":"2","order":"2216","possible_hits":"2",},
{"lineNum":"  759","line":"        return expr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2220","possible_hits":"1",},
{"lineNum":"  762","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2217","possible_hits":"1",},
{"lineNum":"  763","line":"        op.csr,","class":"lineCov","hits":"1","order":"2218","possible_hits":"1",},
{"lineNum":"  764","line":"        .PrefixOp,"},
{"lineNum":"  765","line":"        node.UnaryOp.new(op.ty, expr.Success),","class":"linePartCov","hits":"1","order":"2219","possible_hits":"2",},
{"lineNum":"  766","line":"    ));"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"test \"can parse prefix unary operator expressions\" {","class":"lineCov","hits":"2","order":"2211","possible_hits":"2",},
{"lineNum":"  770","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2227","possible_hits":"1",},
{"lineNum":"  771","line":"        .expr = \"++b\","},
{"lineNum":"  772","line":"        .check = (struct {"},
{"lineNum":"  773","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2221","possible_hits":"2",},
{"lineNum":"  774","line":"                try expectEqual(NodeType.PrefixOp, value.getType());","class":"lineCov","hits":"1","order":"2222","possible_hits":"1",},
{"lineNum":"  775","line":"                const data = value.data.PrefixOp;","class":"linePartCov","hits":"2","order":"2223","possible_hits":"3",},
{"lineNum":"  776","line":"                try expectEqual(TokenType.Inc, data.op);","class":"linePartCov","hits":"1","order":"2224","possible_hits":"2",},
{"lineNum":"  777","line":"                try expectEqual(NodeType.Ident, data.expr.getType());","class":"lineCov","hits":"1","order":"2225","possible_hits":"1",},
{"lineNum":"  778","line":"                try expectEqualStrings(\"b\", data.expr.data.Ident);","class":"lineCov","hits":"2","order":"2226","possible_hits":"2",},
{"lineNum":"  779","line":"            }"},
{"lineNum":"  780","line":"        }).check,"},
{"lineNum":"  781","line":"    }).run();","class":"lineCov","hits":"1","order":"2212","possible_hits":"1",},
{"lineNum":"  782","line":"}"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"fn BinaryOpParser("},
{"lineNum":"  785","line":"    next: fn (psr: *TsParser) ParseResult,"},
{"lineNum":"  786","line":"    tokens: []const TokenType,"},
{"lineNum":"  787","line":") type {"},
{"lineNum":"  788","line":"    return struct {"},
{"lineNum":"  789","line":"        pub fn parse(psr: *TsParser) ParseResult {","class":"lineCov","hits":"11","order":"1769","possible_hits":"11",},
{"lineNum":"  790","line":"            const res = next(psr);","class":"lineCov","hits":"11","order":"1770","possible_hits":"11",},
{"lineNum":"  791","line":"            if (!res.isSuccess())","class":"lineCov","hits":"22","order":"1807","possible_hits":"22",},
{"lineNum":"  792","line":"                return res;","class":"lineCov","hits":"11","order":"2697","possible_hits":"11",},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"            var left = res.Success;","class":"linePartCov","hits":"22","order":"1808","possible_hits":"33",},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"            opLoop: while (true) {","class":"lineCov","hits":"22","order":"1809","possible_hits":"22",},
{"lineNum":"  797","line":"                inline for (tokens) |tkn| {"},
{"lineNum":"  798","line":"                    if (psr.lexer.token.ty == tkn) {","class":"lineCov","hits":"46","order":"1810","possible_hits":"46",},
{"lineNum":"  799","line":"                        const op = psr.lexer.token;","class":"lineCov","hits":"35","order":"2232","possible_hits":"35",},
{"lineNum":"  800","line":"                        _ = psr.lexer.next();","class":"lineCov","hits":"35","order":"2233","possible_hits":"35",},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"                        const right = next(psr);","class":"lineCov","hits":"35","order":"2234","possible_hits":"35",},
{"lineNum":"  803","line":"                        if (!right.isSuccess())","class":"lineCov","hits":"70","order":"2235","possible_hits":"70",},
{"lineNum":"  804","line":"                            return right;","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"                        left = makeNode(","class":"lineCov","hits":"35","order":"2244","possible_hits":"35",},
{"lineNum":"  807","line":"                            psr.getAllocator(),","class":"lineCov","hits":"35","order":"2236","possible_hits":"35",},
{"lineNum":"  808","line":"                            op.csr,","class":"lineCov","hits":"35","order":"2237","possible_hits":"35",},
{"lineNum":"  809","line":"                            .BinaryOp,"},
{"lineNum":"  810","line":"                            node.BinaryOp.new(op.ty, left, right.Success),","class":"linePartCov","hits":"46","order":"2238","possible_hits":"81",},
{"lineNum":"  811","line":"                        );"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"                        continue :opLoop;","class":"lineCov","hits":"35","order":"2245","possible_hits":"35",},
{"lineNum":"  814","line":"                    }"},
{"lineNum":"  815","line":"                }"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"                return ParseResult.success(left);","class":"lineCov","hits":"11","order":"1811","possible_hits":"11",},
{"lineNum":"  818","line":"            }"},
{"lineNum":"  819","line":"        }"},
{"lineNum":"  820","line":"    };"},
{"lineNum":"  821","line":"}"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"const mulOpParser = BinaryOpParser("},
{"lineNum":"  824","line":"    parsePrefixExpr,"},
{"lineNum":"  825","line":"    &[_]TokenType{ .Mul, .Div, .Mod },"},
{"lineNum":"  826","line":");"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"const addOpParser = BinaryOpParser("},
{"lineNum":"  829","line":"    mulOpParser.parse,"},
{"lineNum":"  830","line":"    &[_]TokenType{ .Add, .Sub },"},
{"lineNum":"  831","line":");"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"const shiftOpParser = BinaryOpParser("},
{"lineNum":"  834","line":"    addOpParser.parse,"},
{"lineNum":"  835","line":"    &[_]TokenType{ .ShiftLeft, .ShiftRight, .ShiftRightUnsigned },"},
{"lineNum":"  836","line":");"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"const relationalOpParser = BinaryOpParser("},
{"lineNum":"  839","line":"    shiftOpParser.parse,"},
{"lineNum":"  840","line":"    &[_]TokenType{"},
{"lineNum":"  841","line":"        .CmpGreater,"},
{"lineNum":"  842","line":"        .CmpLess,"},
{"lineNum":"  843","line":"        .CmpGreaterEq,"},
{"lineNum":"  844","line":"        .CmpLessEq,"},
{"lineNum":"  845","line":"        .InstanceOf,"},
{"lineNum":"  846","line":"        .In,"},
{"lineNum":"  847","line":"    },"},
{"lineNum":"  848","line":");"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"const equalityOpParser = BinaryOpParser("},
{"lineNum":"  851","line":"    relationalOpParser.parse,"},
{"lineNum":"  852","line":"    &[_]TokenType{ .CmpEq, .CmpNotEq, .CmpStrictEq, .CmpStrictNotEq },"},
{"lineNum":"  853","line":");"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"const bitAndOpParser = BinaryOpParser("},
{"lineNum":"  856","line":"    equalityOpParser.parse,"},
{"lineNum":"  857","line":"    &[_]TokenType{.BitAnd},"},
{"lineNum":"  858","line":");"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"const bitXorOpParser = BinaryOpParser("},
{"lineNum":"  861","line":"    bitAndOpParser.parse,"},
{"lineNum":"  862","line":"    &[_]TokenType{.BitXor},"},
{"lineNum":"  863","line":");"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"const bitOrOpParser = BinaryOpParser("},
{"lineNum":"  866","line":"    bitXorOpParser.parse,"},
{"lineNum":"  867","line":"    &[_]TokenType{.BitOr},"},
{"lineNum":"  868","line":");"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"const logAndOpParser = BinaryOpParser("},
{"lineNum":"  871","line":"    bitOrOpParser.parse,"},
{"lineNum":"  872","line":"    &[_]TokenType{.LogicalAnd},"},
{"lineNum":"  873","line":");"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"const logOrOpParser = BinaryOpParser("},
{"lineNum":"  876","line":"    logAndOpParser.parse,"},
{"lineNum":"  877","line":"    &[_]TokenType{.LogicalOr},"},
{"lineNum":"  878","line":");"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"fn parseTernaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1771","possible_hits":"1",},
{"lineNum":"  881","line":"    const left = logOrOpParser.parse(psr);","class":"lineCov","hits":"1","order":"1772","possible_hits":"1",},
{"lineNum":"  882","line":"    if (!left.isSuccess())","class":"lineCov","hits":"2","order":"1812","possible_hits":"2",},
{"lineNum":"  883","line":"        return left;","class":"lineCov","hits":"1","order":"2698","possible_hits":"1",},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"    if (psr.lexer.token.ty != .Question)","class":"lineCov","hits":"2","order":"1813","possible_hits":"2",},
{"lineNum":"  886","line":"        return left;","class":"lineCov","hits":"1","order":"1814","possible_hits":"1",},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"    const csr = psr.lexer.token.csr;","class":"lineCov","hits":"1","order":"2300","possible_hits":"1",},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2301","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    const ifTrue = assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"2302","possible_hits":"1",},
{"lineNum":"  893","line":"    if (!ifTrue.isSuccess())","class":"lineCov","hits":"2","order":"2303","possible_hits":"2",},
{"lineNum":"  894","line":"        return ifTrue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"    if (psr.lexer.token.ty != .Colon)","class":"lineCov","hits":"2","order":"2304","possible_hits":"2",},
{"lineNum":"  897","line":"        return ParseResult.expected(TokenType.Colon, psr.lexer.token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"    _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2305","possible_hits":"1",},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"    const ifFalse = assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"2306","possible_hits":"1",},
{"lineNum":"  902","line":"    if (!ifFalse.isSuccess())","class":"lineCov","hits":"2","order":"2307","possible_hits":"2",},
{"lineNum":"  903","line":"        return ifFalse;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"    return ParseResult.success(makeNode(","class":"lineCov","hits":"1","order":"2315","possible_hits":"1",},
{"lineNum":"  906","line":"        psr.getAllocator(),","class":"lineCov","hits":"1","order":"2308","possible_hits":"1",},
{"lineNum":"  907","line":"        csr,"},
{"lineNum":"  908","line":"        .Ternary,"},
{"lineNum":"  909","line":"        node.Ternary.new(left.Success, ifTrue.Success, ifFalse.Success),","class":"linePartCov","hits":"1","order":"2309","possible_hits":"2",},
{"lineNum":"  910","line":"    ));"},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"const assignOpParser = BinaryOpParser("},
{"lineNum":"  914","line":"    parseTernaryExpr,"},
{"lineNum":"  915","line":"    &[_]TokenType{"},
{"lineNum":"  916","line":"        .Assign,"},
{"lineNum":"  917","line":"        .AddAssign,"},
{"lineNum":"  918","line":"        .SubAssign,"},
{"lineNum":"  919","line":"        .MulAssign,"},
{"lineNum":"  920","line":"        .DivAssign,"},
{"lineNum":"  921","line":"        .ModAssign,"},
{"lineNum":"  922","line":"        .ShiftLeftAssign,"},
{"lineNum":"  923","line":"        .ShiftRightAssign,"},
{"lineNum":"  924","line":"        .ShiftRightUnsignedAssign,"},
{"lineNum":"  925","line":"        .BitAndAssign,"},
{"lineNum":"  926","line":"        .BitOrAssign,"},
{"lineNum":"  927","line":"        .BitXorAssign,"},
{"lineNum":"  928","line":"    },"},
{"lineNum":"  929","line":");"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"fn parseBinaryExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1767","possible_hits":"1",},
{"lineNum":"  932","line":"    return assignOpParser.parse(psr);","class":"lineCov","hits":"1","order":"1768","possible_hits":"1",},
{"lineNum":"  933","line":"}"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"fn BinaryOpTestCase(op: []const u8, ty: TokenType) type {"},
{"lineNum":"  936","line":"    return struct {"},
{"lineNum":"  937","line":"        pub fn run() !void {","class":"lineCov","hits":"70","order":"2230","possible_hits":"70",},
{"lineNum":"  938","line":"            try (ExprTestCase{","class":"lineCov","hits":"35","order":"2254","possible_hits":"35",},
{"lineNum":"  939","line":"                .expr = \"a \" ++ op ++ \" b\","},
{"lineNum":"  940","line":"                .startingCh = 2,"},
{"lineNum":"  941","line":"                .check = @This().check,"},
{"lineNum":"  942","line":"            }).run();","class":"lineCov","hits":"35","order":"2231","possible_hits":"35",},
{"lineNum":"  943","line":"        }"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"        fn check(value: Node) anyerror!void {","class":"lineCov","hits":"70","order":"2246","possible_hits":"70",},
{"lineNum":"  946","line":"            try expectEqual(NodeType.BinaryOp, value.getType());","class":"lineCov","hits":"35","order":"2247","possible_hits":"35",},
{"lineNum":"  947","line":"            const data = value.data.BinaryOp;","class":"linePartCov","hits":"70","order":"2248","possible_hits":"105",},
{"lineNum":"  948","line":"            try expectEqual(ty, data.op);","class":"linePartCov","hits":"35","order":"2249","possible_hits":"70",},
{"lineNum":"  949","line":"            try expectEqual(NodeType.Ident, data.left.getType());","class":"lineCov","hits":"35","order":"2250","possible_hits":"35",},
{"lineNum":"  950","line":"            try expectEqualStrings(\"a\", data.left.data.Ident);","class":"lineCov","hits":"70","order":"2251","possible_hits":"70",},
{"lineNum":"  951","line":"            try expectEqual(NodeType.Ident, data.right.getType());","class":"lineCov","hits":"35","order":"2252","possible_hits":"35",},
{"lineNum":"  952","line":"            try expectEqualStrings(\"b\", data.right.data.Ident);","class":"lineCov","hits":"70","order":"2253","possible_hits":"70",},
{"lineNum":"  953","line":"        }"},
{"lineNum":"  954","line":"    };"},
{"lineNum":"  955","line":"}"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"test \"can parse mul binary expressions\" {","class":"lineCov","hits":"2","order":"2228","possible_hits":"2",},
{"lineNum":"  958","line":"    try BinaryOpTestCase(\"*\", .Mul).run();","class":"lineCov","hits":"1","order":"2229","possible_hits":"1",},
{"lineNum":"  959","line":"    try BinaryOpTestCase(\"/\", .Div).run();","class":"lineCov","hits":"1","order":"2255","possible_hits":"1",},
{"lineNum":"  960","line":"    try BinaryOpTestCase(\"%\", .Mod).run();","class":"lineCov","hits":"1","order":"2258","possible_hits":"1",},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"test \"can parse add binary expressions\" {","class":"lineCov","hits":"2","order":"2259","possible_hits":"2",},
{"lineNum":"  964","line":"    try BinaryOpTestCase(\"+\", .Add).run();","class":"lineCov","hits":"1","order":"2260","possible_hits":"1",},
{"lineNum":"  965","line":"    try BinaryOpTestCase(\"-\", .Sub).run();","class":"lineCov","hits":"1","order":"2261","possible_hits":"1",},
{"lineNum":"  966","line":"}"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"test \"can parse shift binary expressions\" {","class":"lineCov","hits":"2","order":"2262","possible_hits":"2",},
{"lineNum":"  969","line":"    try BinaryOpTestCase(\"<<\", .ShiftLeft).run();","class":"lineCov","hits":"1","order":"2263","possible_hits":"1",},
{"lineNum":"  970","line":"    try BinaryOpTestCase(\">>\", .ShiftRight).run();","class":"lineCov","hits":"1","order":"2264","possible_hits":"1",},
{"lineNum":"  971","line":"    try BinaryOpTestCase(\">>>\", .ShiftRightUnsigned).run();","class":"lineCov","hits":"1","order":"2265","possible_hits":"1",},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"test \"can parse relational binary expressions\" {","class":"lineCov","hits":"2","order":"2266","possible_hits":"2",},
{"lineNum":"  975","line":"    try BinaryOpTestCase(\">\", .CmpGreater).run();","class":"lineCov","hits":"1","order":"2267","possible_hits":"1",},
{"lineNum":"  976","line":"    try BinaryOpTestCase(\"<\", .CmpLess).run();","class":"lineCov","hits":"1","order":"2268","possible_hits":"1",},
{"lineNum":"  977","line":"    try BinaryOpTestCase(\">=\", .CmpGreaterEq).run();","class":"lineCov","hits":"1","order":"2269","possible_hits":"1",},
{"lineNum":"  978","line":"    try BinaryOpTestCase(\"<=\", .CmpLessEq).run();","class":"lineCov","hits":"1","order":"2270","possible_hits":"1",},
{"lineNum":"  979","line":"    try BinaryOpTestCase(\"instanceof\", .InstanceOf).run();","class":"lineCov","hits":"1","order":"2271","possible_hits":"1",},
{"lineNum":"  980","line":"    try BinaryOpTestCase(\"in\", .In).run();","class":"lineCov","hits":"1","order":"2272","possible_hits":"1",},
{"lineNum":"  981","line":"}"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"test \"can parse equality binary expressions\" {","class":"lineCov","hits":"2","order":"2273","possible_hits":"2",},
{"lineNum":"  984","line":"    try BinaryOpTestCase(\"==\", .CmpEq).run();","class":"lineCov","hits":"1","order":"2274","possible_hits":"1",},
{"lineNum":"  985","line":"    try BinaryOpTestCase(\"!=\", .CmpNotEq).run();","class":"lineCov","hits":"1","order":"2275","possible_hits":"1",},
{"lineNum":"  986","line":"    try BinaryOpTestCase(\"===\", .CmpStrictEq).run();","class":"lineCov","hits":"1","order":"2276","possible_hits":"1",},
{"lineNum":"  987","line":"    try BinaryOpTestCase(\"!==\", .CmpStrictNotEq).run();","class":"lineCov","hits":"1","order":"2277","possible_hits":"1",},
{"lineNum":"  988","line":"}"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"test \"can parse bitwise binary expressions\" {","class":"lineCov","hits":"2","order":"2278","possible_hits":"2",},
{"lineNum":"  991","line":"    try BinaryOpTestCase(\"&\", .BitAnd).run();","class":"lineCov","hits":"1","order":"2279","possible_hits":"1",},
{"lineNum":"  992","line":"    try BinaryOpTestCase(\"^\", .BitXor).run();","class":"lineCov","hits":"1","order":"2280","possible_hits":"1",},
{"lineNum":"  993","line":"    try BinaryOpTestCase(\"|\", .BitOr).run();","class":"lineCov","hits":"1","order":"2281","possible_hits":"1",},
{"lineNum":"  994","line":"}"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"test \"can parse logical binary expressions\" {","class":"lineCov","hits":"2","order":"2282","possible_hits":"2",},
{"lineNum":"  997","line":"    try BinaryOpTestCase(\"&&\", .LogicalAnd).run();","class":"lineCov","hits":"1","order":"2283","possible_hits":"1",},
{"lineNum":"  998","line":"    try BinaryOpTestCase(\"||\", .LogicalOr).run();","class":"lineCov","hits":"1","order":"2284","possible_hits":"1",},
{"lineNum":"  999","line":"}"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"test \"can parse assignment binary expressions\" {","class":"lineCov","hits":"2","order":"2285","possible_hits":"2",},
{"lineNum":" 1002","line":"    try BinaryOpTestCase(\"=\", .Assign).run();","class":"lineCov","hits":"1","order":"2286","possible_hits":"1",},
{"lineNum":" 1003","line":"    try BinaryOpTestCase(\"+=\", .AddAssign).run();","class":"lineCov","hits":"1","order":"2287","possible_hits":"1",},
{"lineNum":" 1004","line":"    try BinaryOpTestCase(\"-=\", .SubAssign).run();","class":"lineCov","hits":"1","order":"2288","possible_hits":"1",},
{"lineNum":" 1005","line":"    try BinaryOpTestCase(\"*=\", .MulAssign).run();","class":"lineCov","hits":"1","order":"2289","possible_hits":"1",},
{"lineNum":" 1006","line":"    try BinaryOpTestCase(\"/=\", .DivAssign).run();","class":"lineCov","hits":"1","order":"2290","possible_hits":"1",},
{"lineNum":" 1007","line":"    try BinaryOpTestCase(\"%=\", .ModAssign).run();","class":"lineCov","hits":"1","order":"2291","possible_hits":"1",},
{"lineNum":" 1008","line":"    try BinaryOpTestCase(\"<<=\", .ShiftLeftAssign).run();","class":"lineCov","hits":"1","order":"2292","possible_hits":"1",},
{"lineNum":" 1009","line":"    try BinaryOpTestCase(\">>=\", .ShiftRightAssign).run();","class":"lineCov","hits":"1","order":"2293","possible_hits":"1",},
{"lineNum":" 1010","line":"    try BinaryOpTestCase(\">>>=\", .ShiftRightUnsignedAssign).run();","class":"lineCov","hits":"1","order":"2294","possible_hits":"1",},
{"lineNum":" 1011","line":"    try BinaryOpTestCase(\"&=\", .BitAndAssign).run();","class":"lineCov","hits":"1","order":"2295","possible_hits":"1",},
{"lineNum":" 1012","line":"    try BinaryOpTestCase(\"|=\", .BitOrAssign).run();","class":"lineCov","hits":"1","order":"2296","possible_hits":"1",},
{"lineNum":" 1013","line":"    try BinaryOpTestCase(\"^=\", .BitXorAssign).run();","class":"lineCov","hits":"1","order":"2297","possible_hits":"1",},
{"lineNum":" 1014","line":"}"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"test \"can parse ternary expressions\" {","class":"lineCov","hits":"2","order":"2298","possible_hits":"2",},
{"lineNum":" 1017","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2325","possible_hits":"1",},
{"lineNum":" 1018","line":"        .expr = \"a ? 1 : \'abc\'\","},
{"lineNum":" 1019","line":"        .startingCh = 2,"},
{"lineNum":" 1020","line":"        .check = (struct {"},
{"lineNum":" 1021","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2316","possible_hits":"2",},
{"lineNum":" 1022","line":"                try expectEqual(NodeType.Ternary, value.getType());","class":"lineCov","hits":"1","order":"2317","possible_hits":"1",},
{"lineNum":" 1023","line":"                const ternary = value.data.Ternary;","class":"linePartCov","hits":"2","order":"2318","possible_hits":"3",},
{"lineNum":" 1024","line":"                try expectEqual(NodeType.Ident, ternary.cond.getType());","class":"linePartCov","hits":"1","order":"2319","possible_hits":"2",},
{"lineNum":" 1025","line":"                try expectEqualStrings(\"a\", ternary.cond.data.Ident);","class":"lineCov","hits":"2","order":"2320","possible_hits":"2",},
{"lineNum":" 1026","line":"                try expectEqual(NodeType.Int, ternary.ifTrue.getType());","class":"lineCov","hits":"1","order":"2321","possible_hits":"1",},
{"lineNum":" 1027","line":"                try expectEqualStrings(\"1\", ternary.ifTrue.data.Int);","class":"lineCov","hits":"2","order":"2322","possible_hits":"2",},
{"lineNum":" 1028","line":"                try expectEqual(NodeType.String, ternary.ifFalse.getType());","class":"lineCov","hits":"1","order":"2323","possible_hits":"1",},
{"lineNum":" 1029","line":"                try expectEqualStrings(\"\'abc\'\", ternary.ifFalse.data.String);","class":"lineCov","hits":"2","order":"2324","possible_hits":"2",},
{"lineNum":" 1030","line":"            }"},
{"lineNum":" 1031","line":"        }).check,"},
{"lineNum":" 1032","line":"    }).run();","class":"lineCov","hits":"1","order":"2299","possible_hits":"1",},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"fn parseCommaExpr(psr: *TsParser) ParseResult {","class":"lineCov","hits":"1","order":"1765","possible_hits":"1",},
{"lineNum":" 1036","line":"    const res = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"1766","possible_hits":"1",},
{"lineNum":" 1037","line":"    if (!res.isSuccess() or psr.lexer.token.ty != .Comma)","class":"lineCov","hits":"2","order":"1815","possible_hits":"2",},
{"lineNum":" 1038","line":"        return res;","class":"lineCov","hits":"1","order":"1816","possible_hits":"1",},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"    const alloc = psr.getAllocator();","class":"lineCov","hits":"1","order":"2328","possible_hits":"1",},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"    var list = makeNode(","class":"lineCov","hits":"1","order":"2330","possible_hits":"1",},
{"lineNum":" 1043","line":"        alloc,"},
{"lineNum":" 1044","line":"        psr.lexer.token.csr,","class":"lineCov","hits":"1","order":"2329","possible_hits":"1",},
{"lineNum":" 1045","line":"        .Comma,"},
{"lineNum":" 1046","line":"        node.NodeList{},"},
{"lineNum":" 1047","line":"    );"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    list.data.Comma.append(","class":"linePartCov","hits":"2","order":"2331","possible_hits":"3",},
{"lineNum":" 1050","line":"        alloc,"},
{"lineNum":" 1051","line":"        res.Success,","class":"linePartCov","hits":"2","order":"2332","possible_hits":"3",},
{"lineNum":" 1052","line":"    ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2333","possible_hits":"2",},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"    while (psr.lexer.token.ty == .Comma) {","class":"lineCov","hits":"2","order":"2334","possible_hits":"2",},
{"lineNum":" 1055","line":"        _ = psr.lexer.next();","class":"lineCov","hits":"1","order":"2335","possible_hits":"1",},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"        const right = parseBinaryExpr(psr);","class":"lineCov","hits":"1","order":"2336","possible_hits":"1",},
{"lineNum":" 1058","line":"        if (!right.isSuccess())","class":"lineCov","hits":"2","order":"2337","possible_hits":"2",},
{"lineNum":" 1059","line":"            return right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"        list.data.Comma.append(","class":"linePartCov","hits":"2","order":"2338","possible_hits":"3",},
{"lineNum":" 1062","line":"            alloc,"},
{"lineNum":" 1063","line":"            right.Success,","class":"linePartCov","hits":"2","order":"2339","possible_hits":"3",},
{"lineNum":" 1064","line":"        ) catch allocate.reportAndExit();","class":"linePartCov","hits":"1","order":"2340","possible_hits":"2",},
{"lineNum":" 1065","line":"    }"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"    return ParseResult.success(list);","class":"lineCov","hits":"1","order":"2341","possible_hits":"1",},
{"lineNum":" 1068","line":"}"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"test \"can parse comma expressions\" {","class":"lineCov","hits":"2","order":"2326","possible_hits":"2",},
{"lineNum":" 1071","line":"    try (ExprTestCase{","class":"lineCov","hits":"1","order":"2352","possible_hits":"1",},
{"lineNum":" 1072","line":"        .expr = \"a, 1, \'abc\'\","},
{"lineNum":" 1073","line":"        .startingCh = 1,"},
{"lineNum":" 1074","line":"        .check = (struct {"},
{"lineNum":" 1075","line":"            fn check(value: Node) anyerror!void {","class":"lineCov","hits":"2","order":"2342","possible_hits":"2",},
{"lineNum":" 1076","line":"                try expectEqual(NodeType.Comma, value.getType());","class":"lineCov","hits":"1","order":"2343","possible_hits":"1",},
{"lineNum":" 1077","line":"                const items = value.data.Comma.items;","class":"linePartCov","hits":"2","order":"2344","possible_hits":"3",},
{"lineNum":" 1078","line":"                try expectEqual(@intCast(usize, 3), items.len);","class":"linePartCov","hits":"1","order":"2345","possible_hits":"2",},
{"lineNum":" 1079","line":"                try expectEqual(NodeType.Ident, items[0].getType());","class":"linePartCov","hits":"1","order":"2346","possible_hits":"2",},
{"lineNum":" 1080","line":"                try expectEqualStrings(\"a\", items[0].data.Ident);","class":"linePartCov","hits":"1","order":"2347","possible_hits":"2",},
{"lineNum":" 1081","line":"                try expectEqual(NodeType.Int, items[1].getType());","class":"linePartCov","hits":"1","order":"2348","possible_hits":"2",},
{"lineNum":" 1082","line":"                try expectEqualStrings(\"1\", items[1].data.Int);","class":"linePartCov","hits":"1","order":"2349","possible_hits":"2",},
{"lineNum":" 1083","line":"                try expectEqual(NodeType.String, items[2].getType());","class":"linePartCov","hits":"1","order":"2350","possible_hits":"2",},
{"lineNum":" 1084","line":"                try expectEqualStrings(\"\'abc\'\", items[2].data.String);","class":"linePartCov","hits":"1","order":"2351","possible_hits":"2",},
{"lineNum":" 1085","line":"            }"},
{"lineNum":" 1086","line":"        }).check,"},
{"lineNum":" 1087","line":"    }).run();","class":"lineCov","hits":"1","order":"2327","possible_hits":"1",},
{"lineNum":" 1088","line":"}"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"pub fn parseExpr(psr: *Parser) ParseResult {","class":"lineCov","hits":"1","order":"1763","possible_hits":"1",},
{"lineNum":" 1091","line":"    return parseCommaExpr(@fieldParentPtr(TsParser, \"parser\", psr));","class":"lineCov","hits":"1","order":"1764","possible_hits":"1",},
{"lineNum":" 1092","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-30 12:05:09", "instrumented" : 564, "covered" : 530,};
var merged_data = [];
