var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const WriteContext = @import(\"../writer.zig\").WriteContext;"},
{"lineNum":"   24","line":"const genericEql = @import(\"../generic_eql.zig\").eql;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"pub const Type = union(This.Type) {"},
{"lineNum":"   27","line":"    const This = @This();"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    pub const Ptr = *const This;"},
{"lineNum":"   30","line":"    pub const MutPtr = *This;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    pub const hoistedSentinel = @intToPtr(Ptr, 8);"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    pub const TupleType = @import(\"tuple_type.zig\");"},
{"lineNum":"   35","line":"    pub const ArrayType = @import(\"array_type.zig\").ArrayType;"},
{"lineNum":"   36","line":"    pub const ClassType = @import(\"class_type.zig\").ClassType;"},
{"lineNum":"   37","line":"    pub const EnumType = @import(\"enum_type.zig\");"},
{"lineNum":"   38","line":"    pub const FunctionType = @import(\"function_type.zig\").FunctionType;"},
{"lineNum":"   39","line":"    pub const UnionType = @import(\"union_type.zig\").UnionType;"},
{"lineNum":"   40","line":"    pub const AliasType = @import(\"alias_type.zig\").AliasType;"},
{"lineNum":"   41","line":"    pub const InterfaceType = @import(\"interface_type.zig\").InterfaceType;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    pub const Type = enum {"},
{"lineNum":"   44","line":"        Unknown,"},
{"lineNum":"   45","line":"        Any,"},
{"lineNum":"   46","line":"        Void,"},
{"lineNum":"   47","line":"        Null,"},
{"lineNum":"   48","line":"        Undefined,"},
{"lineNum":"   49","line":"        Never,"},
{"lineNum":"   50","line":"        Number,"},
{"lineNum":"   51","line":"        String,"},
{"lineNum":"   52","line":"        Boolean,"},
{"lineNum":"   53","line":"        Object,"},
{"lineNum":"   54","line":"        Tuple,"},
{"lineNum":"   55","line":"        Array,"},
{"lineNum":"   56","line":"        Class,"},
{"lineNum":"   57","line":"        Enum,"},
{"lineNum":"   58","line":"        Function,"},
{"lineNum":"   59","line":"        Union,"},
{"lineNum":"   60","line":"        Alias,"},
{"lineNum":"   61","line":"        Interface,"},
{"lineNum":"   62","line":"    };"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    Unknown,"},
{"lineNum":"   65","line":"    Any,"},
{"lineNum":"   66","line":"    Void,"},
{"lineNum":"   67","line":"    Null,"},
{"lineNum":"   68","line":"    Undefined,"},
{"lineNum":"   69","line":"    Never,"},
{"lineNum":"   70","line":"    Number,"},
{"lineNum":"   71","line":"    String,"},
{"lineNum":"   72","line":"    Boolean,"},
{"lineNum":"   73","line":"    Object,"},
{"lineNum":"   74","line":"    Tuple: TupleType,"},
{"lineNum":"   75","line":"    Array: ArrayType,"},
{"lineNum":"   76","line":"    Class: ClassType,"},
{"lineNum":"   77","line":"    Enum: EnumType,"},
{"lineNum":"   78","line":"    Function: FunctionType,"},
{"lineNum":"   79","line":"    Union: UnionType,"},
{"lineNum":"   80","line":"    Alias: AliasType,"},
{"lineNum":"   81","line":"    Interface: InterfaceType,"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    pub fn getType(self: This) This.Type {","class":"lineCov","hits":"1","order":"1002","possible_hits":"1",},
{"lineNum":"   84","line":"        return @as(This.Type, self);","class":"lineCov","hits":"1","order":"1003","possible_hits":"1",},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    pub fn eql(self: This, other: Ptr) bool {","class":"lineCov","hits":"1","order":"1117","possible_hits":"1",},
{"lineNum":"   88","line":"        return genericEql(self, other.*);","class":"lineCov","hits":"1","order":"1118","possible_hits":"1",},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    pub fn hash(self: This) usize {","class":"lineCov","hits":"1","order":"1142","possible_hits":"1",},
{"lineNum":"   92","line":"        return switch (self) {","class":"lineCov","hits":"8","order":"1143","possible_hits":"8",},
{"lineNum":"   93","line":"            .Unknown,"},
{"lineNum":"   94","line":"            .Any,"},
{"lineNum":"   95","line":"            .Void,"},
{"lineNum":"   96","line":"            .Null,"},
{"lineNum":"   97","line":"            .Undefined,"},
{"lineNum":"   98","line":"            .Never,"},
{"lineNum":"   99","line":"            .Number,"},
{"lineNum":"  100","line":"            .String,"},
{"lineNum":"  101","line":"            .Boolean,"},
{"lineNum":"  102","line":"            .Object,"},
{"lineNum":"  103","line":"            => @intCast(usize, @enumToInt(self.getType())) ^ 0xd16575db32f7806d,","class":"lineCov","hits":"1","order":"1144","possible_hits":"1",},
{"lineNum":"  104","line":"            .Tuple => @panic(\"TODO hash Tuple\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            .Array => |ar| ar.hash(),","class":"lineCov","hits":"1","order":"1159","possible_hits":"1",},
{"lineNum":"  106","line":"            .Class => |cls| cls.hash(),","class":"lineCov","hits":"1","order":"1519","possible_hits":"1",},
{"lineNum":"  107","line":"            .Enum => @panic(\"TODO hash Enum\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"            .Function => |f| f.hash(),","class":"lineCov","hits":"1","order":"1147","possible_hits":"1",},
{"lineNum":"  109","line":"            .Union => |un| un.hash(),","class":"lineCov","hits":"1","order":"1834","possible_hits":"1",},
{"lineNum":"  110","line":"            .Alias => |al| al.hash(),","class":"lineCov","hits":"1","order":"3107","possible_hits":"1",},
{"lineNum":"  111","line":"            .Interface => |in| in.hash(),","class":"lineCov","hits":"1","order":"1911","possible_hits":"1",},
{"lineNum":"  112","line":"        };"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    pub fn isHoistedSentinel(self: Ptr) bool {","class":"lineCov","hits":"1","order":"994","possible_hits":"1",},
{"lineNum":"  116","line":"        return self == hoistedSentinel;","class":"lineCov","hits":"1","order":"995","possible_hits":"1",},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    pub fn newUnknown() This {","class":"lineCov","hits":"1","order":"997","possible_hits":"1",},
{"lineNum":"  120","line":"        return This{ .Unknown = {} };","class":"lineCov","hits":"1","order":"998","possible_hits":"1",},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    pub fn newAny() This {","class":"lineCov","hits":"1","order":"1006","possible_hits":"1",},
{"lineNum":"  124","line":"        return This{ .Any = {} };","class":"lineCov","hits":"1","order":"1007","possible_hits":"1",},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    pub fn newVoid() This {","class":"lineCov","hits":"1","order":"1011","possible_hits":"1",},
{"lineNum":"  128","line":"        return This{ .Void = {} };","class":"lineCov","hits":"1","order":"1012","possible_hits":"1",},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    pub fn newNull() This {","class":"lineCov","hits":"1","order":"1016","possible_hits":"1",},
{"lineNum":"  132","line":"        return This{ .Null = {} };","class":"lineCov","hits":"1","order":"1017","possible_hits":"1",},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    pub fn newUndefined() This {","class":"lineCov","hits":"1","order":"1021","possible_hits":"1",},
{"lineNum":"  136","line":"        return This{ .Undefined = {} };","class":"lineCov","hits":"1","order":"1022","possible_hits":"1",},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    pub fn newNever() This {","class":"lineCov","hits":"1","order":"1026","possible_hits":"1",},
{"lineNum":"  140","line":"        return This{ .Never = {} };","class":"lineCov","hits":"1","order":"1027","possible_hits":"1",},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    pub fn newNumber() This {","class":"lineCov","hits":"1","order":"1031","possible_hits":"1",},
{"lineNum":"  144","line":"        return This{ .Number = {} };","class":"lineCov","hits":"1","order":"1032","possible_hits":"1",},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    pub fn newString() This {","class":"lineCov","hits":"1","order":"1036","possible_hits":"1",},
{"lineNum":"  148","line":"        return This{ .String = {} };","class":"lineCov","hits":"1","order":"1037","possible_hits":"1",},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    pub fn newBoolean() This {","class":"lineCov","hits":"1","order":"1041","possible_hits":"1",},
{"lineNum":"  152","line":"        return This{ .Boolean = {} };","class":"lineCov","hits":"1","order":"1042","possible_hits":"1",},
{"lineNum":"  153","line":"    }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    pub fn newObject() This {","class":"lineCov","hits":"1","order":"1046","possible_hits":"1",},
{"lineNum":"  156","line":"        return This{ .Object = {} };","class":"lineCov","hits":"1","order":"1047","possible_hits":"1",},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    pub fn newArray(arr: ArrayType) This {","class":"lineCov","hits":"1","order":"1055","possible_hits":"1",},
{"lineNum":"  160","line":"        return This{ .Array = arr };","class":"lineCov","hits":"1","order":"1056","possible_hits":"1",},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    pub fn newClass(cls: ClassType) This {","class":"lineCov","hits":"1","order":"1391","possible_hits":"1",},
{"lineNum":"  164","line":"        return This{ .Class = cls };","class":"lineCov","hits":"1","order":"1392","possible_hits":"1",},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    pub fn newFunction(func: FunctionType) This {","class":"lineCov","hits":"1","order":"1080","possible_hits":"1",},
{"lineNum":"  168","line":"        return This{ .Function = func };","class":"lineCov","hits":"1","order":"1081","possible_hits":"1",},
{"lineNum":"  169","line":"    }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    pub fn newUnion(un: UnionType) This {","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":"  172","line":"        return This{ .Union = un };","class":"lineCov","hits":"1","order":"1065","possible_hits":"1",},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    pub fn newAlias(alias: AliasType) This {","class":"lineCov","hits":"1","order":"1265","possible_hits":"1",},
{"lineNum":"  176","line":"        return This{ .Alias = alias };","class":"lineCov","hits":"1","order":"1266","possible_hits":"1",},
{"lineNum":"  177","line":"    }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    pub fn newInterface(in: InterfaceType) This {","class":"lineCov","hits":"1","order":"1097","possible_hits":"1",},
{"lineNum":"  180","line":"        return This{ .Interface = in };","class":"lineCov","hits":"1","order":"1098","possible_hits":"1",},
{"lineNum":"  181","line":"    }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    pub fn isAssignableTo(self: This.Ptr, target: This.Ptr) bool {","class":"lineCov","hits":"1","order":"1179","possible_hits":"1",},
{"lineNum":"  184","line":"        if (self.getType() == .Undefined)","class":"lineCov","hits":"2","order":"1180","possible_hits":"2",},
{"lineNum":"  185","line":"            return true;","class":"lineCov","hits":"1","order":"1181","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        if (target.getType() == .Any)","class":"lineCov","hits":"2","order":"1195","possible_hits":"2",},
{"lineNum":"  188","line":"            return true;","class":"lineCov","hits":"1","order":"1196","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        if (self == target)","class":"lineCov","hits":"2","order":"1210","possible_hits":"2",},
{"lineNum":"  191","line":"            return true;","class":"lineCov","hits":"1","order":"1211","possible_hits":"1",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        switch (self.*) {","class":"lineCov","hits":"2","order":"1224","possible_hits":"2",},
{"lineNum":"  194","line":"            .Array => |arr| {","class":"lineCov","hits":"1","order":"1246","possible_hits":"1",},
{"lineNum":"  195","line":"                if (target.getType() != .Array)","class":"lineCov","hits":"2","order":"1247","possible_hits":"2",},
{"lineNum":"  196","line":"                    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"                if (arr.subtype.getType() == .Unknown)","class":"lineCov","hits":"2","order":"1248","possible_hits":"2",},
{"lineNum":"  199","line":"                    return true;","class":"lineCov","hits":"1","order":"1258","possible_hits":"1",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"                return arr.subtype.isAssignableTo(target.Array.subtype);","class":"lineCov","hits":"2","order":"1249","possible_hits":"2",},
{"lineNum":"  202","line":"            },"},
{"lineNum":"  203","line":"            .Union => |un| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"                for (un.tys) |ty|","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"                    if (!ty.isAssignableTo(target))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  206","line":"                        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"                return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"            },"},
{"lineNum":"  209","line":"            .Alias => |al| return al.ty.isAssignableTo(target),","class":"lineCov","hits":"1","order":"1270","possible_hits":"1",},
{"lineNum":"  210","line":"            .Interface => |in| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"                if (target.getType() == .Interface)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  212","line":"                    return in.isAssignableTo(target.Interface);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"            },"},
{"lineNum":"  214","line":"            else => {},"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        switch (target.*) {","class":"lineCov","hits":"2","order":"1225","possible_hits":"2",},
{"lineNum":"  218","line":"            .Union => |un| {","class":"lineCov","hits":"1","order":"1226","possible_hits":"1",},
{"lineNum":"  219","line":"                for (un.tys) |ty|","class":"lineCov","hits":"2","order":"1227","possible_hits":"2",},
{"lineNum":"  220","line":"                    if (self.isAssignableTo(ty))","class":"lineCov","hits":"2","order":"1228","possible_hits":"2",},
{"lineNum":"  221","line":"                        return true;","class":"lineCov","hits":"1","order":"1229","possible_hits":"1",},
{"lineNum":"  222","line":"            },"},
{"lineNum":"  223","line":"            .Alias => |al| return self.isAssignableTo(al.ty),","class":"lineCov","hits":"1","order":"1268","possible_hits":"1",},
{"lineNum":"  224","line":"            else => {},"},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        return false;","class":"lineCov","hits":"1","order":"1231","possible_hits":"1",},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    pub fn write(self: This, writer: anytype) anyerror!void {","class":"linePartCov","hits":"2","order":"1292","possible_hits":"4",},
{"lineNum":"  231","line":"        switch (self) {","class":"linePartCov","hits":"1","order":"1293","possible_hits":"4",},
{"lineNum":"  232","line":"            .Unknown => try writer.print(\"unknown\", .{}),","class":"linePartCov","hits":"1","order":"1294","possible_hits":"2",},
{"lineNum":"  233","line":"            .Any => try writer.print(\"any\", .{}),","class":"linePartCov","hits":"1","order":"1304","possible_hits":"2",},
{"lineNum":"  234","line":"            .Void => try writer.print(\"void\", .{}),","class":"linePartCov","hits":"1","order":"1310","possible_hits":"2",},
{"lineNum":"  235","line":"            .Null => try writer.print(\"null\", .{}),","class":"linePartCov","hits":"1","order":"1316","possible_hits":"2",},
{"lineNum":"  236","line":"            .Undefined => try writer.print(\"undefined\", .{}),","class":"linePartCov","hits":"1","order":"1322","possible_hits":"2",},
{"lineNum":"  237","line":"            .Never => try writer.print(\"never\", .{}),","class":"linePartCov","hits":"1","order":"1328","possible_hits":"2",},
{"lineNum":"  238","line":"            .Number => try writer.print(\"number\", .{}),","class":"linePartCov","hits":"1","order":"1334","possible_hits":"2",},
{"lineNum":"  239","line":"            .String => try writer.print(\"string\", .{}),","class":"linePartCov","hits":"1","order":"1340","possible_hits":"2",},
{"lineNum":"  240","line":"            .Boolean => try writer.print(\"boolean\", .{}),","class":"linePartCov","hits":"1","order":"1346","possible_hits":"2",},
{"lineNum":"  241","line":"            .Object => try writer.print(\"object\", .{}),","class":"linePartCov","hits":"1","order":"1352","possible_hits":"2",},
{"lineNum":"  242","line":"            .Tuple => try writer.print(\"tuple\", .{}), // TODO","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":"            .Array => |arr| try arr.write(writer),","class":"linePartCov","hits":"1","order":"1359","possible_hits":"2",},
{"lineNum":"  244","line":"            .Class => |cls| try cls.write(writer),","class":"linePartCov","hits":"1","order":"1395","possible_hits":"2",},
{"lineNum":"  245","line":"            .Enum => try writer.print(\"enum\", .{}), // TODO","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":"            .Function => |func| try func.write(writer),","class":"linePartCov","hits":"1","order":"1406","possible_hits":"2",},
{"lineNum":"  247","line":"            .Union => |un| try un.write(writer),","class":"linePartCov","hits":"1","order":"1374","possible_hits":"2",},
{"lineNum":"  248","line":"            .Alias => |al| try al.write(writer),","class":"linePartCov","hits":"1","order":"1429","possible_hits":"2",},
{"lineNum":"  249","line":"            .Interface => |in| try in.write(writer),","class":"linePartCov","hits":"1","order":"1444","possible_hits":"2",},
{"lineNum":"  250","line":"        }"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    pub fn dump(self: This) void {"},
{"lineNum":"  254","line":"        const writer = std.io.getStdOut().writer();"},
{"lineNum":"  255","line":"        self.write(writer) catch unreachable;"},
{"lineNum":"  256","line":"        writer.print(\"\\n\", .{}) catch unreachable;"},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":"};"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"test \"can detect hoisted sentinel\" {","class":"lineCov","hits":"2","order":"992","possible_hits":"2",},
{"lineNum":"  261","line":"    try expect(Type.hoistedSentinel.isHoistedSentinel());","class":"lineCov","hits":"1","order":"993","possible_hits":"1",},
{"lineNum":"  262","line":"    try expect(!Type.newUnknown().isHoistedSentinel());","class":"lineCov","hits":"1","order":"996","possible_hits":"1",},
{"lineNum":"  263","line":"}"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"test \"can create an unknown type\" {","class":"lineCov","hits":"2","order":"999","possible_hits":"2",},
{"lineNum":"  266","line":"    const ty = Type.newUnknown();","class":"lineCov","hits":"1","order":"1000","possible_hits":"1",},
{"lineNum":"  267","line":"    try expectEqual(Type.Type.Unknown, ty.getType());","class":"lineCov","hits":"1","order":"1001","possible_hits":"1",},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"test \"can create an any type\" {","class":"lineCov","hits":"2","order":"1004","possible_hits":"2",},
{"lineNum":"  271","line":"    const ty = Type.newAny();","class":"lineCov","hits":"1","order":"1005","possible_hits":"1",},
{"lineNum":"  272","line":"    try expectEqual(Type.Type.Any, ty.getType());","class":"lineCov","hits":"1","order":"1008","possible_hits":"1",},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"test \"can create a void type\" {","class":"lineCov","hits":"2","order":"1009","possible_hits":"2",},
{"lineNum":"  276","line":"    const ty = Type.newVoid();","class":"lineCov","hits":"1","order":"1010","possible_hits":"1",},
{"lineNum":"  277","line":"    try expectEqual(Type.Type.Void, ty.getType());","class":"lineCov","hits":"1","order":"1013","possible_hits":"1",},
{"lineNum":"  278","line":"}"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"test \"can create a null type\" {","class":"lineCov","hits":"2","order":"1014","possible_hits":"2",},
{"lineNum":"  281","line":"    const ty = Type.newNull();","class":"lineCov","hits":"1","order":"1015","possible_hits":"1",},
{"lineNum":"  282","line":"    try expectEqual(Type.Type.Null, ty.getType());","class":"lineCov","hits":"1","order":"1018","possible_hits":"1",},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"test \"can create an undefined type\" {","class":"lineCov","hits":"2","order":"1019","possible_hits":"2",},
{"lineNum":"  286","line":"    const ty = Type.newUndefined();","class":"lineCov","hits":"1","order":"1020","possible_hits":"1",},
{"lineNum":"  287","line":"    try expectEqual(Type.Type.Undefined, ty.getType());","class":"lineCov","hits":"1","order":"1023","possible_hits":"1",},
{"lineNum":"  288","line":"}"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"test \"can create a never type\" {","class":"lineCov","hits":"2","order":"1024","possible_hits":"2",},
{"lineNum":"  291","line":"    const ty = Type.newNever();","class":"lineCov","hits":"1","order":"1025","possible_hits":"1",},
{"lineNum":"  292","line":"    try expectEqual(Type.Type.Never, ty.getType());","class":"lineCov","hits":"1","order":"1028","possible_hits":"1",},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"test \"can create a number type\" {","class":"lineCov","hits":"2","order":"1029","possible_hits":"2",},
{"lineNum":"  296","line":"    const ty = Type.newNumber();","class":"lineCov","hits":"1","order":"1030","possible_hits":"1",},
{"lineNum":"  297","line":"    try expectEqual(Type.Type.Number, ty.getType());","class":"lineCov","hits":"1","order":"1033","possible_hits":"1",},
{"lineNum":"  298","line":"}"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"test \"can create a string type\" {","class":"lineCov","hits":"2","order":"1034","possible_hits":"2",},
{"lineNum":"  301","line":"    const ty = Type.newString();","class":"lineCov","hits":"1","order":"1035","possible_hits":"1",},
{"lineNum":"  302","line":"    try expectEqual(Type.Type.String, ty.getType());","class":"lineCov","hits":"1","order":"1038","possible_hits":"1",},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"test \"can create a boolean type\" {","class":"lineCov","hits":"2","order":"1039","possible_hits":"2",},
{"lineNum":"  306","line":"    const ty = Type.newBoolean();","class":"lineCov","hits":"1","order":"1040","possible_hits":"1",},
{"lineNum":"  307","line":"    try expectEqual(Type.Type.Boolean, ty.getType());","class":"lineCov","hits":"1","order":"1043","possible_hits":"1",},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"test \"can create an object type\" {","class":"lineCov","hits":"2","order":"1044","possible_hits":"2",},
{"lineNum":"  311","line":"    const ty = Type.newObject();","class":"lineCov","hits":"1","order":"1045","possible_hits":"1",},
{"lineNum":"  312","line":"    try expectEqual(Type.Type.Object, ty.getType());","class":"lineCov","hits":"1","order":"1048","possible_hits":"1",},
{"lineNum":"  313","line":"}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"test \"can create an array type\" {","class":"lineCov","hits":"2","order":"1049","possible_hits":"2",},
{"lineNum":"  316","line":"    const sub = Type.newBoolean();","class":"lineCov","hits":"1","order":"1050","possible_hits":"1",},
{"lineNum":"  317","line":"    const ty = Type.newArray(Type.ArrayType.new(&sub));","class":"lineCov","hits":"1","order":"1051","possible_hits":"1",},
{"lineNum":"  318","line":"    try expectEqual(Type.Type.Array, ty.getType());","class":"lineCov","hits":"1","order":"1057","possible_hits":"1",},
{"lineNum":"  319","line":"    try expectEqual(Type.Type.Boolean, ty.Array.subtype.getType());","class":"lineCov","hits":"2","order":"1058","possible_hits":"2",},
{"lineNum":"  320","line":"}"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"test \"can create a union type\" {","class":"lineCov","hits":"2","order":"1059","possible_hits":"2",},
{"lineNum":"  323","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1060","possible_hits":"1",},
{"lineNum":"  324","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1061","possible_hits":"1",},
{"lineNum":"  325","line":"    const ty = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":"  326","line":"        .tys = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1062","possible_hits":"1",},
{"lineNum":"  327","line":"    });"},
{"lineNum":"  328","line":"    try expectEqual(Type.Type.Union, ty.getType());","class":"lineCov","hits":"1","order":"1066","possible_hits":"1",},
{"lineNum":"  329","line":"    try expectEqual(@intCast(usize, 2), ty.Union.tys.len);","class":"lineCov","hits":"2","order":"1067","possible_hits":"2",},
{"lineNum":"  330","line":"    try expectEqual(Type.Type.String, ty.Union.tys[0].getType());","class":"lineCov","hits":"2","order":"1068","possible_hits":"2",},
{"lineNum":"  331","line":"    try expectEqual(Type.Type.Number, ty.Union.tys[1].getType());","class":"lineCov","hits":"2","order":"1069","possible_hits":"2",},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"test \"can create a function type\" {","class":"lineCov","hits":"2","order":"1070","possible_hits":"2",},
{"lineNum":"  335","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1071","possible_hits":"1",},
{"lineNum":"  336","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1072","possible_hits":"1",},
{"lineNum":"  337","line":"    const ty = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"1","order":"1074","possible_hits":"1",},
{"lineNum":"  338","line":"        &str,"},
{"lineNum":"  339","line":"        &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1073","possible_hits":"1",},
{"lineNum":"  340","line":"        false,"},
{"lineNum":"  341","line":"    ));"},
{"lineNum":"  342","line":"    try expectEqual(Type.Type.Function, ty.getType());","class":"lineCov","hits":"1","order":"1082","possible_hits":"1",},
{"lineNum":"  343","line":"    try expectEqual(Type.Type.String, ty.Function.ret.getType());","class":"lineCov","hits":"2","order":"1083","possible_hits":"2",},
{"lineNum":"  344","line":"    try expectEqual(@intCast(usize, 2), ty.Function.args.len);","class":"lineCov","hits":"2","order":"1084","possible_hits":"2",},
{"lineNum":"  345","line":"    try expectEqual(Type.Type.String, ty.Function.args[0].getType());","class":"lineCov","hits":"2","order":"1085","possible_hits":"2",},
{"lineNum":"  346","line":"    try expectEqual(Type.Type.Number, ty.Function.args[1].getType());","class":"lineCov","hits":"2","order":"1086","possible_hits":"2",},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"test \"can create an interface type\" {","class":"lineCov","hits":"2","order":"1087","possible_hits":"2",},
{"lineNum":"  350","line":"    const number = Type.newNumber();","class":"lineCov","hits":"1","order":"1088","possible_hits":"1",},
{"lineNum":"  351","line":"    const boolean = Type.newBoolean();","class":"lineCov","hits":"1","order":"1089","possible_hits":"1",},
{"lineNum":"  352","line":"    const ty = Type.newInterface(","class":"lineCov","hits":"1","order":"1096","possible_hits":"1",},
{"lineNum":"  353","line":"        Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1092","possible_hits":"1",},
{"lineNum":"  354","line":"            Type.InterfaceType.Member{ .name = \"a\", .ty = &number },","class":"lineCov","hits":"1","order":"1090","possible_hits":"1",},
{"lineNum":"  355","line":"            Type.InterfaceType.Member{ .name = \"b\", .ty = &boolean },","class":"lineCov","hits":"1","order":"1091","possible_hits":"1",},
{"lineNum":"  356","line":"        }),"},
{"lineNum":"  357","line":"    );"},
{"lineNum":"  358","line":"    try expectEqual(Type.Type.Interface, ty.getType());","class":"lineCov","hits":"1","order":"1099","possible_hits":"1",},
{"lineNum":"  359","line":"    try expectEqual(@intCast(usize, 2), ty.Interface.members.len);","class":"lineCov","hits":"2","order":"1100","possible_hits":"2",},
{"lineNum":"  360","line":"    try expectEqualStrings(\"a\", ty.Interface.members[0].name);","class":"lineCov","hits":"2","order":"1101","possible_hits":"2",},
{"lineNum":"  361","line":"    try expectEqual(Type.Type.Number, ty.Interface.members[0].ty.getType());","class":"lineCov","hits":"2","order":"1102","possible_hits":"2",},
{"lineNum":"  362","line":"    try expectEqualStrings(\"b\", ty.Interface.members[1].name);","class":"lineCov","hits":"2","order":"1103","possible_hits":"2",},
{"lineNum":"  363","line":"    try expectEqual(Type.Type.Boolean, ty.Interface.members[1].ty.getType());","class":"lineCov","hits":"2","order":"1104","possible_hits":"2",},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"test \"can compare Type equality\" {","class":"lineCov","hits":"2","order":"1105","possible_hits":"2",},
{"lineNum":"  367","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1106","possible_hits":"1",},
{"lineNum":"  368","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1107","possible_hits":"1",},
{"lineNum":"  369","line":"    const f1 = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"1","order":"1109","possible_hits":"1",},
{"lineNum":"  370","line":"        &str,"},
{"lineNum":"  371","line":"        &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1108","possible_hits":"1",},
{"lineNum":"  372","line":"        false,"},
{"lineNum":"  373","line":"    ));"},
{"lineNum":"  374","line":"    const f2 = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"1","order":"1111","possible_hits":"1",},
{"lineNum":"  375","line":"        &num,"},
{"lineNum":"  376","line":"        &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1110","possible_hits":"1",},
{"lineNum":"  377","line":"        false,"},
{"lineNum":"  378","line":"    ));"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    const strp = &str;","class":"lineCov","hits":"1","order":"1112","possible_hits":"1",},
{"lineNum":"  381","line":"    const nump = &num;","class":"lineCov","hits":"1","order":"1113","possible_hits":"1",},
{"lineNum":"  382","line":"    const f1p = &f1;","class":"lineCov","hits":"1","order":"1114","possible_hits":"1",},
{"lineNum":"  383","line":"    const f2p = &f2;","class":"lineCov","hits":"1","order":"1115","possible_hits":"1",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    try expect(strp.eql(strp));","class":"lineCov","hits":"1","order":"1116","possible_hits":"1",},
{"lineNum":"  386","line":"    try expect(!strp.eql(nump));","class":"lineCov","hits":"1","order":"1119","possible_hits":"1",},
{"lineNum":"  387","line":"    try expect(!nump.eql(strp));","class":"lineCov","hits":"1","order":"1120","possible_hits":"1",},
{"lineNum":"  388","line":"    try expect(!strp.eql(f1p));","class":"lineCov","hits":"1","order":"1121","possible_hits":"1",},
{"lineNum":"  389","line":"    try expect(!f1p.eql(f2p));","class":"lineCov","hits":"1","order":"1122","possible_hits":"1",},
{"lineNum":"  390","line":"    try expect(f1p.eql(f1p));","class":"lineCov","hits":"1","order":"1123","possible_hits":"1",},
{"lineNum":"  391","line":"    try expect(f2p.eql(f2p));","class":"lineCov","hits":"1","order":"1124","possible_hits":"1",},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    const a = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1125","possible_hits":"1",},
{"lineNum":"  394","line":"    const b = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1126","possible_hits":"1",},
{"lineNum":"  395","line":"    const c = Type{ .Array = Type.ArrayType{ .subtype = nump } };","class":"lineCov","hits":"1","order":"1127","possible_hits":"1",},
{"lineNum":"  396","line":"    try expect((&a).eql(&b));","class":"lineCov","hits":"1","order":"1128","possible_hits":"1",},
{"lineNum":"  397","line":"    try expect(!(&a).eql(&c));","class":"lineCov","hits":"1","order":"1129","possible_hits":"1",},
{"lineNum":"  398","line":"}"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"test \"can hash Types\" {","class":"lineCov","hits":"2","order":"1130","possible_hits":"2",},
{"lineNum":"  401","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1131","possible_hits":"1",},
{"lineNum":"  402","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1132","possible_hits":"1",},
{"lineNum":"  403","line":"    const f1 = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"1","order":"1134","possible_hits":"1",},
{"lineNum":"  404","line":"        &str,"},
{"lineNum":"  405","line":"        &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1133","possible_hits":"1",},
{"lineNum":"  406","line":"        false,"},
{"lineNum":"  407","line":"    ));"},
{"lineNum":"  408","line":"    const f2 = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"1","order":"1136","possible_hits":"1",},
{"lineNum":"  409","line":"        &num,"},
{"lineNum":"  410","line":"        &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1135","possible_hits":"1",},
{"lineNum":"  411","line":"        false,"},
{"lineNum":"  412","line":"    ));"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    const strp = &str;","class":"lineCov","hits":"1","order":"1137","possible_hits":"1",},
{"lineNum":"  415","line":"    const nump = &num;","class":"lineCov","hits":"1","order":"1138","possible_hits":"1",},
{"lineNum":"  416","line":"    const f1p = &f1;","class":"lineCov","hits":"1","order":"1139","possible_hits":"1",},
{"lineNum":"  417","line":"    const f2p = &f2;","class":"lineCov","hits":"1","order":"1140","possible_hits":"1",},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    try expect(strp.hash() == strp.hash());","class":"lineCov","hits":"1","order":"1141","possible_hits":"1",},
{"lineNum":"  420","line":"    try expect(strp.hash() != nump.hash());","class":"lineCov","hits":"1","order":"1145","possible_hits":"1",},
{"lineNum":"  421","line":"    try expect(strp.hash() != f1p.hash());","class":"lineCov","hits":"1","order":"1146","possible_hits":"1",},
{"lineNum":"  422","line":"    try expect(f1p.hash() == f1p.hash());","class":"lineCov","hits":"1","order":"1153","possible_hits":"1",},
{"lineNum":"  423","line":"    try expect(f1p.hash() != f2p.hash());","class":"lineCov","hits":"1","order":"1154","possible_hits":"1",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    const a = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"  426","line":"    const b = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1156","possible_hits":"1",},
{"lineNum":"  427","line":"    const c = Type{ .Array = Type.ArrayType{ .subtype = nump } };","class":"lineCov","hits":"1","order":"1157","possible_hits":"1",},
{"lineNum":"  428","line":"    try expect((&a).hash() == (&b).hash());","class":"lineCov","hits":"1","order":"1158","possible_hits":"1",},
{"lineNum":"  429","line":"    try expect((&a).hash() != (&c).hash());","class":"lineCov","hits":"1","order":"1162","possible_hits":"1",},
{"lineNum":"  430","line":"}"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"const AssignableTestCase = struct {"},
{"lineNum":"  433","line":"    const This = @This();"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    fromType: Type.Ptr,"},
{"lineNum":"  436","line":"    toType: Type.Ptr,"},
{"lineNum":"  437","line":"    isAssignable: bool,"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    pub fn new(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1171","possible_hits":"1",},
{"lineNum":"  440","line":"        return This{","class":"lineCov","hits":"1","order":"1175","possible_hits":"1",},
{"lineNum":"  441","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1172","possible_hits":"1",},
{"lineNum":"  442","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1173","possible_hits":"1",},
{"lineNum":"  443","line":"            .isAssignable = true,","class":"lineCov","hits":"1","order":"1174","possible_hits":"1",},
{"lineNum":"  444","line":"        };"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    pub fn newF(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1233","possible_hits":"1",},
{"lineNum":"  448","line":"        return This{","class":"lineCov","hits":"1","order":"1237","possible_hits":"1",},
{"lineNum":"  449","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1234","possible_hits":"1",},
{"lineNum":"  450","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1235","possible_hits":"1",},
{"lineNum":"  451","line":"            .isAssignable = false,","class":"lineCov","hits":"1","order":"1236","possible_hits":"1",},
{"lineNum":"  452","line":"        };"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    pub fn run(self: This) !void {","class":"lineCov","hits":"2","order":"1176","possible_hits":"2",},
{"lineNum":"  456","line":"        try expectEqual(","class":"lineCov","hits":"1","order":"1182","possible_hits":"1",},
{"lineNum":"  457","line":"            self.isAssignable,","class":"lineCov","hits":"1","order":"1177","possible_hits":"1",},
{"lineNum":"  458","line":"            self.fromType.isAssignableTo(self.toType),","class":"lineCov","hits":"1","order":"1178","possible_hits":"1",},
{"lineNum":"  459","line":"        );"},
{"lineNum":"  460","line":"    }"},
{"lineNum":"  461","line":"};"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"test \"undefined is assignable to all other types\" {","class":"lineCov","hits":"2","order":"1163","possible_hits":"2",},
{"lineNum":"  464","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1164","possible_hits":"1",},
{"lineNum":"  465","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1165","possible_hits":"1",},
{"lineNum":"  466","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1166","possible_hits":"1",},
{"lineNum":"  467","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1167","possible_hits":"1",},
{"lineNum":"  468","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1168","possible_hits":"1",},
{"lineNum":"  469","line":"    const u = Type.newUndefined();","class":"lineCov","hits":"1","order":"1169","possible_hits":"1",},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    try AssignableTestCase.new(&u, &n).run();","class":"lineCov","hits":"1","order":"1170","possible_hits":"1",},
{"lineNum":"  472","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1183","possible_hits":"1",},
{"lineNum":"  473","line":"    try AssignableTestCase.new(&u, &b).run();","class":"lineCov","hits":"1","order":"1184","possible_hits":"1",},
{"lineNum":"  474","line":"    try AssignableTestCase.new(&u, &v).run();","class":"lineCov","hits":"1","order":"1185","possible_hits":"1",},
{"lineNum":"  475","line":"    try AssignableTestCase.new(&u, &s).run();","class":"lineCov","hits":"1","order":"1186","possible_hits":"1",},
{"lineNum":"  476","line":"}"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"test \"all types are assignable to \'any\'\" {","class":"lineCov","hits":"2","order":"1187","possible_hits":"2",},
{"lineNum":"  479","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1188","possible_hits":"1",},
{"lineNum":"  480","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1189","possible_hits":"1",},
{"lineNum":"  481","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1190","possible_hits":"1",},
{"lineNum":"  482","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1191","possible_hits":"1",},
{"lineNum":"  483","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1192","possible_hits":"1",},
{"lineNum":"  484","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1193","possible_hits":"1",},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    try AssignableTestCase.new(&n, &a).run();","class":"lineCov","hits":"1","order":"1194","possible_hits":"1",},
{"lineNum":"  487","line":"    try AssignableTestCase.new(&b, &a).run();","class":"lineCov","hits":"1","order":"1197","possible_hits":"1",},
{"lineNum":"  488","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1198","possible_hits":"1",},
{"lineNum":"  489","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1199","possible_hits":"1",},
{"lineNum":"  490","line":"    try AssignableTestCase.new(&v, &a).run();","class":"lineCov","hits":"1","order":"1200","possible_hits":"1",},
{"lineNum":"  491","line":"    try AssignableTestCase.new(&s, &a).run();","class":"lineCov","hits":"1","order":"1201","possible_hits":"1",},
{"lineNum":"  492","line":"}"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"test \"types are assignable to themselves\" {","class":"lineCov","hits":"2","order":"1202","possible_hits":"2",},
{"lineNum":"  495","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1203","possible_hits":"1",},
{"lineNum":"  496","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1204","possible_hits":"1",},
{"lineNum":"  497","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1205","possible_hits":"1",},
{"lineNum":"  498","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1206","possible_hits":"1",},
{"lineNum":"  499","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1207","possible_hits":"1",},
{"lineNum":"  500","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1208","possible_hits":"1",},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    try AssignableTestCase.new(&n, &n).run();","class":"lineCov","hits":"1","order":"1209","possible_hits":"1",},
{"lineNum":"  503","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1212","possible_hits":"1",},
{"lineNum":"  504","line":"    try AssignableTestCase.new(&b, &b).run();","class":"lineCov","hits":"1","order":"1213","possible_hits":"1",},
{"lineNum":"  505","line":"    try AssignableTestCase.new(&u, &u).run();","class":"lineCov","hits":"1","order":"1214","possible_hits":"1",},
{"lineNum":"  506","line":"    try AssignableTestCase.new(&v, &v).run();","class":"lineCov","hits":"1","order":"1215","possible_hits":"1",},
{"lineNum":"  507","line":"    try AssignableTestCase.new(&s, &s).run();","class":"lineCov","hits":"1","order":"1216","possible_hits":"1",},
{"lineNum":"  508","line":"}"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"test \"unions can be assigned from any of their subtypes\" {","class":"lineCov","hits":"2","order":"1217","possible_hits":"2",},
{"lineNum":"  511","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1218","possible_hits":"1",},
{"lineNum":"  512","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1219","possible_hits":"1",},
{"lineNum":"  513","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1220","possible_hits":"1",},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"    const u = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1222","possible_hits":"1",},
{"lineNum":"  516","line":"        .tys = &[_]Type.Ptr{ &n, &b },","class":"lineCov","hits":"1","order":"1221","possible_hits":"1",},
{"lineNum":"  517","line":"    });"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    try AssignableTestCase.new(&n, &u).run();","class":"lineCov","hits":"1","order":"1223","possible_hits":"1",},
{"lineNum":"  520","line":"    try AssignableTestCase.new(&b, &u).run();","class":"lineCov","hits":"1","order":"1230","possible_hits":"1",},
{"lineNum":"  521","line":"    try AssignableTestCase.newF(&s, &u).run();","class":"lineCov","hits":"1","order":"1232","possible_hits":"1",},
{"lineNum":"  522","line":"}"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"test \"array subtypes must match for assignment\" {","class":"lineCov","hits":"2","order":"1238","possible_hits":"2",},
{"lineNum":"  525","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1239","possible_hits":"1",},
{"lineNum":"  526","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1240","possible_hits":"1",},
{"lineNum":"  527","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1241","possible_hits":"1",},
{"lineNum":"  528","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1242","possible_hits":"1",},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"    try AssignableTestCase.new(&na, &na).run();","class":"lineCov","hits":"1","order":"1243","possible_hits":"1",},
{"lineNum":"  531","line":"    try AssignableTestCase.new(&ba, &ba).run();","class":"lineCov","hits":"1","order":"1244","possible_hits":"1",},
{"lineNum":"  532","line":"    try AssignableTestCase.newF(&na, &ba).run();","class":"lineCov","hits":"1","order":"1245","possible_hits":"1",},
{"lineNum":"  533","line":"}"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"test \"unknown[] can be assigned to any array type\" {","class":"lineCov","hits":"2","order":"1250","possible_hits":"2",},
{"lineNum":"  536","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1251","possible_hits":"1",},
{"lineNum":"  537","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1252","possible_hits":"1",},
{"lineNum":"  538","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1253","possible_hits":"1",},
{"lineNum":"  539","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1254","possible_hits":"1",},
{"lineNum":"  540","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1255","possible_hits":"1",},
{"lineNum":"  541","line":"    const ua = Type.newArray(Type.ArrayType{ .subtype = &u });","class":"lineCov","hits":"1","order":"1256","possible_hits":"1",},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    try AssignableTestCase.new(&ua, &na).run();","class":"lineCov","hits":"1","order":"1257","possible_hits":"1",},
{"lineNum":"  544","line":"    try AssignableTestCase.new(&ua, &ba).run();","class":"lineCov","hits":"1","order":"1259","possible_hits":"1",},
{"lineNum":"  545","line":"    try AssignableTestCase.newF(&na, &ua).run();","class":"lineCov","hits":"1","order":"1260","possible_hits":"1",},
{"lineNum":"  546","line":"}"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"test \"aliases and their subtypes are interchangeable in assignments\" {","class":"lineCov","hits":"2","order":"1261","possible_hits":"2",},
{"lineNum":"  549","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1262","possible_hits":"1",},
{"lineNum":"  550","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1263","possible_hits":"1",},
{"lineNum":"  551","line":"    const na = Type.newAlias(Type.AliasType{ .name = \"a\", .ty = &n });","class":"lineCov","hits":"1","order":"1264","possible_hits":"1",},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    try AssignableTestCase.new(&n, &na).run();","class":"lineCov","hits":"1","order":"1267","possible_hits":"1",},
{"lineNum":"  554","line":"    try AssignableTestCase.new(&na, &n).run();","class":"lineCov","hits":"1","order":"1269","possible_hits":"1",},
{"lineNum":"  555","line":"    try AssignableTestCase.newF(&b, &na).run();","class":"lineCov","hits":"1","order":"1271","possible_hits":"1",},
{"lineNum":"  556","line":"    try AssignableTestCase.newF(&na, &b).run();","class":"lineCov","hits":"1","order":"1272","possible_hits":"1",},
{"lineNum":"  557","line":"}"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"test \"other type assignments are invalid\" {","class":"lineCov","hits":"2","order":"1273","possible_hits":"2",},
{"lineNum":"  560","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1274","possible_hits":"1",},
{"lineNum":"  561","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1275","possible_hits":"1",},
{"lineNum":"  562","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1276","possible_hits":"1",},
{"lineNum":"  563","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1277","possible_hits":"1",},
{"lineNum":"  564","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1278","possible_hits":"1",},
{"lineNum":"  565","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1279","possible_hits":"1",},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"    try AssignableTestCase.newF(&n, &s).run();","class":"lineCov","hits":"1","order":"1280","possible_hits":"1",},
{"lineNum":"  568","line":"    try AssignableTestCase.newF(&b, &v).run();","class":"lineCov","hits":"1","order":"1281","possible_hits":"1",},
{"lineNum":"  569","line":"    try AssignableTestCase.newF(&a, &u).run();","class":"lineCov","hits":"1","order":"1282","possible_hits":"1",},
{"lineNum":"  570","line":"    try AssignableTestCase.newF(&u, &n).run();","class":"lineCov","hits":"1","order":"1283","possible_hits":"1",},
{"lineNum":"  571","line":"    try AssignableTestCase.newF(&v, &b).run();","class":"lineCov","hits":"1","order":"1284","possible_hits":"1",},
{"lineNum":"  572","line":"}"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"const WriteTypeTestCase = struct {"},
{"lineNum":"  575","line":"    ty: Type,"},
{"lineNum":"  576","line":"    expected: []const u8,"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    pub fn run(self: WriteTypeTestCase) !void {","class":"lineCov","hits":"3","order":"1289","possible_hits":"3",},
{"lineNum":"  579","line":"        const ctx = try WriteContext(.{}).new(std.testing.allocator);","class":"lineCov","hits":"1","order":"1290","possible_hits":"1",},
{"lineNum":"  580","line":"        defer ctx.deinit();","class":"linePartCov","hits":"1","order":"1298","possible_hits":"4",},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"        try self.ty.write(ctx.writer());","class":"linePartCov","hits":"1","order":"1291","possible_hits":"2",},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"        const str = try ctx.toString();","class":"linePartCov","hits":"1","order":"1295","possible_hits":"2",},
{"lineNum":"  585","line":"        defer ctx.freeString(str);","class":"linePartCov","hits":"1","order":"1297","possible_hits":"2",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"        try expectEqualStrings(self.expected, str);","class":"linePartCov","hits":"1","order":"1296","possible_hits":"2",},
{"lineNum":"  588","line":"    }"},
{"lineNum":"  589","line":"};"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"test \"can write an unknown type\" {","class":"lineCov","hits":"2","order":"1285","possible_hits":"2",},
{"lineNum":"  592","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1299","possible_hits":"1",},
{"lineNum":"  593","line":"        .ty = Type.newUnknown(),","class":"lineCov","hits":"1","order":"1286","possible_hits":"1",},
{"lineNum":"  594","line":"        .expected = \"unknown\",","class":"lineCov","hits":"1","order":"1287","possible_hits":"1",},
{"lineNum":"  595","line":"    }).run();","class":"lineCov","hits":"1","order":"1288","possible_hits":"1",},
{"lineNum":"  596","line":"}"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"test \"can write an any type\" {","class":"lineCov","hits":"2","order":"1300","possible_hits":"2",},
{"lineNum":"  599","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1305","possible_hits":"1",},
{"lineNum":"  600","line":"        .ty = Type.newAny(),","class":"lineCov","hits":"1","order":"1301","possible_hits":"1",},
{"lineNum":"  601","line":"        .expected = \"any\",","class":"lineCov","hits":"1","order":"1302","possible_hits":"1",},
{"lineNum":"  602","line":"    }).run();","class":"lineCov","hits":"1","order":"1303","possible_hits":"1",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"test \"can write a void type\" {","class":"lineCov","hits":"2","order":"1306","possible_hits":"2",},
{"lineNum":"  606","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1311","possible_hits":"1",},
{"lineNum":"  607","line":"        .ty = Type.newVoid(),","class":"lineCov","hits":"1","order":"1307","possible_hits":"1",},
{"lineNum":"  608","line":"        .expected = \"void\",","class":"lineCov","hits":"1","order":"1308","possible_hits":"1",},
{"lineNum":"  609","line":"    }).run();","class":"lineCov","hits":"1","order":"1309","possible_hits":"1",},
{"lineNum":"  610","line":"}"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"test \"can write a null type\" {","class":"lineCov","hits":"2","order":"1312","possible_hits":"2",},
{"lineNum":"  613","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1317","possible_hits":"1",},
{"lineNum":"  614","line":"        .ty = Type.newNull(),","class":"lineCov","hits":"1","order":"1313","possible_hits":"1",},
{"lineNum":"  615","line":"        .expected = \"null\",","class":"lineCov","hits":"1","order":"1314","possible_hits":"1",},
{"lineNum":"  616","line":"    }).run();","class":"lineCov","hits":"1","order":"1315","possible_hits":"1",},
{"lineNum":"  617","line":"}"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"test \"can write an undefined type\" {","class":"lineCov","hits":"2","order":"1318","possible_hits":"2",},
{"lineNum":"  620","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1323","possible_hits":"1",},
{"lineNum":"  621","line":"        .ty = Type.newUndefined(),","class":"lineCov","hits":"1","order":"1319","possible_hits":"1",},
{"lineNum":"  622","line":"        .expected = \"undefined\",","class":"lineCov","hits":"1","order":"1320","possible_hits":"1",},
{"lineNum":"  623","line":"    }).run();","class":"lineCov","hits":"1","order":"1321","possible_hits":"1",},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"can write a never type\" {","class":"lineCov","hits":"2","order":"1324","possible_hits":"2",},
{"lineNum":"  627","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1329","possible_hits":"1",},
{"lineNum":"  628","line":"        .ty = Type.newNever(),","class":"lineCov","hits":"1","order":"1325","possible_hits":"1",},
{"lineNum":"  629","line":"        .expected = \"never\",","class":"lineCov","hits":"1","order":"1326","possible_hits":"1",},
{"lineNum":"  630","line":"    }).run();","class":"lineCov","hits":"1","order":"1327","possible_hits":"1",},
{"lineNum":"  631","line":"}"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"test \"can write a number type\" {","class":"lineCov","hits":"2","order":"1330","possible_hits":"2",},
{"lineNum":"  634","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1335","possible_hits":"1",},
{"lineNum":"  635","line":"        .ty = Type.newNumber(),","class":"lineCov","hits":"1","order":"1331","possible_hits":"1",},
{"lineNum":"  636","line":"        .expected = \"number\",","class":"lineCov","hits":"1","order":"1332","possible_hits":"1",},
{"lineNum":"  637","line":"    }).run();","class":"lineCov","hits":"1","order":"1333","possible_hits":"1",},
{"lineNum":"  638","line":"}"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"test \"can write a string type\" {","class":"lineCov","hits":"2","order":"1336","possible_hits":"2",},
{"lineNum":"  641","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1341","possible_hits":"1",},
{"lineNum":"  642","line":"        .ty = Type.newString(),","class":"lineCov","hits":"1","order":"1337","possible_hits":"1",},
{"lineNum":"  643","line":"        .expected = \"string\",","class":"lineCov","hits":"1","order":"1338","possible_hits":"1",},
{"lineNum":"  644","line":"    }).run();","class":"lineCov","hits":"1","order":"1339","possible_hits":"1",},
{"lineNum":"  645","line":"}"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"test \"can write a boolean type\" {","class":"lineCov","hits":"2","order":"1342","possible_hits":"2",},
{"lineNum":"  648","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1347","possible_hits":"1",},
{"lineNum":"  649","line":"        .ty = Type.newBoolean(),","class":"lineCov","hits":"1","order":"1343","possible_hits":"1",},
{"lineNum":"  650","line":"        .expected = \"boolean\",","class":"lineCov","hits":"1","order":"1344","possible_hits":"1",},
{"lineNum":"  651","line":"    }).run();","class":"lineCov","hits":"1","order":"1345","possible_hits":"1",},
{"lineNum":"  652","line":"}"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"test \"can write an object type\" {","class":"lineCov","hits":"2","order":"1348","possible_hits":"2",},
{"lineNum":"  655","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1353","possible_hits":"1",},
{"lineNum":"  656","line":"        .ty = Type.newObject(),","class":"lineCov","hits":"1","order":"1349","possible_hits":"1",},
{"lineNum":"  657","line":"        .expected = \"object\",","class":"lineCov","hits":"1","order":"1350","possible_hits":"1",},
{"lineNum":"  658","line":"    }).run();","class":"lineCov","hits":"1","order":"1351","possible_hits":"1",},
{"lineNum":"  659","line":"}"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"// TODO: Add test for writing a tuple type"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"test \"can write an array type\" {","class":"lineCov","hits":"2","order":"1354","possible_hits":"2",},
{"lineNum":"  664","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1355","possible_hits":"1",},
{"lineNum":"  665","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1364","possible_hits":"1",},
{"lineNum":"  666","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &n }),","class":"lineCov","hits":"1","order":"1356","possible_hits":"1",},
{"lineNum":"  667","line":"        .expected = \"number[]\",","class":"lineCov","hits":"1","order":"1357","possible_hits":"1",},
{"lineNum":"  668","line":"    }).run();","class":"lineCov","hits":"1","order":"1358","possible_hits":"1",},
{"lineNum":"  669","line":"}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"test \"can write a nested array type\" {","class":"lineCov","hits":"2","order":"1365","possible_hits":"2",},
{"lineNum":"  672","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1366","possible_hits":"1",},
{"lineNum":"  673","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1367","possible_hits":"1",},
{"lineNum":"  674","line":"    const u = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } });","class":"lineCov","hits":"1","order":"1368","possible_hits":"1",},
{"lineNum":"  675","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1382","possible_hits":"1",},
{"lineNum":"  676","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &u }),","class":"lineCov","hits":"1","order":"1369","possible_hits":"1",},
{"lineNum":"  677","line":"        .expected = \"(number|string)[]\",","class":"lineCov","hits":"1","order":"1370","possible_hits":"1",},
{"lineNum":"  678","line":"    }).run();","class":"lineCov","hits":"1","order":"1371","possible_hits":"1",},
{"lineNum":"  679","line":"}"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"test \"can write a class type\" {","class":"lineCov","hits":"2","order":"1383","possible_hits":"2",},
{"lineNum":"  682","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1398","possible_hits":"1",},
{"lineNum":"  683","line":"        .ty = Type.newClass(Type.ClassType.new(","class":"lineCov","hits":"1","order":"1384","possible_hits":"1",},
{"lineNum":"  684","line":"            null,"},
{"lineNum":"  685","line":"            \"MyClass\","},
{"lineNum":"  686","line":"            &[_]Type.ClassType.Member{},"},
{"lineNum":"  687","line":"        )),"},
{"lineNum":"  688","line":"        .expected = \"class MyClass\",","class":"lineCov","hits":"1","order":"1393","possible_hits":"1",},
{"lineNum":"  689","line":"    }).run();","class":"lineCov","hits":"1","order":"1394","possible_hits":"1",},
{"lineNum":"  690","line":"}"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"// TODO: Add test for writing an enum type"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"test \"can write a function type\" {","class":"lineCov","hits":"2","order":"1399","possible_hits":"2",},
{"lineNum":"  695","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1400","possible_hits":"1",},
{"lineNum":"  696","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1401","possible_hits":"1",},
{"lineNum":"  697","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1416","possible_hits":"1",},
{"lineNum":"  698","line":"        .ty = Type.newFunction(Type.FunctionType.new(","class":"lineCov","hits":"2","order":"1402","possible_hits":"2",},
{"lineNum":"  699","line":"            &n,"},
{"lineNum":"  700","line":"            &[_]Type.Ptr{ &n, &s },","class":"lineCov","hits":"1","order":"1403","possible_hits":"1",},
{"lineNum":"  701","line":"            false,"},
{"lineNum":"  702","line":"        )),"},
{"lineNum":"  703","line":"        .expected = \"function(number, string) : number\",","class":"lineCov","hits":"1","order":"1404","possible_hits":"1",},
{"lineNum":"  704","line":"    }).run();","class":"lineCov","hits":"1","order":"1405","possible_hits":"1",},
{"lineNum":"  705","line":"}"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"test \"can write a union type\" {","class":"lineCov","hits":"2","order":"1417","possible_hits":"2",},
{"lineNum":"  708","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1418","possible_hits":"1",},
{"lineNum":"  709","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1419","possible_hits":"1",},
{"lineNum":"  710","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1423","possible_hits":"1",},
{"lineNum":"  711","line":"        .ty = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } }),","class":"lineCov","hits":"1","order":"1420","possible_hits":"1",},
{"lineNum":"  712","line":"        .expected = \"number|string\",","class":"lineCov","hits":"1","order":"1421","possible_hits":"1",},
{"lineNum":"  713","line":"    }).run();","class":"lineCov","hits":"1","order":"1422","possible_hits":"1",},
{"lineNum":"  714","line":"}"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"test \"can write a union type\" {","class":"lineCov","hits":"2","order":"1424","possible_hits":"2",},
{"lineNum":"  717","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1425","possible_hits":"1",},
{"lineNum":"  718","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1434","possible_hits":"1",},
{"lineNum":"  719","line":"        .ty = Type.newAlias(Type.AliasType{ .name = \"AnAlias\", .ty = &n }),","class":"lineCov","hits":"1","order":"1426","possible_hits":"1",},
{"lineNum":"  720","line":"        .expected = \"AnAlias (an alias for number)\",","class":"lineCov","hits":"1","order":"1427","possible_hits":"1",},
{"lineNum":"  721","line":"    }).run();","class":"lineCov","hits":"1","order":"1428","possible_hits":"1",},
{"lineNum":"  722","line":"}"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"test \"can write an interface type\" {","class":"lineCov","hits":"2","order":"1435","possible_hits":"2",},
{"lineNum":"  725","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1436","possible_hits":"1",},
{"lineNum":"  726","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1437","possible_hits":"1",},
{"lineNum":"  727","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1452","possible_hits":"1",},
{"lineNum":"  728","line":"        .ty = Type.newInterface(","class":"lineCov","hits":"2","order":"1438","possible_hits":"2",},
{"lineNum":"  729","line":"            Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1441","possible_hits":"1",},
{"lineNum":"  730","line":"                Type.InterfaceType.Member{ .name = \"a\", .ty = &n },","class":"lineCov","hits":"1","order":"1439","possible_hits":"1",},
{"lineNum":"  731","line":"                Type.InterfaceType.Member{ .name = \"b\", .ty = &b },","class":"lineCov","hits":"1","order":"1440","possible_hits":"1",},
{"lineNum":"  732","line":"            }),"},
{"lineNum":"  733","line":"        ),"},
{"lineNum":"  734","line":"        .expected = \"{ a: number, b: boolean, }\",","class":"lineCov","hits":"1","order":"1442","possible_hits":"1",},
{"lineNum":"  735","line":"    }).run();","class":"lineCov","hits":"1","order":"1443","possible_hits":"1",},
{"lineNum":"  736","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-02-03 18:39:00", "instrumented" : 419, "covered" : 406,};
var merged_data = [];
