var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   21","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   22","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   23","line":"const WriteContext = @import(\"../writer.zig\").WriteContext;"},
{"lineNum":"   24","line":"const genericEql = @import(\"../generic_eql.zig\").eql;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"pub const Type = union(This.Type) {"},
{"lineNum":"   27","line":"    const This = @This();"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    pub const Ptr = *const This;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    pub const TupleType = @import(\"tuple_type.zig\");"},
{"lineNum":"   32","line":"    pub const ArrayType = @import(\"array_type.zig\").ArrayType;"},
{"lineNum":"   33","line":"    pub const ClassType = @import(\"class_type.zig\");"},
{"lineNum":"   34","line":"    pub const EnumType = @import(\"enum_type.zig\");"},
{"lineNum":"   35","line":"    pub const FunctionType = @import(\"function_type.zig\").FunctionType;"},
{"lineNum":"   36","line":"    pub const UnionType = @import(\"union_type.zig\").UnionType;"},
{"lineNum":"   37","line":"    pub const AliasType = @import(\"alias_type.zig\").AliasType;"},
{"lineNum":"   38","line":"    pub const InterfaceType = @import(\"interface_type.zig\").InterfaceType;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    pub const Type = enum {"},
{"lineNum":"   41","line":"        Unknown,"},
{"lineNum":"   42","line":"        Any,"},
{"lineNum":"   43","line":"        Void,"},
{"lineNum":"   44","line":"        Null,"},
{"lineNum":"   45","line":"        Undefined,"},
{"lineNum":"   46","line":"        Never,"},
{"lineNum":"   47","line":"        Number,"},
{"lineNum":"   48","line":"        String,"},
{"lineNum":"   49","line":"        Boolean,"},
{"lineNum":"   50","line":"        Object,"},
{"lineNum":"   51","line":"        Tuple,"},
{"lineNum":"   52","line":"        Array,"},
{"lineNum":"   53","line":"        Class,"},
{"lineNum":"   54","line":"        Enum,"},
{"lineNum":"   55","line":"        Function,"},
{"lineNum":"   56","line":"        Union,"},
{"lineNum":"   57","line":"        Alias,"},
{"lineNum":"   58","line":"        Interface,"},
{"lineNum":"   59","line":"    };"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    Unknown,"},
{"lineNum":"   62","line":"    Any,"},
{"lineNum":"   63","line":"    Void,"},
{"lineNum":"   64","line":"    Null,"},
{"lineNum":"   65","line":"    Undefined,"},
{"lineNum":"   66","line":"    Never,"},
{"lineNum":"   67","line":"    Number,"},
{"lineNum":"   68","line":"    String,"},
{"lineNum":"   69","line":"    Boolean,"},
{"lineNum":"   70","line":"    Object,"},
{"lineNum":"   71","line":"    Tuple: TupleType,"},
{"lineNum":"   72","line":"    Array: ArrayType,"},
{"lineNum":"   73","line":"    Class: ClassType,"},
{"lineNum":"   74","line":"    Enum: EnumType,"},
{"lineNum":"   75","line":"    Function: FunctionType,"},
{"lineNum":"   76","line":"    Union: UnionType,"},
{"lineNum":"   77","line":"    Alias: AliasType,"},
{"lineNum":"   78","line":"    Interface: InterfaceType,"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub fn getType(self: This) This.Type {","class":"lineCov","hits":"1","order":"225","possible_hits":"1",},
{"lineNum":"   81","line":"        return @as(This.Type, self);","class":"lineCov","hits":"1","order":"226","possible_hits":"1",},
{"lineNum":"   82","line":"    }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    pub fn eql(self: This, other: Ptr) bool {","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":"   85","line":"        return genericEql(self, other.*);","class":"lineCov","hits":"1","order":"234","possible_hits":"1",},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    pub fn hash(self: This) usize {","class":"lineCov","hits":"1","order":"217","possible_hits":"1",},
{"lineNum":"   89","line":"        return switch (self) {","class":"lineCov","hits":"7","order":"218","possible_hits":"7",},
{"lineNum":"   90","line":"            .Unknown,"},
{"lineNum":"   91","line":"            .Any,"},
{"lineNum":"   92","line":"            .Void,"},
{"lineNum":"   93","line":"            .Null,"},
{"lineNum":"   94","line":"            .Undefined,"},
{"lineNum":"   95","line":"            .Never,"},
{"lineNum":"   96","line":"            .Number,"},
{"lineNum":"   97","line":"            .String,"},
{"lineNum":"   98","line":"            .Boolean,"},
{"lineNum":"   99","line":"            .Object,"},
{"lineNum":"  100","line":"            => @intCast(usize, @enumToInt(self.getType())) ^ 0xd16575db32f7806d,","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"  101","line":"            .Tuple => @panic(\"TODO hash Tuple\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"            .Array => |ar| ar.hash(),","class":"lineCov","hits":"1","order":"1705","possible_hits":"1",},
{"lineNum":"  103","line":"            .Class => @panic(\"TODO hash Class\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"            .Enum => @panic(\"TODO hash Enum\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            .Function => |f| f.hash(),","class":"lineCov","hits":"1","order":"309","possible_hits":"1",},
{"lineNum":"  106","line":"            .Union => |un| un.hash(),","class":"lineCov","hits":"1","order":"219","possible_hits":"1",},
{"lineNum":"  107","line":"            .Alias => |al| al.hash(),","class":"lineCov","hits":"1","order":"4926","possible_hits":"1",},
{"lineNum":"  108","line":"            .Interface => |in| in.hash(),","class":"lineCov","hits":"1","order":"333","possible_hits":"1",},
{"lineNum":"  109","line":"        };"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    pub fn newUnknown() This {","class":"lineCov","hits":"1","order":"1561","possible_hits":"1",},
{"lineNum":"  113","line":"        return This{ .Unknown = {} };","class":"lineCov","hits":"1","order":"1562","possible_hits":"1",},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    pub fn newAny() This {","class":"lineCov","hits":"1","order":"1566","possible_hits":"1",},
{"lineNum":"  117","line":"        return This{ .Any = {} };","class":"lineCov","hits":"1","order":"1567","possible_hits":"1",},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    pub fn newVoid() This {","class":"lineCov","hits":"1","order":"1571","possible_hits":"1",},
{"lineNum":"  121","line":"        return This{ .Void = {} };","class":"lineCov","hits":"1","order":"1572","possible_hits":"1",},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    pub fn newNull() This {","class":"lineCov","hits":"1","order":"1576","possible_hits":"1",},
{"lineNum":"  125","line":"        return This{ .Null = {} };","class":"lineCov","hits":"1","order":"1577","possible_hits":"1",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    pub fn newUndefined() This {","class":"lineCov","hits":"1","order":"1581","possible_hits":"1",},
{"lineNum":"  129","line":"        return This{ .Undefined = {} };","class":"lineCov","hits":"1","order":"1582","possible_hits":"1",},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    pub fn newNever() This {","class":"lineCov","hits":"1","order":"1586","possible_hits":"1",},
{"lineNum":"  133","line":"        return This{ .Never = {} };","class":"lineCov","hits":"1","order":"1587","possible_hits":"1",},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    pub fn newNumber() This {","class":"lineCov","hits":"1","order":"1591","possible_hits":"1",},
{"lineNum":"  137","line":"        return This{ .Number = {} };","class":"lineCov","hits":"1","order":"1592","possible_hits":"1",},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    pub fn newString() This {","class":"lineCov","hits":"1","order":"1596","possible_hits":"1",},
{"lineNum":"  141","line":"        return This{ .String = {} };","class":"lineCov","hits":"1","order":"1597","possible_hits":"1",},
{"lineNum":"  142","line":"    }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    pub fn newBoolean() This {","class":"lineCov","hits":"1","order":"1601","possible_hits":"1",},
{"lineNum":"  145","line":"        return This{ .Boolean = {} };","class":"lineCov","hits":"1","order":"1602","possible_hits":"1",},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    pub fn newObject() This {","class":"lineCov","hits":"1","order":"1606","possible_hits":"1",},
{"lineNum":"  149","line":"        return This{ .Object = {} };","class":"lineCov","hits":"1","order":"1607","possible_hits":"1",},
{"lineNum":"  150","line":"    }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    pub fn newArray(arr: ArrayType) This {","class":"lineCov","hits":"1","order":"1615","possible_hits":"1",},
{"lineNum":"  153","line":"        return This{ .Array = arr };","class":"lineCov","hits":"1","order":"1616","possible_hits":"1",},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    pub fn newFunction(func: FunctionType) This {","class":"lineCov","hits":"1","order":"1636","possible_hits":"1",},
{"lineNum":"  157","line":"        return This{ .Function = func };","class":"lineCov","hits":"1","order":"1637","possible_hits":"1",},
{"lineNum":"  158","line":"    }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    pub fn newUnion(un: UnionType) This {","class":"lineCov","hits":"1","order":"1624","possible_hits":"1",},
{"lineNum":"  161","line":"        return This{ .Union = un };","class":"lineCov","hits":"1","order":"1625","possible_hits":"1",},
{"lineNum":"  162","line":"    }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    pub fn newAlias(alias: AliasType) This {","class":"lineCov","hits":"1","order":"1811","possible_hits":"1",},
{"lineNum":"  165","line":"        return This{ .Alias = alias };","class":"lineCov","hits":"1","order":"1812","possible_hits":"1",},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    pub fn newInterface(in: InterfaceType) This {","class":"lineCov","hits":"1","order":"1650","possible_hits":"1",},
{"lineNum":"  169","line":"        return This{ .Interface = in };","class":"lineCov","hits":"1","order":"1651","possible_hits":"1",},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    pub fn isAssignableTo(self: This.Ptr, target: This.Ptr) bool {","class":"lineCov","hits":"1","order":"1725","possible_hits":"1",},
{"lineNum":"  173","line":"        if (self.getType() == .Undefined)","class":"lineCov","hits":"2","order":"1726","possible_hits":"2",},
{"lineNum":"  174","line":"            return true;","class":"lineCov","hits":"1","order":"1727","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        if (target.getType() == .Any)","class":"lineCov","hits":"2","order":"1741","possible_hits":"2",},
{"lineNum":"  177","line":"            return true;","class":"lineCov","hits":"1","order":"1742","possible_hits":"1",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"        if (self == target)","class":"lineCov","hits":"2","order":"1756","possible_hits":"2",},
{"lineNum":"  180","line":"            return true;","class":"lineCov","hits":"1","order":"1757","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        switch (self.*) {","class":"lineCov","hits":"2","order":"1770","possible_hits":"2",},
{"lineNum":"  183","line":"            .Array => |arr| {","class":"lineCov","hits":"1","order":"1792","possible_hits":"1",},
{"lineNum":"  184","line":"                if (target.getType() != .Array)","class":"lineCov","hits":"2","order":"1793","possible_hits":"2",},
{"lineNum":"  185","line":"                    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"                if (arr.subtype.getType() == .Unknown)","class":"lineCov","hits":"2","order":"1794","possible_hits":"2",},
{"lineNum":"  188","line":"                    return true;","class":"lineCov","hits":"1","order":"1804","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"                return arr.subtype.isAssignableTo(target.Array.subtype);","class":"lineCov","hits":"2","order":"1795","possible_hits":"2",},
{"lineNum":"  191","line":"            },"},
{"lineNum":"  192","line":"            .Union => |un| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"                for (un.tys) |ty|","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"                    if (!ty.isAssignableTo(target))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"                        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"                return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"            },"},
{"lineNum":"  198","line":"            .Alias => |al| return al.ty.isAssignableTo(target),","class":"lineCov","hits":"1","order":"1816","possible_hits":"1",},
{"lineNum":"  199","line":"            .Interface => |in| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"                if (target.getType() == .Interface)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":"                    return in.isAssignableTo(target.Interface);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"            },"},
{"lineNum":"  203","line":"            else => {},"},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        switch (target.*) {","class":"lineCov","hits":"2","order":"1771","possible_hits":"2",},
{"lineNum":"  207","line":"            .Union => |un| {","class":"lineCov","hits":"1","order":"1772","possible_hits":"1",},
{"lineNum":"  208","line":"                for (un.tys) |ty|","class":"lineCov","hits":"2","order":"1773","possible_hits":"2",},
{"lineNum":"  209","line":"                    if (self.isAssignableTo(ty))","class":"lineCov","hits":"2","order":"1774","possible_hits":"2",},
{"lineNum":"  210","line":"                        return true;","class":"lineCov","hits":"1","order":"1775","possible_hits":"1",},
{"lineNum":"  211","line":"            },"},
{"lineNum":"  212","line":"            .Alias => |al| return self.isAssignableTo(al.ty),","class":"lineCov","hits":"1","order":"1814","possible_hits":"1",},
{"lineNum":"  213","line":"            else => {},"},
{"lineNum":"  214","line":"        }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"        return false;","class":"lineCov","hits":"1","order":"1777","possible_hits":"1",},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    pub fn write(self: This, writer: anytype) anyerror!void {","class":"linePartCov","hits":"2","order":"1838","possible_hits":"4",},
{"lineNum":"  220","line":"        switch (self) {","class":"linePartCov","hits":"1","order":"1839","possible_hits":"4",},
{"lineNum":"  221","line":"            .Unknown => try writer.print(\"unknown\", .{}),","class":"linePartCov","hits":"1","order":"1840","possible_hits":"2",},
{"lineNum":"  222","line":"            .Any => try writer.print(\"any\", .{}),","class":"linePartCov","hits":"1","order":"1850","possible_hits":"2",},
{"lineNum":"  223","line":"            .Void => try writer.print(\"void\", .{}),","class":"linePartCov","hits":"1","order":"1856","possible_hits":"2",},
{"lineNum":"  224","line":"            .Null => try writer.print(\"null\", .{}),","class":"linePartCov","hits":"1","order":"1862","possible_hits":"2",},
{"lineNum":"  225","line":"            .Undefined => try writer.print(\"undefined\", .{}),","class":"linePartCov","hits":"1","order":"1868","possible_hits":"2",},
{"lineNum":"  226","line":"            .Never => try writer.print(\"never\", .{}),","class":"linePartCov","hits":"1","order":"1874","possible_hits":"2",},
{"lineNum":"  227","line":"            .Number => try writer.print(\"number\", .{}),","class":"linePartCov","hits":"1","order":"1880","possible_hits":"2",},
{"lineNum":"  228","line":"            .String => try writer.print(\"string\", .{}),","class":"linePartCov","hits":"1","order":"1886","possible_hits":"2",},
{"lineNum":"  229","line":"            .Boolean => try writer.print(\"boolean\", .{}),","class":"linePartCov","hits":"1","order":"1892","possible_hits":"2",},
{"lineNum":"  230","line":"            .Object => try writer.print(\"object\", .{}),","class":"linePartCov","hits":"1","order":"1898","possible_hits":"2",},
{"lineNum":"  231","line":"            .Tuple => try writer.print(\"tuple\", .{}), // TODO","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"            .Array => |arr| try arr.write(writer),","class":"linePartCov","hits":"1","order":"1905","possible_hits":"2",},
{"lineNum":"  233","line":"            .Class => try writer.print(\"class\", .{}), // TODO","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  234","line":"            .Enum => try writer.print(\"enum\", .{}), // TODO","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  235","line":"            .Function => |func| try func.write(writer),","class":"linePartCov","hits":"1","order":"1937","possible_hits":"2",},
{"lineNum":"  236","line":"            .Union => |un| try un.write(writer),","class":"linePartCov","hits":"1","order":"1920","possible_hits":"2",},
{"lineNum":"  237","line":"            .Alias => |al| try al.write(writer),","class":"linePartCov","hits":"1","order":"1960","possible_hits":"2",},
{"lineNum":"  238","line":"            .Interface => |in| try in.write(writer),","class":"linePartCov","hits":"1","order":"1975","possible_hits":"2",},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    pub fn dump(self: This) void {"},
{"lineNum":"  243","line":"        const writer = std.io.getStdOut().writer();"},
{"lineNum":"  244","line":"        self.write(writer) catch unreachable;"},
{"lineNum":"  245","line":"        writer.print(\"\\n\", .{}) catch unreachable;"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":"};"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"test \"can create an unknown type\" {","class":"lineCov","hits":"2","order":"1559","possible_hits":"2",},
{"lineNum":"  250","line":"    const ty = Type.newUnknown();","class":"lineCov","hits":"1","order":"1560","possible_hits":"1",},
{"lineNum":"  251","line":"    try expectEqual(Type.Type.Unknown, ty.getType());","class":"lineCov","hits":"1","order":"1563","possible_hits":"1",},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"test \"can create an any type\" {","class":"lineCov","hits":"2","order":"1564","possible_hits":"2",},
{"lineNum":"  255","line":"    const ty = Type.newAny();","class":"lineCov","hits":"1","order":"1565","possible_hits":"1",},
{"lineNum":"  256","line":"    try expectEqual(Type.Type.Any, ty.getType());","class":"lineCov","hits":"1","order":"1568","possible_hits":"1",},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"test \"can create a void type\" {","class":"lineCov","hits":"2","order":"1569","possible_hits":"2",},
{"lineNum":"  260","line":"    const ty = Type.newVoid();","class":"lineCov","hits":"1","order":"1570","possible_hits":"1",},
{"lineNum":"  261","line":"    try expectEqual(Type.Type.Void, ty.getType());","class":"lineCov","hits":"1","order":"1573","possible_hits":"1",},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"test \"can create a null type\" {","class":"lineCov","hits":"2","order":"1574","possible_hits":"2",},
{"lineNum":"  265","line":"    const ty = Type.newNull();","class":"lineCov","hits":"1","order":"1575","possible_hits":"1",},
{"lineNum":"  266","line":"    try expectEqual(Type.Type.Null, ty.getType());","class":"lineCov","hits":"1","order":"1578","possible_hits":"1",},
{"lineNum":"  267","line":"}"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"test \"can create an undefined type\" {","class":"lineCov","hits":"2","order":"1579","possible_hits":"2",},
{"lineNum":"  270","line":"    const ty = Type.newUndefined();","class":"lineCov","hits":"1","order":"1580","possible_hits":"1",},
{"lineNum":"  271","line":"    try expectEqual(Type.Type.Undefined, ty.getType());","class":"lineCov","hits":"1","order":"1583","possible_hits":"1",},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"test \"can create a never type\" {","class":"lineCov","hits":"2","order":"1584","possible_hits":"2",},
{"lineNum":"  275","line":"    const ty = Type.newNever();","class":"lineCov","hits":"1","order":"1585","possible_hits":"1",},
{"lineNum":"  276","line":"    try expectEqual(Type.Type.Never, ty.getType());","class":"lineCov","hits":"1","order":"1588","possible_hits":"1",},
{"lineNum":"  277","line":"}"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"test \"can create a number type\" {","class":"lineCov","hits":"2","order":"1589","possible_hits":"2",},
{"lineNum":"  280","line":"    const ty = Type.newNumber();","class":"lineCov","hits":"1","order":"1590","possible_hits":"1",},
{"lineNum":"  281","line":"    try expectEqual(Type.Type.Number, ty.getType());","class":"lineCov","hits":"1","order":"1593","possible_hits":"1",},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"test \"can create a string type\" {","class":"lineCov","hits":"2","order":"1594","possible_hits":"2",},
{"lineNum":"  285","line":"    const ty = Type.newString();","class":"lineCov","hits":"1","order":"1595","possible_hits":"1",},
{"lineNum":"  286","line":"    try expectEqual(Type.Type.String, ty.getType());","class":"lineCov","hits":"1","order":"1598","possible_hits":"1",},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"test \"can create a boolean type\" {","class":"lineCov","hits":"2","order":"1599","possible_hits":"2",},
{"lineNum":"  290","line":"    const ty = Type.newBoolean();","class":"lineCov","hits":"1","order":"1600","possible_hits":"1",},
{"lineNum":"  291","line":"    try expectEqual(Type.Type.Boolean, ty.getType());","class":"lineCov","hits":"1","order":"1603","possible_hits":"1",},
{"lineNum":"  292","line":"}"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"test \"can create an object type\" {","class":"lineCov","hits":"2","order":"1604","possible_hits":"2",},
{"lineNum":"  295","line":"    const ty = Type.newObject();","class":"lineCov","hits":"1","order":"1605","possible_hits":"1",},
{"lineNum":"  296","line":"    try expectEqual(Type.Type.Object, ty.getType());","class":"lineCov","hits":"1","order":"1608","possible_hits":"1",},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"test \"can create an array type\" {","class":"lineCov","hits":"2","order":"1609","possible_hits":"2",},
{"lineNum":"  300","line":"    const sub = Type.newBoolean();","class":"lineCov","hits":"1","order":"1610","possible_hits":"1",},
{"lineNum":"  301","line":"    const ty = Type.newArray(Type.ArrayType.new(&sub));","class":"lineCov","hits":"1","order":"1611","possible_hits":"1",},
{"lineNum":"  302","line":"    try expectEqual(Type.Type.Array, ty.getType());","class":"lineCov","hits":"1","order":"1617","possible_hits":"1",},
{"lineNum":"  303","line":"    try expectEqual(Type.Type.Boolean, ty.Array.subtype.getType());","class":"lineCov","hits":"2","order":"1618","possible_hits":"2",},
{"lineNum":"  304","line":"}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"test \"can create a union type\" {","class":"lineCov","hits":"2","order":"1619","possible_hits":"2",},
{"lineNum":"  307","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1620","possible_hits":"1",},
{"lineNum":"  308","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1621","possible_hits":"1",},
{"lineNum":"  309","line":"    const ty = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1623","possible_hits":"1",},
{"lineNum":"  310","line":"        .tys = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1622","possible_hits":"1",},
{"lineNum":"  311","line":"    });"},
{"lineNum":"  312","line":"    try expectEqual(Type.Type.Union, ty.getType());","class":"lineCov","hits":"1","order":"1626","possible_hits":"1",},
{"lineNum":"  313","line":"    try expectEqual(@intCast(usize, 2), ty.Union.tys.len);","class":"lineCov","hits":"2","order":"1627","possible_hits":"2",},
{"lineNum":"  314","line":"    try expectEqual(Type.Type.String, ty.Union.tys[0].getType());","class":"lineCov","hits":"2","order":"1628","possible_hits":"2",},
{"lineNum":"  315","line":"    try expectEqual(Type.Type.Number, ty.Union.tys[1].getType());","class":"lineCov","hits":"2","order":"1629","possible_hits":"2",},
{"lineNum":"  316","line":"}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"test \"can create a function type\" {","class":"lineCov","hits":"2","order":"1630","possible_hits":"2",},
{"lineNum":"  319","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1631","possible_hits":"1",},
{"lineNum":"  320","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1632","possible_hits":"1",},
{"lineNum":"  321","line":"    const ty = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1635","possible_hits":"1",},
{"lineNum":"  322","line":"        .ret = &str,","class":"lineCov","hits":"1","order":"1633","possible_hits":"1",},
{"lineNum":"  323","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1634","possible_hits":"1",},
{"lineNum":"  324","line":"    });"},
{"lineNum":"  325","line":"    try expectEqual(Type.Type.Function, ty.getType());","class":"lineCov","hits":"1","order":"1638","possible_hits":"1",},
{"lineNum":"  326","line":"    try expectEqual(Type.Type.String, ty.Function.ret.getType());","class":"lineCov","hits":"2","order":"1639","possible_hits":"2",},
{"lineNum":"  327","line":"    try expectEqual(@intCast(usize, 2), ty.Function.args.len);","class":"lineCov","hits":"2","order":"1640","possible_hits":"2",},
{"lineNum":"  328","line":"    try expectEqual(Type.Type.String, ty.Function.args[0].getType());","class":"lineCov","hits":"2","order":"1641","possible_hits":"2",},
{"lineNum":"  329","line":"    try expectEqual(Type.Type.Number, ty.Function.args[1].getType());","class":"lineCov","hits":"2","order":"1642","possible_hits":"2",},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"test \"can create an interface type\" {","class":"lineCov","hits":"2","order":"1643","possible_hits":"2",},
{"lineNum":"  333","line":"    const number = Type.newNumber();","class":"lineCov","hits":"1","order":"1644","possible_hits":"1",},
{"lineNum":"  334","line":"    const boolean = Type.newBoolean();","class":"lineCov","hits":"1","order":"1645","possible_hits":"1",},
{"lineNum":"  335","line":"    const ty = Type.newInterface(","class":"lineCov","hits":"1","order":"1649","possible_hits":"1",},
{"lineNum":"  336","line":"        Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1648","possible_hits":"1",},
{"lineNum":"  337","line":"            Type.InterfaceType.Member{ .name = \"a\", .ty = &number },","class":"lineCov","hits":"1","order":"1646","possible_hits":"1",},
{"lineNum":"  338","line":"            Type.InterfaceType.Member{ .name = \"b\", .ty = &boolean },","class":"lineCov","hits":"1","order":"1647","possible_hits":"1",},
{"lineNum":"  339","line":"        }),"},
{"lineNum":"  340","line":"    );"},
{"lineNum":"  341","line":"    try expectEqual(Type.Type.Interface, ty.getType());","class":"lineCov","hits":"1","order":"1652","possible_hits":"1",},
{"lineNum":"  342","line":"    try expectEqual(@intCast(usize, 2), ty.Interface.members.len);","class":"lineCov","hits":"2","order":"1653","possible_hits":"2",},
{"lineNum":"  343","line":"    try expectEqualStrings(\"a\", ty.Interface.members[0].name);","class":"lineCov","hits":"2","order":"1654","possible_hits":"2",},
{"lineNum":"  344","line":"    try expectEqual(Type.Type.Number, ty.Interface.members[0].ty.getType());","class":"lineCov","hits":"2","order":"1655","possible_hits":"2",},
{"lineNum":"  345","line":"    try expectEqualStrings(\"b\", ty.Interface.members[1].name);","class":"lineCov","hits":"2","order":"1656","possible_hits":"2",},
{"lineNum":"  346","line":"    try expectEqual(Type.Type.Boolean, ty.Interface.members[1].ty.getType());","class":"lineCov","hits":"2","order":"1657","possible_hits":"2",},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"test \"can compare Type equality\" {","class":"lineCov","hits":"2","order":"1658","possible_hits":"2",},
{"lineNum":"  350","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1659","possible_hits":"1",},
{"lineNum":"  351","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1660","possible_hits":"1",},
{"lineNum":"  352","line":"    const f1 = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1663","possible_hits":"1",},
{"lineNum":"  353","line":"        .ret = &str,","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":"  354","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1662","possible_hits":"1",},
{"lineNum":"  355","line":"    });"},
{"lineNum":"  356","line":"    const f2 = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1666","possible_hits":"1",},
{"lineNum":"  357","line":"        .ret = &num,","class":"lineCov","hits":"1","order":"1664","possible_hits":"1",},
{"lineNum":"  358","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1665","possible_hits":"1",},
{"lineNum":"  359","line":"    });"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    const strp = &str;","class":"lineCov","hits":"1","order":"1667","possible_hits":"1",},
{"lineNum":"  362","line":"    const nump = &num;","class":"lineCov","hits":"1","order":"1668","possible_hits":"1",},
{"lineNum":"  363","line":"    const f1p = &f1;","class":"lineCov","hits":"1","order":"1669","possible_hits":"1",},
{"lineNum":"  364","line":"    const f2p = &f2;","class":"lineCov","hits":"1","order":"1670","possible_hits":"1",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    try expect(strp.eql(strp));","class":"lineCov","hits":"1","order":"1671","possible_hits":"1",},
{"lineNum":"  367","line":"    try expect(!strp.eql(nump));","class":"lineCov","hits":"1","order":"1672","possible_hits":"1",},
{"lineNum":"  368","line":"    try expect(!nump.eql(strp));","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":"  369","line":"    try expect(!strp.eql(f1p));","class":"lineCov","hits":"1","order":"1674","possible_hits":"1",},
{"lineNum":"  370","line":"    try expect(!f1p.eql(f2p));","class":"lineCov","hits":"1","order":"1675","possible_hits":"1",},
{"lineNum":"  371","line":"    try expect(f1p.eql(f1p));","class":"lineCov","hits":"1","order":"1676","possible_hits":"1",},
{"lineNum":"  372","line":"    try expect(f2p.eql(f2p));","class":"lineCov","hits":"1","order":"1677","possible_hits":"1",},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    const a = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1678","possible_hits":"1",},
{"lineNum":"  375","line":"    const b = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1679","possible_hits":"1",},
{"lineNum":"  376","line":"    const c = Type{ .Array = Type.ArrayType{ .subtype = nump } };","class":"lineCov","hits":"1","order":"1680","possible_hits":"1",},
{"lineNum":"  377","line":"    try expect((&a).eql(&b));","class":"lineCov","hits":"1","order":"1681","possible_hits":"1",},
{"lineNum":"  378","line":"    try expect(!(&a).eql(&c));","class":"lineCov","hits":"1","order":"1682","possible_hits":"1",},
{"lineNum":"  379","line":"}"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"test \"can hash Types\" {","class":"lineCov","hits":"2","order":"1683","possible_hits":"2",},
{"lineNum":"  382","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1684","possible_hits":"1",},
{"lineNum":"  383","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1685","possible_hits":"1",},
{"lineNum":"  384","line":"    const f1 = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1688","possible_hits":"1",},
{"lineNum":"  385","line":"        .ret = &str,","class":"lineCov","hits":"1","order":"1686","possible_hits":"1",},
{"lineNum":"  386","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":"  387","line":"    });"},
{"lineNum":"  388","line":"    const f2 = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1691","possible_hits":"1",},
{"lineNum":"  389","line":"        .ret = &num,","class":"lineCov","hits":"1","order":"1689","possible_hits":"1",},
{"lineNum":"  390","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1690","possible_hits":"1",},
{"lineNum":"  391","line":"    });"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    const strp = &str;","class":"lineCov","hits":"1","order":"1692","possible_hits":"1",},
{"lineNum":"  394","line":"    const nump = &num;","class":"lineCov","hits":"1","order":"1693","possible_hits":"1",},
{"lineNum":"  395","line":"    const f1p = &f1;","class":"lineCov","hits":"1","order":"1694","possible_hits":"1",},
{"lineNum":"  396","line":"    const f2p = &f2;","class":"lineCov","hits":"1","order":"1695","possible_hits":"1",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    try expect(strp.hash() == strp.hash());","class":"lineCov","hits":"1","order":"1696","possible_hits":"1",},
{"lineNum":"  399","line":"    try expect(strp.hash() != nump.hash());","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"  400","line":"    try expect(strp.hash() != f1p.hash());","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"  401","line":"    try expect(f1p.hash() == f1p.hash());","class":"lineCov","hits":"1","order":"1699","possible_hits":"1",},
{"lineNum":"  402","line":"    try expect(f1p.hash() != f2p.hash());","class":"lineCov","hits":"1","order":"1700","possible_hits":"1",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    const a = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1701","possible_hits":"1",},
{"lineNum":"  405","line":"    const b = Type{ .Array = Type.ArrayType{ .subtype = strp } };","class":"lineCov","hits":"1","order":"1702","possible_hits":"1",},
{"lineNum":"  406","line":"    const c = Type{ .Array = Type.ArrayType{ .subtype = nump } };","class":"lineCov","hits":"1","order":"1703","possible_hits":"1",},
{"lineNum":"  407","line":"    try expect((&a).hash() == (&b).hash());","class":"lineCov","hits":"1","order":"1704","possible_hits":"1",},
{"lineNum":"  408","line":"    try expect((&a).hash() != (&c).hash());","class":"lineCov","hits":"1","order":"1708","possible_hits":"1",},
{"lineNum":"  409","line":"}"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"const AssignableTestCase = struct {"},
{"lineNum":"  412","line":"    const This = @This();"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    fromType: Type.Ptr,"},
{"lineNum":"  415","line":"    toType: Type.Ptr,"},
{"lineNum":"  416","line":"    isAssignable: bool,"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    pub fn new(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1717","possible_hits":"1",},
{"lineNum":"  419","line":"        return This{","class":"lineCov","hits":"1","order":"1721","possible_hits":"1",},
{"lineNum":"  420","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1718","possible_hits":"1",},
{"lineNum":"  421","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1719","possible_hits":"1",},
{"lineNum":"  422","line":"            .isAssignable = true,","class":"lineCov","hits":"1","order":"1720","possible_hits":"1",},
{"lineNum":"  423","line":"        };"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    pub fn newF(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1779","possible_hits":"1",},
{"lineNum":"  427","line":"        return This{","class":"lineCov","hits":"1","order":"1783","possible_hits":"1",},
{"lineNum":"  428","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1780","possible_hits":"1",},
{"lineNum":"  429","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1781","possible_hits":"1",},
{"lineNum":"  430","line":"            .isAssignable = false,","class":"lineCov","hits":"1","order":"1782","possible_hits":"1",},
{"lineNum":"  431","line":"        };"},
{"lineNum":"  432","line":"    }"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"    pub fn run(self: This) !void {","class":"lineCov","hits":"2","order":"1722","possible_hits":"2",},
{"lineNum":"  435","line":"        try expectEqual(","class":"lineCov","hits":"1","order":"1728","possible_hits":"1",},
{"lineNum":"  436","line":"            self.isAssignable,","class":"lineCov","hits":"1","order":"1723","possible_hits":"1",},
{"lineNum":"  437","line":"            self.fromType.isAssignableTo(self.toType),","class":"lineCov","hits":"1","order":"1724","possible_hits":"1",},
{"lineNum":"  438","line":"        );"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":"};"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"test \"undefined is assignable to all other types\" {","class":"lineCov","hits":"2","order":"1709","possible_hits":"2",},
{"lineNum":"  443","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1710","possible_hits":"1",},
{"lineNum":"  444","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1711","possible_hits":"1",},
{"lineNum":"  445","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1712","possible_hits":"1",},
{"lineNum":"  446","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1713","possible_hits":"1",},
{"lineNum":"  447","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1714","possible_hits":"1",},
{"lineNum":"  448","line":"    const u = Type.newUndefined();","class":"lineCov","hits":"1","order":"1715","possible_hits":"1",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    try AssignableTestCase.new(&u, &n).run();","class":"lineCov","hits":"1","order":"1716","possible_hits":"1",},
{"lineNum":"  451","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1729","possible_hits":"1",},
{"lineNum":"  452","line":"    try AssignableTestCase.new(&u, &b).run();","class":"lineCov","hits":"1","order":"1730","possible_hits":"1",},
{"lineNum":"  453","line":"    try AssignableTestCase.new(&u, &v).run();","class":"lineCov","hits":"1","order":"1731","possible_hits":"1",},
{"lineNum":"  454","line":"    try AssignableTestCase.new(&u, &s).run();","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"test \"all types are assignable to \'any\'\" {","class":"lineCov","hits":"2","order":"1733","possible_hits":"2",},
{"lineNum":"  458","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1734","possible_hits":"1",},
{"lineNum":"  459","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1735","possible_hits":"1",},
{"lineNum":"  460","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1736","possible_hits":"1",},
{"lineNum":"  461","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1737","possible_hits":"1",},
{"lineNum":"  462","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1738","possible_hits":"1",},
{"lineNum":"  463","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1739","possible_hits":"1",},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    try AssignableTestCase.new(&n, &a).run();","class":"lineCov","hits":"1","order":"1740","possible_hits":"1",},
{"lineNum":"  466","line":"    try AssignableTestCase.new(&b, &a).run();","class":"lineCov","hits":"1","order":"1743","possible_hits":"1",},
{"lineNum":"  467","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1744","possible_hits":"1",},
{"lineNum":"  468","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1745","possible_hits":"1",},
{"lineNum":"  469","line":"    try AssignableTestCase.new(&v, &a).run();","class":"lineCov","hits":"1","order":"1746","possible_hits":"1",},
{"lineNum":"  470","line":"    try AssignableTestCase.new(&s, &a).run();","class":"lineCov","hits":"1","order":"1747","possible_hits":"1",},
{"lineNum":"  471","line":"}"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"test \"types are assignable to themselves\" {","class":"lineCov","hits":"2","order":"1748","possible_hits":"2",},
{"lineNum":"  474","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1749","possible_hits":"1",},
{"lineNum":"  475","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1750","possible_hits":"1",},
{"lineNum":"  476","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1751","possible_hits":"1",},
{"lineNum":"  477","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1752","possible_hits":"1",},
{"lineNum":"  478","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1753","possible_hits":"1",},
{"lineNum":"  479","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1754","possible_hits":"1",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    try AssignableTestCase.new(&n, &n).run();","class":"lineCov","hits":"1","order":"1755","possible_hits":"1",},
{"lineNum":"  482","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1758","possible_hits":"1",},
{"lineNum":"  483","line":"    try AssignableTestCase.new(&b, &b).run();","class":"lineCov","hits":"1","order":"1759","possible_hits":"1",},
{"lineNum":"  484","line":"    try AssignableTestCase.new(&u, &u).run();","class":"lineCov","hits":"1","order":"1760","possible_hits":"1",},
{"lineNum":"  485","line":"    try AssignableTestCase.new(&v, &v).run();","class":"lineCov","hits":"1","order":"1761","possible_hits":"1",},
{"lineNum":"  486","line":"    try AssignableTestCase.new(&s, &s).run();","class":"lineCov","hits":"1","order":"1762","possible_hits":"1",},
{"lineNum":"  487","line":"}"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"test \"unions can be assigned from any of their subtypes\" {","class":"lineCov","hits":"2","order":"1763","possible_hits":"2",},
{"lineNum":"  490","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1764","possible_hits":"1",},
{"lineNum":"  491","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1765","possible_hits":"1",},
{"lineNum":"  492","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1766","possible_hits":"1",},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    const u = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1768","possible_hits":"1",},
{"lineNum":"  495","line":"        .tys = &[_]Type.Ptr{ &n, &b },","class":"lineCov","hits":"1","order":"1767","possible_hits":"1",},
{"lineNum":"  496","line":"    });"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    try AssignableTestCase.new(&n, &u).run();","class":"lineCov","hits":"1","order":"1769","possible_hits":"1",},
{"lineNum":"  499","line":"    try AssignableTestCase.new(&b, &u).run();","class":"lineCov","hits":"1","order":"1776","possible_hits":"1",},
{"lineNum":"  500","line":"    try AssignableTestCase.newF(&s, &u).run();","class":"lineCov","hits":"1","order":"1778","possible_hits":"1",},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"test \"array subtypes must match for assignment\" {","class":"lineCov","hits":"2","order":"1784","possible_hits":"2",},
{"lineNum":"  504","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1785","possible_hits":"1",},
{"lineNum":"  505","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1786","possible_hits":"1",},
{"lineNum":"  506","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1787","possible_hits":"1",},
{"lineNum":"  507","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1788","possible_hits":"1",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    try AssignableTestCase.new(&na, &na).run();","class":"lineCov","hits":"1","order":"1789","possible_hits":"1",},
{"lineNum":"  510","line":"    try AssignableTestCase.new(&ba, &ba).run();","class":"lineCov","hits":"1","order":"1790","possible_hits":"1",},
{"lineNum":"  511","line":"    try AssignableTestCase.newF(&na, &ba).run();","class":"lineCov","hits":"1","order":"1791","possible_hits":"1",},
{"lineNum":"  512","line":"}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"test \"unknown[] can be assigned to any array type\" {","class":"lineCov","hits":"2","order":"1796","possible_hits":"2",},
{"lineNum":"  515","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1797","possible_hits":"1",},
{"lineNum":"  516","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1798","possible_hits":"1",},
{"lineNum":"  517","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1799","possible_hits":"1",},
{"lineNum":"  518","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1800","possible_hits":"1",},
{"lineNum":"  519","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1801","possible_hits":"1",},
{"lineNum":"  520","line":"    const ua = Type.newArray(Type.ArrayType{ .subtype = &u });","class":"lineCov","hits":"1","order":"1802","possible_hits":"1",},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    try AssignableTestCase.new(&ua, &na).run();","class":"lineCov","hits":"1","order":"1803","possible_hits":"1",},
{"lineNum":"  523","line":"    try AssignableTestCase.new(&ua, &ba).run();","class":"lineCov","hits":"1","order":"1805","possible_hits":"1",},
{"lineNum":"  524","line":"    try AssignableTestCase.newF(&na, &ua).run();","class":"lineCov","hits":"1","order":"1806","possible_hits":"1",},
{"lineNum":"  525","line":"}"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"test \"aliases and their subtypes are interchangeable in assignments\" {","class":"lineCov","hits":"2","order":"1807","possible_hits":"2",},
{"lineNum":"  528","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1808","possible_hits":"1",},
{"lineNum":"  529","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1809","possible_hits":"1",},
{"lineNum":"  530","line":"    const na = Type.newAlias(Type.AliasType{ .name = \"a\", .ty = &n });","class":"lineCov","hits":"1","order":"1810","possible_hits":"1",},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"    try AssignableTestCase.new(&n, &na).run();","class":"lineCov","hits":"1","order":"1813","possible_hits":"1",},
{"lineNum":"  533","line":"    try AssignableTestCase.new(&na, &n).run();","class":"lineCov","hits":"1","order":"1815","possible_hits":"1",},
{"lineNum":"  534","line":"    try AssignableTestCase.newF(&b, &na).run();","class":"lineCov","hits":"1","order":"1817","possible_hits":"1",},
{"lineNum":"  535","line":"    try AssignableTestCase.newF(&na, &b).run();","class":"lineCov","hits":"1","order":"1818","possible_hits":"1",},
{"lineNum":"  536","line":"}"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"test \"other type assignments are invalid\" {","class":"lineCov","hits":"2","order":"1819","possible_hits":"2",},
{"lineNum":"  539","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1820","possible_hits":"1",},
{"lineNum":"  540","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1821","possible_hits":"1",},
{"lineNum":"  541","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1822","possible_hits":"1",},
{"lineNum":"  542","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1823","possible_hits":"1",},
{"lineNum":"  543","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1824","possible_hits":"1",},
{"lineNum":"  544","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1825","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    try AssignableTestCase.newF(&n, &s).run();","class":"lineCov","hits":"1","order":"1826","possible_hits":"1",},
{"lineNum":"  547","line":"    try AssignableTestCase.newF(&b, &v).run();","class":"lineCov","hits":"1","order":"1827","possible_hits":"1",},
{"lineNum":"  548","line":"    try AssignableTestCase.newF(&a, &u).run();","class":"lineCov","hits":"1","order":"1828","possible_hits":"1",},
{"lineNum":"  549","line":"    try AssignableTestCase.newF(&u, &n).run();","class":"lineCov","hits":"1","order":"1829","possible_hits":"1",},
{"lineNum":"  550","line":"    try AssignableTestCase.newF(&v, &b).run();","class":"lineCov","hits":"1","order":"1830","possible_hits":"1",},
{"lineNum":"  551","line":"}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"const WriteTypeTestCase = struct {"},
{"lineNum":"  554","line":"    ty: Type,"},
{"lineNum":"  555","line":"    expected: []const u8,"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"    pub fn run(self: WriteTypeTestCase) !void {","class":"lineCov","hits":"3","order":"1835","possible_hits":"3",},
{"lineNum":"  558","line":"        const ctx = try WriteContext(.{}).new(std.testing.allocator);","class":"lineCov","hits":"1","order":"1836","possible_hits":"1",},
{"lineNum":"  559","line":"        defer ctx.deinit();","class":"linePartCov","hits":"1","order":"1844","possible_hits":"4",},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"        try self.ty.write(ctx.writer());","class":"linePartCov","hits":"1","order":"1837","possible_hits":"2",},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"        const str = try ctx.toString();","class":"linePartCov","hits":"1","order":"1841","possible_hits":"2",},
{"lineNum":"  564","line":"        defer ctx.freeString(str);","class":"linePartCov","hits":"1","order":"1843","possible_hits":"2",},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"        try expectEqualStrings(self.expected, str);","class":"linePartCov","hits":"1","order":"1842","possible_hits":"2",},
{"lineNum":"  567","line":"    }"},
{"lineNum":"  568","line":"};"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"test \"can write an unknown type\" {","class":"lineCov","hits":"2","order":"1831","possible_hits":"2",},
{"lineNum":"  571","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1845","possible_hits":"1",},
{"lineNum":"  572","line":"        .ty = Type.newUnknown(),","class":"lineCov","hits":"1","order":"1832","possible_hits":"1",},
{"lineNum":"  573","line":"        .expected = \"unknown\",","class":"lineCov","hits":"1","order":"1833","possible_hits":"1",},
{"lineNum":"  574","line":"    }).run();","class":"lineCov","hits":"1","order":"1834","possible_hits":"1",},
{"lineNum":"  575","line":"}"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"test \"can write an any type\" {","class":"lineCov","hits":"2","order":"1846","possible_hits":"2",},
{"lineNum":"  578","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1851","possible_hits":"1",},
{"lineNum":"  579","line":"        .ty = Type.newAny(),","class":"lineCov","hits":"1","order":"1847","possible_hits":"1",},
{"lineNum":"  580","line":"        .expected = \"any\",","class":"lineCov","hits":"1","order":"1848","possible_hits":"1",},
{"lineNum":"  581","line":"    }).run();","class":"lineCov","hits":"1","order":"1849","possible_hits":"1",},
{"lineNum":"  582","line":"}"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"test \"can write a void type\" {","class":"lineCov","hits":"2","order":"1852","possible_hits":"2",},
{"lineNum":"  585","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1857","possible_hits":"1",},
{"lineNum":"  586","line":"        .ty = Type.newVoid(),","class":"lineCov","hits":"1","order":"1853","possible_hits":"1",},
{"lineNum":"  587","line":"        .expected = \"void\",","class":"lineCov","hits":"1","order":"1854","possible_hits":"1",},
{"lineNum":"  588","line":"    }).run();","class":"lineCov","hits":"1","order":"1855","possible_hits":"1",},
{"lineNum":"  589","line":"}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"test \"can write a null type\" {","class":"lineCov","hits":"2","order":"1858","possible_hits":"2",},
{"lineNum":"  592","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1863","possible_hits":"1",},
{"lineNum":"  593","line":"        .ty = Type.newNull(),","class":"lineCov","hits":"1","order":"1859","possible_hits":"1",},
{"lineNum":"  594","line":"        .expected = \"null\",","class":"lineCov","hits":"1","order":"1860","possible_hits":"1",},
{"lineNum":"  595","line":"    }).run();","class":"lineCov","hits":"1","order":"1861","possible_hits":"1",},
{"lineNum":"  596","line":"}"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"test \"can write an undefined type\" {","class":"lineCov","hits":"2","order":"1864","possible_hits":"2",},
{"lineNum":"  599","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1869","possible_hits":"1",},
{"lineNum":"  600","line":"        .ty = Type.newUndefined(),","class":"lineCov","hits":"1","order":"1865","possible_hits":"1",},
{"lineNum":"  601","line":"        .expected = \"undefined\",","class":"lineCov","hits":"1","order":"1866","possible_hits":"1",},
{"lineNum":"  602","line":"    }).run();","class":"lineCov","hits":"1","order":"1867","possible_hits":"1",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"test \"can write a never type\" {","class":"lineCov","hits":"2","order":"1870","possible_hits":"2",},
{"lineNum":"  606","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1875","possible_hits":"1",},
{"lineNum":"  607","line":"        .ty = Type.newNever(),","class":"lineCov","hits":"1","order":"1871","possible_hits":"1",},
{"lineNum":"  608","line":"        .expected = \"never\",","class":"lineCov","hits":"1","order":"1872","possible_hits":"1",},
{"lineNum":"  609","line":"    }).run();","class":"lineCov","hits":"1","order":"1873","possible_hits":"1",},
{"lineNum":"  610","line":"}"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"test \"can write a number type\" {","class":"lineCov","hits":"2","order":"1876","possible_hits":"2",},
{"lineNum":"  613","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1881","possible_hits":"1",},
{"lineNum":"  614","line":"        .ty = Type.newNumber(),","class":"lineCov","hits":"1","order":"1877","possible_hits":"1",},
{"lineNum":"  615","line":"        .expected = \"number\",","class":"lineCov","hits":"1","order":"1878","possible_hits":"1",},
{"lineNum":"  616","line":"    }).run();","class":"lineCov","hits":"1","order":"1879","possible_hits":"1",},
{"lineNum":"  617","line":"}"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"test \"can write a string type\" {","class":"lineCov","hits":"2","order":"1882","possible_hits":"2",},
{"lineNum":"  620","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1887","possible_hits":"1",},
{"lineNum":"  621","line":"        .ty = Type.newString(),","class":"lineCov","hits":"1","order":"1883","possible_hits":"1",},
{"lineNum":"  622","line":"        .expected = \"string\",","class":"lineCov","hits":"1","order":"1884","possible_hits":"1",},
{"lineNum":"  623","line":"    }).run();","class":"lineCov","hits":"1","order":"1885","possible_hits":"1",},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"can write a boolean type\" {","class":"lineCov","hits":"2","order":"1888","possible_hits":"2",},
{"lineNum":"  627","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1893","possible_hits":"1",},
{"lineNum":"  628","line":"        .ty = Type.newBoolean(),","class":"lineCov","hits":"1","order":"1889","possible_hits":"1",},
{"lineNum":"  629","line":"        .expected = \"boolean\",","class":"lineCov","hits":"1","order":"1890","possible_hits":"1",},
{"lineNum":"  630","line":"    }).run();","class":"lineCov","hits":"1","order":"1891","possible_hits":"1",},
{"lineNum":"  631","line":"}"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"test \"can write an object type\" {","class":"lineCov","hits":"2","order":"1894","possible_hits":"2",},
{"lineNum":"  634","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1899","possible_hits":"1",},
{"lineNum":"  635","line":"        .ty = Type.newObject(),","class":"lineCov","hits":"1","order":"1895","possible_hits":"1",},
{"lineNum":"  636","line":"        .expected = \"object\",","class":"lineCov","hits":"1","order":"1896","possible_hits":"1",},
{"lineNum":"  637","line":"    }).run();","class":"lineCov","hits":"1","order":"1897","possible_hits":"1",},
{"lineNum":"  638","line":"}"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"// TODO: Add test for writing a tuple type"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"test \"can write an array type\" {","class":"lineCov","hits":"2","order":"1900","possible_hits":"2",},
{"lineNum":"  643","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1901","possible_hits":"1",},
{"lineNum":"  644","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1910","possible_hits":"1",},
{"lineNum":"  645","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &n }),","class":"lineCov","hits":"1","order":"1902","possible_hits":"1",},
{"lineNum":"  646","line":"        .expected = \"number[]\",","class":"lineCov","hits":"1","order":"1903","possible_hits":"1",},
{"lineNum":"  647","line":"    }).run();","class":"lineCov","hits":"1","order":"1904","possible_hits":"1",},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"test \"can write a nested array type\" {","class":"lineCov","hits":"2","order":"1911","possible_hits":"2",},
{"lineNum":"  651","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1912","possible_hits":"1",},
{"lineNum":"  652","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1913","possible_hits":"1",},
{"lineNum":"  653","line":"    const u = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } });","class":"lineCov","hits":"1","order":"1914","possible_hits":"1",},
{"lineNum":"  654","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1928","possible_hits":"1",},
{"lineNum":"  655","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &u }),","class":"lineCov","hits":"1","order":"1915","possible_hits":"1",},
{"lineNum":"  656","line":"        .expected = \"(number|string)[]\",","class":"lineCov","hits":"1","order":"1916","possible_hits":"1",},
{"lineNum":"  657","line":"    }).run();","class":"lineCov","hits":"1","order":"1917","possible_hits":"1",},
{"lineNum":"  658","line":"}"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"// TODO: Add test for writing a class type"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"// TODO: Add test for writing an enum type"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"test \"can write a function type\" {","class":"lineCov","hits":"2","order":"1929","possible_hits":"2",},
{"lineNum":"  665","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1930","possible_hits":"1",},
{"lineNum":"  666","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1931","possible_hits":"1",},
{"lineNum":"  667","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1947","possible_hits":"1",},
{"lineNum":"  668","line":"        .ty = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"2","order":"1932","possible_hits":"2",},
{"lineNum":"  669","line":"            .ret = &n,","class":"lineCov","hits":"1","order":"1933","possible_hits":"1",},
{"lineNum":"  670","line":"            .args = &[_]Type.Ptr{ &n, &s },","class":"lineCov","hits":"1","order":"1934","possible_hits":"1",},
{"lineNum":"  671","line":"        }),"},
{"lineNum":"  672","line":"        .expected = \"function(number, string) : number\",","class":"lineCov","hits":"1","order":"1935","possible_hits":"1",},
{"lineNum":"  673","line":"    }).run();","class":"lineCov","hits":"1","order":"1936","possible_hits":"1",},
{"lineNum":"  674","line":"}"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"test \"can write a union type\" {","class":"lineCov","hits":"2","order":"1948","possible_hits":"2",},
{"lineNum":"  677","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1949","possible_hits":"1",},
{"lineNum":"  678","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1950","possible_hits":"1",},
{"lineNum":"  679","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1954","possible_hits":"1",},
{"lineNum":"  680","line":"        .ty = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } }),","class":"lineCov","hits":"1","order":"1951","possible_hits":"1",},
{"lineNum":"  681","line":"        .expected = \"number|string\",","class":"lineCov","hits":"1","order":"1952","possible_hits":"1",},
{"lineNum":"  682","line":"    }).run();","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"  683","line":"}"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"test \"can write a union type\" {","class":"lineCov","hits":"2","order":"1955","possible_hits":"2",},
{"lineNum":"  686","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"  687","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1965","possible_hits":"1",},
{"lineNum":"  688","line":"        .ty = Type.newAlias(Type.AliasType{ .name = \"AnAlias\", .ty = &n }),","class":"lineCov","hits":"1","order":"1957","possible_hits":"1",},
{"lineNum":"  689","line":"        .expected = \"AnAlias (an alias for number)\",","class":"lineCov","hits":"1","order":"1958","possible_hits":"1",},
{"lineNum":"  690","line":"    }).run();","class":"lineCov","hits":"1","order":"1959","possible_hits":"1",},
{"lineNum":"  691","line":"}"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"test \"can write an interface type\" {","class":"lineCov","hits":"2","order":"1966","possible_hits":"2",},
{"lineNum":"  694","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1967","possible_hits":"1",},
{"lineNum":"  695","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1968","possible_hits":"1",},
{"lineNum":"  696","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1983","possible_hits":"1",},
{"lineNum":"  697","line":"        .ty = Type.newInterface(","class":"lineCov","hits":"2","order":"1969","possible_hits":"2",},
{"lineNum":"  698","line":"            Type.InterfaceType.new(&[_]Type.InterfaceType.Member{","class":"lineCov","hits":"1","order":"1972","possible_hits":"1",},
{"lineNum":"  699","line":"                Type.InterfaceType.Member{ .name = \"a\", .ty = &n },","class":"lineCov","hits":"1","order":"1970","possible_hits":"1",},
{"lineNum":"  700","line":"                Type.InterfaceType.Member{ .name = \"b\", .ty = &b },","class":"lineCov","hits":"1","order":"1971","possible_hits":"1",},
{"lineNum":"  701","line":"            }),"},
{"lineNum":"  702","line":"        ),"},
{"lineNum":"  703","line":"        .expected = \"{ a: number, b: boolean, }\",","class":"lineCov","hits":"1","order":"1973","possible_hits":"1",},
{"lineNum":"  704","line":"    }).run();","class":"lineCov","hits":"1","order":"1974","possible_hits":"1",},
{"lineNum":"  705","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-14 19:49:40", "instrumented" : 413, "covered" : 398,};
var merged_data = [];
