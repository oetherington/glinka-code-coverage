var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"   20","line":"const expectEqualStrings = std.testing.expectEqualStrings;"},
{"lineNum":"   21","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   22","line":"const WriteContext = @import(\"../../common/writer.zig\").WriteContext;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub const Type = union(This.Type) {"},
{"lineNum":"   25","line":"    const This = @This();"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    pub const Ptr = *const This;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    pub const TupleType = @import(\"tuple_type.zig\");"},
{"lineNum":"   30","line":"    pub const ArrayType = @import(\"array_type.zig\").ArrayType;"},
{"lineNum":"   31","line":"    pub const ClassType = @import(\"class_type.zig\");"},
{"lineNum":"   32","line":"    pub const EnumType = @import(\"enum_type.zig\");"},
{"lineNum":"   33","line":"    pub const FunctionType = @import(\"function_type.zig\").FunctionType;"},
{"lineNum":"   34","line":"    pub const UnionType = @import(\"union_type.zig\").UnionType;"},
{"lineNum":"   35","line":"    pub const AliasType = @import(\"alias_type.zig\");"},
{"lineNum":"   36","line":"    pub const InterfaceType = @import(\"interface_type.zig\");"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    pub const Type = enum {"},
{"lineNum":"   39","line":"        Unknown,"},
{"lineNum":"   40","line":"        Any,"},
{"lineNum":"   41","line":"        Void,"},
{"lineNum":"   42","line":"        Null,"},
{"lineNum":"   43","line":"        Undefined,"},
{"lineNum":"   44","line":"        Never,"},
{"lineNum":"   45","line":"        Number,"},
{"lineNum":"   46","line":"        String,"},
{"lineNum":"   47","line":"        Boolean,"},
{"lineNum":"   48","line":"        Object,"},
{"lineNum":"   49","line":"        Tuple,"},
{"lineNum":"   50","line":"        Array,"},
{"lineNum":"   51","line":"        Class,"},
{"lineNum":"   52","line":"        Enum,"},
{"lineNum":"   53","line":"        Function,"},
{"lineNum":"   54","line":"        Union,"},
{"lineNum":"   55","line":"        Alias,"},
{"lineNum":"   56","line":"        Interface,"},
{"lineNum":"   57","line":"    };"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    Unknown,"},
{"lineNum":"   60","line":"    Any,"},
{"lineNum":"   61","line":"    Void,"},
{"lineNum":"   62","line":"    Null,"},
{"lineNum":"   63","line":"    Undefined,"},
{"lineNum":"   64","line":"    Never,"},
{"lineNum":"   65","line":"    Number,"},
{"lineNum":"   66","line":"    String,"},
{"lineNum":"   67","line":"    Boolean,"},
{"lineNum":"   68","line":"    Object,"},
{"lineNum":"   69","line":"    Tuple: TupleType,"},
{"lineNum":"   70","line":"    Array: ArrayType,"},
{"lineNum":"   71","line":"    Class: ClassType,"},
{"lineNum":"   72","line":"    Enum: EnumType,"},
{"lineNum":"   73","line":"    Function: FunctionType,"},
{"lineNum":"   74","line":"    Union: UnionType,"},
{"lineNum":"   75","line":"    Alias: AliasType,"},
{"lineNum":"   76","line":"    Interface: InterfaceType,"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    pub fn getType(self: This) This.Type {","class":"lineCov","hits":"1","order":"1432","possible_hits":"1",},
{"lineNum":"   79","line":"        return @as(This.Type, self);","class":"lineCov","hits":"1","order":"1433","possible_hits":"1",},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    pub fn newUnknown() This {","class":"lineCov","hits":"1","order":"1429","possible_hits":"1",},
{"lineNum":"   83","line":"        return This{ .Unknown = {} };","class":"lineCov","hits":"1","order":"1430","possible_hits":"1",},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    pub fn newAny() This {","class":"lineCov","hits":"1","order":"1436","possible_hits":"1",},
{"lineNum":"   87","line":"        return This{ .Any = {} };","class":"lineCov","hits":"1","order":"1437","possible_hits":"1",},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    pub fn newVoid() This {","class":"lineCov","hits":"1","order":"1441","possible_hits":"1",},
{"lineNum":"   91","line":"        return This{ .Void = {} };","class":"lineCov","hits":"1","order":"1442","possible_hits":"1",},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    pub fn newNull() This {","class":"lineCov","hits":"1","order":"1446","possible_hits":"1",},
{"lineNum":"   95","line":"        return This{ .Null = {} };","class":"lineCov","hits":"1","order":"1447","possible_hits":"1",},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    pub fn newUndefined() This {","class":"lineCov","hits":"1","order":"1451","possible_hits":"1",},
{"lineNum":"   99","line":"        return This{ .Undefined = {} };","class":"lineCov","hits":"1","order":"1452","possible_hits":"1",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    pub fn newNever() This {","class":"lineCov","hits":"1","order":"1456","possible_hits":"1",},
{"lineNum":"  103","line":"        return This{ .Never = {} };","class":"lineCov","hits":"1","order":"1457","possible_hits":"1",},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    pub fn newNumber() This {","class":"lineCov","hits":"1","order":"1461","possible_hits":"1",},
{"lineNum":"  107","line":"        return This{ .Number = {} };","class":"lineCov","hits":"1","order":"1462","possible_hits":"1",},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    pub fn newString() This {","class":"lineCov","hits":"1","order":"1466","possible_hits":"1",},
{"lineNum":"  111","line":"        return This{ .String = {} };","class":"lineCov","hits":"1","order":"1467","possible_hits":"1",},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    pub fn newBoolean() This {","class":"lineCov","hits":"1","order":"1471","possible_hits":"1",},
{"lineNum":"  115","line":"        return This{ .Boolean = {} };","class":"lineCov","hits":"1","order":"1472","possible_hits":"1",},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    pub fn newObject() This {","class":"lineCov","hits":"1","order":"1476","possible_hits":"1",},
{"lineNum":"  119","line":"        return This{ .Object = {} };","class":"lineCov","hits":"1","order":"1477","possible_hits":"1",},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    pub fn newArray(arr: ArrayType) This {","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":"  123","line":"        return This{ .Array = arr };","class":"lineCov","hits":"1","order":"1483","possible_hits":"1",},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    pub fn newFunction(func: FunctionType) This {","class":"lineCov","hits":"1","order":"1503","possible_hits":"1",},
{"lineNum":"  127","line":"        return This{ .Function = func };","class":"lineCov","hits":"1","order":"1504","possible_hits":"1",},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    pub fn newUnion(un: UnionType) This {","class":"lineCov","hits":"1","order":"1491","possible_hits":"1",},
{"lineNum":"  131","line":"        return This{ .Union = un };","class":"lineCov","hits":"1","order":"1492","possible_hits":"1",},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    pub fn isAssignableTo(self: This.Ptr, target: This.Ptr) bool {","class":"lineCov","hits":"1","order":"1526","possible_hits":"1",},
{"lineNum":"  135","line":"        if (self.getType() == .Undefined)","class":"lineCov","hits":"2","order":"1527","possible_hits":"2",},
{"lineNum":"  136","line":"            return true;","class":"lineCov","hits":"1","order":"1528","possible_hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        if (target.getType() == .Any)","class":"lineCov","hits":"2","order":"1542","possible_hits":"2",},
{"lineNum":"  139","line":"            return true;","class":"lineCov","hits":"1","order":"1543","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        if (self == target)","class":"lineCov","hits":"2","order":"1557","possible_hits":"2",},
{"lineNum":"  142","line":"            return true;","class":"lineCov","hits":"1","order":"1558","possible_hits":"1",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        switch (self.*) {","class":"lineCov","hits":"2","order":"1571","possible_hits":"2",},
{"lineNum":"  145","line":"            .Array => |arr| {","class":"lineCov","hits":"1","order":"1593","possible_hits":"1",},
{"lineNum":"  146","line":"                if (target.getType() != .Array)","class":"lineCov","hits":"2","order":"1594","possible_hits":"2",},
{"lineNum":"  147","line":"                    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"                if (arr.subtype.getType() == .Unknown)","class":"lineCov","hits":"2","order":"1595","possible_hits":"2",},
{"lineNum":"  150","line":"                    return true;","class":"lineCov","hits":"1","order":"1605","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"                return arr.subtype.isAssignableTo(target.Array.subtype);","class":"lineCov","hits":"2","order":"1596","possible_hits":"2",},
{"lineNum":"  153","line":"            },"},
{"lineNum":"  154","line":"            .Union => |un| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"                for (un.tys) |ty|","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"                    if (!ty.isAssignableTo(target))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"                        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"                return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"            },"},
{"lineNum":"  160","line":"            else => {},"},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        switch (target.*) {","class":"lineCov","hits":"2","order":"1572","possible_hits":"2",},
{"lineNum":"  164","line":"            .Union => |un| {","class":"lineCov","hits":"1","order":"1573","possible_hits":"1",},
{"lineNum":"  165","line":"                for (un.tys) |ty|","class":"lineCov","hits":"2","order":"1574","possible_hits":"2",},
{"lineNum":"  166","line":"                    if (self.isAssignableTo(ty))","class":"lineCov","hits":"2","order":"1575","possible_hits":"2",},
{"lineNum":"  167","line":"                        return true;","class":"lineCov","hits":"1","order":"1576","possible_hits":"1",},
{"lineNum":"  168","line":"            },"},
{"lineNum":"  169","line":"            else => {},"},
{"lineNum":"  170","line":"        }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        return false;","class":"lineCov","hits":"1","order":"1578","possible_hits":"1",},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    pub fn write(self: This, writer: anytype) anyerror!void {","class":"linePartCov","hits":"2","order":"1627","possible_hits":"4",},
{"lineNum":"  176","line":"        switch (self) {","class":"linePartCov","hits":"1","order":"1628","possible_hits":"4",},
{"lineNum":"  177","line":"            .Unknown => try writer.print(\"unknown\", .{}),","class":"linePartCov","hits":"1","order":"1629","possible_hits":"2",},
{"lineNum":"  178","line":"            .Any => try writer.print(\"any\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"            .Void => try writer.print(\"void\", .{}),","class":"linePartCov","hits":"1","order":"1639","possible_hits":"2",},
{"lineNum":"  180","line":"            .Null => try writer.print(\"null\", .{}),","class":"linePartCov","hits":"1","order":"1645","possible_hits":"2",},
{"lineNum":"  181","line":"            .Undefined => try writer.print(\"undefined\", .{}),","class":"linePartCov","hits":"1","order":"1651","possible_hits":"2",},
{"lineNum":"  182","line":"            .Never => try writer.print(\"never\", .{}),","class":"linePartCov","hits":"1","order":"1657","possible_hits":"2",},
{"lineNum":"  183","line":"            .Number => try writer.print(\"number\", .{}),","class":"linePartCov","hits":"1","order":"1663","possible_hits":"2",},
{"lineNum":"  184","line":"            .String => try writer.print(\"string\", .{}),","class":"linePartCov","hits":"1","order":"1669","possible_hits":"2",},
{"lineNum":"  185","line":"            .Boolean => try writer.print(\"boolean\", .{}),","class":"linePartCov","hits":"1","order":"1675","possible_hits":"2",},
{"lineNum":"  186","line":"            .Object => try writer.print(\"object\", .{}),","class":"linePartCov","hits":"1","order":"1681","possible_hits":"2",},
{"lineNum":"  187","line":"            .Tuple => try writer.print(\"tuple\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"            .Array => |arr| try arr.write(writer),","class":"linePartCov","hits":"1","order":"1688","possible_hits":"2",},
{"lineNum":"  189","line":"            .Class => try writer.print(\"class\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"            .Enum => try writer.print(\"enum\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"            .Function => |func| try func.write(writer),","class":"linePartCov","hits":"1","order":"1720","possible_hits":"2",},
{"lineNum":"  192","line":"            .Union => |un| try un.write(writer),","class":"linePartCov","hits":"1","order":"1703","possible_hits":"2",},
{"lineNum":"  193","line":"            .Alias => try writer.print(\"alias\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"            .Interface => try writer.print(\"interface\", .{}),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    pub fn dump(self: This) void {"},
{"lineNum":"  199","line":"        const writer = std.io.getStdOut().writer();"},
{"lineNum":"  200","line":"        self.write(writer) catch unreachable;"},
{"lineNum":"  201","line":"        writer.print(\"\\n\", .{}) catch unreachable;"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":"};"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"test \"can create an unknown type\" {","class":"lineCov","hits":"2","order":"1427","possible_hits":"2",},
{"lineNum":"  206","line":"    const ty = Type.newUnknown();","class":"lineCov","hits":"1","order":"1428","possible_hits":"1",},
{"lineNum":"  207","line":"    try expectEqual(Type.Type.Unknown, ty.getType());","class":"lineCov","hits":"1","order":"1431","possible_hits":"1",},
{"lineNum":"  208","line":"}"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"test \"can create an any type\" {","class":"lineCov","hits":"2","order":"1434","possible_hits":"2",},
{"lineNum":"  211","line":"    const ty = Type.newAny();","class":"lineCov","hits":"1","order":"1435","possible_hits":"1",},
{"lineNum":"  212","line":"    try expectEqual(Type.Type.Any, ty.getType());","class":"lineCov","hits":"1","order":"1438","possible_hits":"1",},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"test \"can create a void type\" {","class":"lineCov","hits":"2","order":"1439","possible_hits":"2",},
{"lineNum":"  216","line":"    const ty = Type.newVoid();","class":"lineCov","hits":"1","order":"1440","possible_hits":"1",},
{"lineNum":"  217","line":"    try expectEqual(Type.Type.Void, ty.getType());","class":"lineCov","hits":"1","order":"1443","possible_hits":"1",},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"test \"can create a null type\" {","class":"lineCov","hits":"2","order":"1444","possible_hits":"2",},
{"lineNum":"  221","line":"    const ty = Type.newNull();","class":"lineCov","hits":"1","order":"1445","possible_hits":"1",},
{"lineNum":"  222","line":"    try expectEqual(Type.Type.Null, ty.getType());","class":"lineCov","hits":"1","order":"1448","possible_hits":"1",},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"test \"can create an undefined type\" {","class":"lineCov","hits":"2","order":"1449","possible_hits":"2",},
{"lineNum":"  226","line":"    const ty = Type.newUndefined();","class":"lineCov","hits":"1","order":"1450","possible_hits":"1",},
{"lineNum":"  227","line":"    try expectEqual(Type.Type.Undefined, ty.getType());","class":"lineCov","hits":"1","order":"1453","possible_hits":"1",},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"test \"can create a never type\" {","class":"lineCov","hits":"2","order":"1454","possible_hits":"2",},
{"lineNum":"  231","line":"    const ty = Type.newNever();","class":"lineCov","hits":"1","order":"1455","possible_hits":"1",},
{"lineNum":"  232","line":"    try expectEqual(Type.Type.Never, ty.getType());","class":"lineCov","hits":"1","order":"1458","possible_hits":"1",},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"test \"can create a number type\" {","class":"lineCov","hits":"2","order":"1459","possible_hits":"2",},
{"lineNum":"  236","line":"    const ty = Type.newNumber();","class":"lineCov","hits":"1","order":"1460","possible_hits":"1",},
{"lineNum":"  237","line":"    try expectEqual(Type.Type.Number, ty.getType());","class":"lineCov","hits":"1","order":"1463","possible_hits":"1",},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"test \"can create a string type\" {","class":"lineCov","hits":"2","order":"1464","possible_hits":"2",},
{"lineNum":"  241","line":"    const ty = Type.newString();","class":"lineCov","hits":"1","order":"1465","possible_hits":"1",},
{"lineNum":"  242","line":"    try expectEqual(Type.Type.String, ty.getType());","class":"lineCov","hits":"1","order":"1468","possible_hits":"1",},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"test \"can create a boolean type\" {","class":"lineCov","hits":"2","order":"1469","possible_hits":"2",},
{"lineNum":"  246","line":"    const ty = Type.newBoolean();","class":"lineCov","hits":"1","order":"1470","possible_hits":"1",},
{"lineNum":"  247","line":"    try expectEqual(Type.Type.Boolean, ty.getType());","class":"lineCov","hits":"1","order":"1473","possible_hits":"1",},
{"lineNum":"  248","line":"}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"test \"can create an object type\" {","class":"lineCov","hits":"2","order":"1474","possible_hits":"2",},
{"lineNum":"  251","line":"    const ty = Type.newObject();","class":"lineCov","hits":"1","order":"1475","possible_hits":"1",},
{"lineNum":"  252","line":"    try expectEqual(Type.Type.Object, ty.getType());","class":"lineCov","hits":"1","order":"1478","possible_hits":"1",},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"test \"can create an array type\" {","class":"lineCov","hits":"2","order":"1479","possible_hits":"2",},
{"lineNum":"  256","line":"    const sub = Type.newBoolean();","class":"lineCov","hits":"1","order":"1480","possible_hits":"1",},
{"lineNum":"  257","line":"    const ty = Type.newArray(Type.ArrayType{ .subtype = &sub });","class":"lineCov","hits":"1","order":"1481","possible_hits":"1",},
{"lineNum":"  258","line":"    try expectEqual(Type.Type.Array, ty.getType());","class":"lineCov","hits":"1","order":"1484","possible_hits":"1",},
{"lineNum":"  259","line":"    try expectEqual(Type.Type.Boolean, ty.Array.subtype.getType());","class":"lineCov","hits":"2","order":"1485","possible_hits":"2",},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"test \"can create a union type\" {","class":"lineCov","hits":"2","order":"1486","possible_hits":"2",},
{"lineNum":"  263","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1487","possible_hits":"1",},
{"lineNum":"  264","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1488","possible_hits":"1",},
{"lineNum":"  265","line":"    const ty = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1490","possible_hits":"1",},
{"lineNum":"  266","line":"        .tys = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1489","possible_hits":"1",},
{"lineNum":"  267","line":"    });"},
{"lineNum":"  268","line":"    try expectEqual(Type.Type.Union, ty.getType());","class":"lineCov","hits":"1","order":"1493","possible_hits":"1",},
{"lineNum":"  269","line":"    try expectEqual(@intCast(usize, 2), ty.Union.tys.len);","class":"lineCov","hits":"2","order":"1494","possible_hits":"2",},
{"lineNum":"  270","line":"    try expectEqual(Type.Type.String, ty.Union.tys[0].getType());","class":"lineCov","hits":"2","order":"1495","possible_hits":"2",},
{"lineNum":"  271","line":"    try expectEqual(Type.Type.Number, ty.Union.tys[1].getType());","class":"lineCov","hits":"2","order":"1496","possible_hits":"2",},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"test \"can create a function type\" {","class":"lineCov","hits":"2","order":"1497","possible_hits":"2",},
{"lineNum":"  275","line":"    const str = Type.newString();","class":"lineCov","hits":"1","order":"1498","possible_hits":"1",},
{"lineNum":"  276","line":"    const num = Type.newNumber();","class":"lineCov","hits":"1","order":"1499","possible_hits":"1",},
{"lineNum":"  277","line":"    const ty = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"1","order":"1502","possible_hits":"1",},
{"lineNum":"  278","line":"        .ret = &str,","class":"lineCov","hits":"1","order":"1500","possible_hits":"1",},
{"lineNum":"  279","line":"        .args = &[_]Type.Ptr{ &str, &num },","class":"lineCov","hits":"1","order":"1501","possible_hits":"1",},
{"lineNum":"  280","line":"    });"},
{"lineNum":"  281","line":"    try expectEqual(Type.Type.Function, ty.getType());","class":"lineCov","hits":"1","order":"1505","possible_hits":"1",},
{"lineNum":"  282","line":"    try expectEqual(Type.Type.String, ty.Function.ret.getType());","class":"lineCov","hits":"2","order":"1506","possible_hits":"2",},
{"lineNum":"  283","line":"    try expectEqual(@intCast(usize, 2), ty.Function.args.len);","class":"lineCov","hits":"2","order":"1507","possible_hits":"2",},
{"lineNum":"  284","line":"    try expectEqual(Type.Type.String, ty.Function.args[0].getType());","class":"lineCov","hits":"2","order":"1508","possible_hits":"2",},
{"lineNum":"  285","line":"    try expectEqual(Type.Type.Number, ty.Function.args[1].getType());","class":"lineCov","hits":"2","order":"1509","possible_hits":"2",},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"const AssignableTestCase = struct {"},
{"lineNum":"  289","line":"    const This = @This();"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    fromType: Type.Ptr,"},
{"lineNum":"  292","line":"    toType: Type.Ptr,"},
{"lineNum":"  293","line":"    isAssignable: bool,"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    pub fn new(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1518","possible_hits":"1",},
{"lineNum":"  296","line":"        return This{","class":"lineCov","hits":"1","order":"1522","possible_hits":"1",},
{"lineNum":"  297","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1519","possible_hits":"1",},
{"lineNum":"  298","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1520","possible_hits":"1",},
{"lineNum":"  299","line":"            .isAssignable = true,","class":"lineCov","hits":"1","order":"1521","possible_hits":"1",},
{"lineNum":"  300","line":"        };"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    pub fn newF(fromType: Type.Ptr, toType: Type.Ptr) This {","class":"lineCov","hits":"1","order":"1580","possible_hits":"1",},
{"lineNum":"  304","line":"        return This{","class":"lineCov","hits":"1","order":"1584","possible_hits":"1",},
{"lineNum":"  305","line":"            .fromType = fromType,","class":"lineCov","hits":"1","order":"1581","possible_hits":"1",},
{"lineNum":"  306","line":"            .toType = toType,","class":"lineCov","hits":"1","order":"1582","possible_hits":"1",},
{"lineNum":"  307","line":"            .isAssignable = false,","class":"lineCov","hits":"1","order":"1583","possible_hits":"1",},
{"lineNum":"  308","line":"        };"},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    pub fn run(self: This) !void {","class":"lineCov","hits":"2","order":"1523","possible_hits":"2",},
{"lineNum":"  312","line":"        try expectEqual(","class":"lineCov","hits":"1","order":"1529","possible_hits":"1",},
{"lineNum":"  313","line":"            self.isAssignable,","class":"lineCov","hits":"1","order":"1524","possible_hits":"1",},
{"lineNum":"  314","line":"            self.fromType.isAssignableTo(self.toType),","class":"lineCov","hits":"1","order":"1525","possible_hits":"1",},
{"lineNum":"  315","line":"        );"},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":"};"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"test \"undefined is assignable to all other types\" {","class":"lineCov","hits":"2","order":"1510","possible_hits":"2",},
{"lineNum":"  320","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1511","possible_hits":"1",},
{"lineNum":"  321","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1512","possible_hits":"1",},
{"lineNum":"  322","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1513","possible_hits":"1",},
{"lineNum":"  323","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1514","possible_hits":"1",},
{"lineNum":"  324","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1515","possible_hits":"1",},
{"lineNum":"  325","line":"    const u = Type.newUndefined();","class":"lineCov","hits":"1","order":"1516","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    try AssignableTestCase.new(&u, &n).run();","class":"lineCov","hits":"1","order":"1517","possible_hits":"1",},
{"lineNum":"  328","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1530","possible_hits":"1",},
{"lineNum":"  329","line":"    try AssignableTestCase.new(&u, &b).run();","class":"lineCov","hits":"1","order":"1531","possible_hits":"1",},
{"lineNum":"  330","line":"    try AssignableTestCase.new(&u, &v).run();","class":"lineCov","hits":"1","order":"1532","possible_hits":"1",},
{"lineNum":"  331","line":"    try AssignableTestCase.new(&u, &s).run();","class":"lineCov","hits":"1","order":"1533","possible_hits":"1",},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"test \"all types are assignable to \'any\'\" {","class":"lineCov","hits":"2","order":"1534","possible_hits":"2",},
{"lineNum":"  335","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1535","possible_hits":"1",},
{"lineNum":"  336","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1536","possible_hits":"1",},
{"lineNum":"  337","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1537","possible_hits":"1",},
{"lineNum":"  338","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1538","possible_hits":"1",},
{"lineNum":"  339","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1539","possible_hits":"1",},
{"lineNum":"  340","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1540","possible_hits":"1",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    try AssignableTestCase.new(&n, &a).run();","class":"lineCov","hits":"1","order":"1541","possible_hits":"1",},
{"lineNum":"  343","line":"    try AssignableTestCase.new(&b, &a).run();","class":"lineCov","hits":"1","order":"1544","possible_hits":"1",},
{"lineNum":"  344","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1545","possible_hits":"1",},
{"lineNum":"  345","line":"    try AssignableTestCase.new(&u, &a).run();","class":"lineCov","hits":"1","order":"1546","possible_hits":"1",},
{"lineNum":"  346","line":"    try AssignableTestCase.new(&v, &a).run();","class":"lineCov","hits":"1","order":"1547","possible_hits":"1",},
{"lineNum":"  347","line":"    try AssignableTestCase.new(&s, &a).run();","class":"lineCov","hits":"1","order":"1548","possible_hits":"1",},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"test \"types are assignable to themselves\" {","class":"lineCov","hits":"2","order":"1549","possible_hits":"2",},
{"lineNum":"  351","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1550","possible_hits":"1",},
{"lineNum":"  352","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1551","possible_hits":"1",},
{"lineNum":"  353","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1552","possible_hits":"1",},
{"lineNum":"  354","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1553","possible_hits":"1",},
{"lineNum":"  355","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1554","possible_hits":"1",},
{"lineNum":"  356","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1555","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    try AssignableTestCase.new(&n, &n).run();","class":"lineCov","hits":"1","order":"1556","possible_hits":"1",},
{"lineNum":"  359","line":"    try AssignableTestCase.new(&a, &a).run();","class":"lineCov","hits":"1","order":"1559","possible_hits":"1",},
{"lineNum":"  360","line":"    try AssignableTestCase.new(&b, &b).run();","class":"lineCov","hits":"1","order":"1560","possible_hits":"1",},
{"lineNum":"  361","line":"    try AssignableTestCase.new(&u, &u).run();","class":"lineCov","hits":"1","order":"1561","possible_hits":"1",},
{"lineNum":"  362","line":"    try AssignableTestCase.new(&v, &v).run();","class":"lineCov","hits":"1","order":"1562","possible_hits":"1",},
{"lineNum":"  363","line":"    try AssignableTestCase.new(&s, &s).run();","class":"lineCov","hits":"1","order":"1563","possible_hits":"1",},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"test \"unions can be assigned from any of their subtypes\" {","class":"lineCov","hits":"2","order":"1564","possible_hits":"2",},
{"lineNum":"  367","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1565","possible_hits":"1",},
{"lineNum":"  368","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1566","possible_hits":"1",},
{"lineNum":"  369","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1567","possible_hits":"1",},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    const u = Type.newUnion(Type.UnionType{","class":"lineCov","hits":"1","order":"1569","possible_hits":"1",},
{"lineNum":"  372","line":"        .tys = &[_]Type.Ptr{ &n, &b },","class":"lineCov","hits":"1","order":"1568","possible_hits":"1",},
{"lineNum":"  373","line":"    });"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    try AssignableTestCase.new(&n, &u).run();","class":"lineCov","hits":"1","order":"1570","possible_hits":"1",},
{"lineNum":"  376","line":"    try AssignableTestCase.new(&b, &u).run();","class":"lineCov","hits":"1","order":"1577","possible_hits":"1",},
{"lineNum":"  377","line":"    try AssignableTestCase.newF(&s, &u).run();","class":"lineCov","hits":"1","order":"1579","possible_hits":"1",},
{"lineNum":"  378","line":"}"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"test \"array subtypes must match for assignment\" {","class":"lineCov","hits":"2","order":"1585","possible_hits":"2",},
{"lineNum":"  381","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1586","possible_hits":"1",},
{"lineNum":"  382","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1587","possible_hits":"1",},
{"lineNum":"  383","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1588","possible_hits":"1",},
{"lineNum":"  384","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1589","possible_hits":"1",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    try AssignableTestCase.new(&na, &na).run();","class":"lineCov","hits":"1","order":"1590","possible_hits":"1",},
{"lineNum":"  387","line":"    try AssignableTestCase.new(&ba, &ba).run();","class":"lineCov","hits":"1","order":"1591","possible_hits":"1",},
{"lineNum":"  388","line":"    try AssignableTestCase.newF(&na, &ba).run();","class":"lineCov","hits":"1","order":"1592","possible_hits":"1",},
{"lineNum":"  389","line":"}"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"test \"unknown[] can be assigned to any array type\" {","class":"lineCov","hits":"2","order":"1597","possible_hits":"2",},
{"lineNum":"  392","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1598","possible_hits":"1",},
{"lineNum":"  393","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1599","possible_hits":"1",},
{"lineNum":"  394","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1600","possible_hits":"1",},
{"lineNum":"  395","line":"    const na = Type.newArray(Type.ArrayType{ .subtype = &n });","class":"lineCov","hits":"1","order":"1601","possible_hits":"1",},
{"lineNum":"  396","line":"    const ba = Type.newArray(Type.ArrayType{ .subtype = &b });","class":"lineCov","hits":"1","order":"1602","possible_hits":"1",},
{"lineNum":"  397","line":"    const ua = Type.newArray(Type.ArrayType{ .subtype = &u });","class":"lineCov","hits":"1","order":"1603","possible_hits":"1",},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    try AssignableTestCase.new(&ua, &na).run();","class":"lineCov","hits":"1","order":"1604","possible_hits":"1",},
{"lineNum":"  400","line":"    try AssignableTestCase.new(&ua, &ba).run();","class":"lineCov","hits":"1","order":"1606","possible_hits":"1",},
{"lineNum":"  401","line":"    try AssignableTestCase.newF(&na, &ua).run();","class":"lineCov","hits":"1","order":"1607","possible_hits":"1",},
{"lineNum":"  402","line":"}"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"test \"other type assignments are invalid\" {","class":"lineCov","hits":"2","order":"1608","possible_hits":"2",},
{"lineNum":"  405","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1609","possible_hits":"1",},
{"lineNum":"  406","line":"    const a = Type.newAny();","class":"lineCov","hits":"1","order":"1610","possible_hits":"1",},
{"lineNum":"  407","line":"    const b = Type.newBoolean();","class":"lineCov","hits":"1","order":"1611","possible_hits":"1",},
{"lineNum":"  408","line":"    const u = Type.newUnknown();","class":"lineCov","hits":"1","order":"1612","possible_hits":"1",},
{"lineNum":"  409","line":"    const v = Type.newVoid();","class":"lineCov","hits":"1","order":"1613","possible_hits":"1",},
{"lineNum":"  410","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1614","possible_hits":"1",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    try AssignableTestCase.newF(&n, &s).run();","class":"lineCov","hits":"1","order":"1615","possible_hits":"1",},
{"lineNum":"  413","line":"    try AssignableTestCase.newF(&b, &v).run();","class":"lineCov","hits":"1","order":"1616","possible_hits":"1",},
{"lineNum":"  414","line":"    try AssignableTestCase.newF(&a, &u).run();","class":"lineCov","hits":"1","order":"1617","possible_hits":"1",},
{"lineNum":"  415","line":"    try AssignableTestCase.newF(&u, &n).run();","class":"lineCov","hits":"1","order":"1618","possible_hits":"1",},
{"lineNum":"  416","line":"    try AssignableTestCase.newF(&v, &b).run();","class":"lineCov","hits":"1","order":"1619","possible_hits":"1",},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"const WriteTypeTestCase = struct {"},
{"lineNum":"  420","line":"    ty: Type,"},
{"lineNum":"  421","line":"    expected: []const u8,"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    pub fn run(self: WriteTypeTestCase) !void {","class":"lineCov","hits":"3","order":"1624","possible_hits":"3",},
{"lineNum":"  424","line":"        const ctx = try WriteContext(.{}).new(std.testing.allocator);","class":"lineCov","hits":"1","order":"1625","possible_hits":"1",},
{"lineNum":"  425","line":"        defer ctx.deinit();","class":"linePartCov","hits":"1","order":"1633","possible_hits":"4",},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"        try self.ty.write(ctx.writer());","class":"linePartCov","hits":"1","order":"1626","possible_hits":"2",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        const str = try ctx.toString();","class":"linePartCov","hits":"1","order":"1630","possible_hits":"2",},
{"lineNum":"  430","line":"        defer ctx.freeString(str);","class":"linePartCov","hits":"1","order":"1632","possible_hits":"2",},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"        try expectEqualStrings(self.expected, str);","class":"linePartCov","hits":"1","order":"1631","possible_hits":"2",},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":"};"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"test \"can write an unknown type\" {","class":"lineCov","hits":"2","order":"1620","possible_hits":"2",},
{"lineNum":"  437","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1634","possible_hits":"1",},
{"lineNum":"  438","line":"        .ty = Type.newUnknown(),","class":"lineCov","hits":"1","order":"1621","possible_hits":"1",},
{"lineNum":"  439","line":"        .expected = \"unknown\",","class":"lineCov","hits":"1","order":"1622","possible_hits":"1",},
{"lineNum":"  440","line":"    }).run();","class":"lineCov","hits":"1","order":"1623","possible_hits":"1",},
{"lineNum":"  441","line":"}"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"test \"can write a void type\" {","class":"lineCov","hits":"2","order":"1635","possible_hits":"2",},
{"lineNum":"  444","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1640","possible_hits":"1",},
{"lineNum":"  445","line":"        .ty = Type.newVoid(),","class":"lineCov","hits":"1","order":"1636","possible_hits":"1",},
{"lineNum":"  446","line":"        .expected = \"void\",","class":"lineCov","hits":"1","order":"1637","possible_hits":"1",},
{"lineNum":"  447","line":"    }).run();","class":"lineCov","hits":"1","order":"1638","possible_hits":"1",},
{"lineNum":"  448","line":"}"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"test \"can write a null type\" {","class":"lineCov","hits":"2","order":"1641","possible_hits":"2",},
{"lineNum":"  451","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1646","possible_hits":"1",},
{"lineNum":"  452","line":"        .ty = Type.newNull(),","class":"lineCov","hits":"1","order":"1642","possible_hits":"1",},
{"lineNum":"  453","line":"        .expected = \"null\",","class":"lineCov","hits":"1","order":"1643","possible_hits":"1",},
{"lineNum":"  454","line":"    }).run();","class":"lineCov","hits":"1","order":"1644","possible_hits":"1",},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"test \"can write an undefined type\" {","class":"lineCov","hits":"2","order":"1647","possible_hits":"2",},
{"lineNum":"  458","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1652","possible_hits":"1",},
{"lineNum":"  459","line":"        .ty = Type.newUndefined(),","class":"lineCov","hits":"1","order":"1648","possible_hits":"1",},
{"lineNum":"  460","line":"        .expected = \"undefined\",","class":"lineCov","hits":"1","order":"1649","possible_hits":"1",},
{"lineNum":"  461","line":"    }).run();","class":"lineCov","hits":"1","order":"1650","possible_hits":"1",},
{"lineNum":"  462","line":"}"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"test \"can write a never type\" {","class":"lineCov","hits":"2","order":"1653","possible_hits":"2",},
{"lineNum":"  465","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1658","possible_hits":"1",},
{"lineNum":"  466","line":"        .ty = Type.newNever(),","class":"lineCov","hits":"1","order":"1654","possible_hits":"1",},
{"lineNum":"  467","line":"        .expected = \"never\",","class":"lineCov","hits":"1","order":"1655","possible_hits":"1",},
{"lineNum":"  468","line":"    }).run();","class":"lineCov","hits":"1","order":"1656","possible_hits":"1",},
{"lineNum":"  469","line":"}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"test \"can write a number type\" {","class":"lineCov","hits":"2","order":"1659","possible_hits":"2",},
{"lineNum":"  472","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1664","possible_hits":"1",},
{"lineNum":"  473","line":"        .ty = Type.newNumber(),","class":"lineCov","hits":"1","order":"1660","possible_hits":"1",},
{"lineNum":"  474","line":"        .expected = \"number\",","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":"  475","line":"    }).run();","class":"lineCov","hits":"1","order":"1662","possible_hits":"1",},
{"lineNum":"  476","line":"}"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"test \"can write a string type\" {","class":"lineCov","hits":"2","order":"1665","possible_hits":"2",},
{"lineNum":"  479","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1670","possible_hits":"1",},
{"lineNum":"  480","line":"        .ty = Type.newString(),","class":"lineCov","hits":"1","order":"1666","possible_hits":"1",},
{"lineNum":"  481","line":"        .expected = \"string\",","class":"lineCov","hits":"1","order":"1667","possible_hits":"1",},
{"lineNum":"  482","line":"    }).run();","class":"lineCov","hits":"1","order":"1668","possible_hits":"1",},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"test \"can write a boolean type\" {","class":"lineCov","hits":"2","order":"1671","possible_hits":"2",},
{"lineNum":"  486","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1676","possible_hits":"1",},
{"lineNum":"  487","line":"        .ty = Type.newBoolean(),","class":"lineCov","hits":"1","order":"1672","possible_hits":"1",},
{"lineNum":"  488","line":"        .expected = \"boolean\",","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":"  489","line":"    }).run();","class":"lineCov","hits":"1","order":"1674","possible_hits":"1",},
{"lineNum":"  490","line":"}"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"test \"can write an object type\" {","class":"lineCov","hits":"2","order":"1677","possible_hits":"2",},
{"lineNum":"  493","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1682","possible_hits":"1",},
{"lineNum":"  494","line":"        .ty = Type.newObject(),","class":"lineCov","hits":"1","order":"1678","possible_hits":"1",},
{"lineNum":"  495","line":"        .expected = \"object\",","class":"lineCov","hits":"1","order":"1679","possible_hits":"1",},
{"lineNum":"  496","line":"    }).run();","class":"lineCov","hits":"1","order":"1680","possible_hits":"1",},
{"lineNum":"  497","line":"}"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"// TODO: Add test for writing a tuple type"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"test \"can write an array type\" {","class":"lineCov","hits":"2","order":"1683","possible_hits":"2",},
{"lineNum":"  502","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1684","possible_hits":"1",},
{"lineNum":"  503","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1693","possible_hits":"1",},
{"lineNum":"  504","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &n }),","class":"lineCov","hits":"1","order":"1685","possible_hits":"1",},
{"lineNum":"  505","line":"        .expected = \"number[]\",","class":"lineCov","hits":"1","order":"1686","possible_hits":"1",},
{"lineNum":"  506","line":"    }).run();","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":"  507","line":"}"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"test \"can write a nested array type\" {","class":"lineCov","hits":"2","order":"1694","possible_hits":"2",},
{"lineNum":"  510","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1695","possible_hits":"1",},
{"lineNum":"  511","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1696","possible_hits":"1",},
{"lineNum":"  512","line":"    const u = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } });","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"  513","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1711","possible_hits":"1",},
{"lineNum":"  514","line":"        .ty = Type.newArray(Type.ArrayType{ .subtype = &u }),","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"  515","line":"        .expected = \"(number|string)[]\",","class":"lineCov","hits":"1","order":"1699","possible_hits":"1",},
{"lineNum":"  516","line":"    }).run();","class":"lineCov","hits":"1","order":"1700","possible_hits":"1",},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"// TODO: Add test for writing a class type"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"// TODO: Add test for writing an enum type"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"test \"can write a function type\" {","class":"lineCov","hits":"2","order":"1712","possible_hits":"2",},
{"lineNum":"  524","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1713","possible_hits":"1",},
{"lineNum":"  525","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1714","possible_hits":"1",},
{"lineNum":"  526","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1730","possible_hits":"1",},
{"lineNum":"  527","line":"        .ty = Type.newFunction(Type.FunctionType{","class":"lineCov","hits":"2","order":"1715","possible_hits":"2",},
{"lineNum":"  528","line":"            .ret = &n,","class":"lineCov","hits":"1","order":"1716","possible_hits":"1",},
{"lineNum":"  529","line":"            .args = &[_]Type.Ptr{ &n, &s },","class":"lineCov","hits":"1","order":"1717","possible_hits":"1",},
{"lineNum":"  530","line":"        }),"},
{"lineNum":"  531","line":"        .expected = \"function(number, string) : number\",","class":"lineCov","hits":"1","order":"1718","possible_hits":"1",},
{"lineNum":"  532","line":"    }).run();","class":"lineCov","hits":"1","order":"1719","possible_hits":"1",},
{"lineNum":"  533","line":"}"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"test \"can write a union type\" {","class":"lineCov","hits":"2","order":"1731","possible_hits":"2",},
{"lineNum":"  536","line":"    const n = Type.newNumber();","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":"  537","line":"    const s = Type.newString();","class":"lineCov","hits":"1","order":"1733","possible_hits":"1",},
{"lineNum":"  538","line":"    try (WriteTypeTestCase{","class":"lineCov","hits":"1","order":"1737","possible_hits":"1",},
{"lineNum":"  539","line":"        .ty = Type.newUnion(Type.UnionType{ .tys = &[_]Type.Ptr{ &n, &s } }),","class":"lineCov","hits":"1","order":"1734","possible_hits":"1",},
{"lineNum":"  540","line":"        .expected = \"number|string\",","class":"lineCov","hits":"1","order":"1735","possible_hits":"1",},
{"lineNum":"  541","line":"    }).run();","class":"lineCov","hits":"1","order":"1736","possible_hits":"1",},
{"lineNum":"  542","line":"}"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"// TODO: Add test for writing an alias type"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"// TODO: Add test for writing an interface type"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2021-12-31 18:19:35", "instrumented" : 301, "covered" : 289,};
var merged_data = [];
