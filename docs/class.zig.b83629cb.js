var data = {lines:[
{"lineNum":"    1","line":"// glinka"},
{"lineNum":"    2","line":"// Copyright (C) 2021-2022 Ollie Etherington"},
{"lineNum":"    3","line":"// <www.etherington.io>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This program is free software: you can redistribute it and/or modify"},
{"lineNum":"    6","line":"// it under the terms of the GNU Affero General Public License as published"},
{"lineNum":"    7","line":"// by the Free Software Foundation, either version 3 of the License, or"},
{"lineNum":"    8","line":"// (at your option) any later version."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This program is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"},
{"lineNum":"   13","line":"// GNU Affero General Public License for more details."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// You should have received a copy of the GNU Affero General Public License"},
{"lineNum":"   16","line":"// along with this program. If not, see <http://www.gnu.org/licenses/>."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"const std = @import(\"std\");"},
{"lineNum":"   19","line":"const expect = std.testing.expect;"},
{"lineNum":"   20","line":"const genericEql = @import(\"../generic_eql.zig\");"},
{"lineNum":"   21","line":"const Cursor = @import(\"../cursor.zig\").Cursor;"},
{"lineNum":"   22","line":"const putInd = @import(\"indenter.zig\").putInd;"},
{"lineNum":"   23","line":"const DumpTestCase = @import(\"dump_test_case.zig\").DumpTestCase;"},
{"lineNum":"   24","line":"const nodeImp = @import(\"../node.zig\");"},
{"lineNum":"   25","line":"const Node = nodeImp.Node;"},
{"lineNum":"   26","line":"const makeNode = nodeImp.makeNode;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"pub const Visibility = enum {"},
{"lineNum":"   29","line":"    Public,"},
{"lineNum":"   30","line":"    Protected,"},
{"lineNum":"   31","line":"    Private,"},
{"lineNum":"   32","line":"};"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"pub const ClassTypeMethod = struct {};"},
{"lineNum":"   35","line":"pub const ClassTypeMember = struct {};"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"pub const ClassTypeMethodList = std.ArrayListUnmanaged(ClassTypeMethod);"},
{"lineNum":"   38","line":"pub const ClassTypeMemberList = std.ArrayListUnmanaged(ClassTypeMember);"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub const ClassType = struct {"},
{"lineNum":"   41","line":"    name: []const u8,"},
{"lineNum":"   42","line":"    extends: ?[]const u8,"},
{"lineNum":"   43","line":"    constructor: ?ClassTypeMethod,"},
{"lineNum":"   44","line":"    destructor: ?ClassTypeMethod,"},
{"lineNum":"   45","line":"    methods: ClassTypeMethodList,"},
{"lineNum":"   46","line":"    members: ClassTypeMemberList,"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    pub fn new(name: []const u8, extends: ?[]const u8) ClassType {","class":"lineCov","hits":"1","order":"1148","possible_hits":"1",},
{"lineNum":"   49","line":"        return ClassType{","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"   50","line":"            .name = name,","class":"lineCov","hits":"1","order":"1149","possible_hits":"1",},
{"lineNum":"   51","line":"            .extends = extends,","class":"lineCov","hits":"1","order":"1150","possible_hits":"1",},
{"lineNum":"   52","line":"            .constructor = null,","class":"lineCov","hits":"1","order":"1151","possible_hits":"1",},
{"lineNum":"   53","line":"            .destructor = null,","class":"lineCov","hits":"1","order":"1152","possible_hits":"1",},
{"lineNum":"   54","line":"            .methods = ClassTypeMethodList{ .items = &[_]ClassTypeMethod{} },","class":"lineCov","hits":"1","order":"1153","possible_hits":"1",},
{"lineNum":"   55","line":"            .members = ClassTypeMemberList{ .items = &[_]ClassTypeMember{} },","class":"lineCov","hits":"1","order":"1154","possible_hits":"1",},
{"lineNum":"   56","line":"        };"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    pub fn dump(self: ClassType, writer: anytype, indent: usize) !void {","class":"linePartCov","hits":"2","order":"1159","possible_hits":"4",},
{"lineNum":"   60","line":"        try putInd(writer, indent, \"ClassType \'{s}\'\\n\", .{self.name});","class":"linePartCov","hits":"1","order":"1160","possible_hits":"2",},
{"lineNum":"   61","line":"        if (self.extends) |extends|","class":"linePartCov","hits":"2","order":"1161","possible_hits":"4",},
{"lineNum":"   62","line":"            try putInd(writer, indent + 2, \"Extends \'{s}\'\\n\", .{extends});","class":"linePartCov","hits":"1","order":"1162","possible_hits":"4",},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"test \"can dump a ClassType\" {","class":"lineCov","hits":"2","order":"1146","possible_hits":"2",},
{"lineNum":"   67","line":"    try (DumpTestCase(ClassType, .ClassType){","class":"lineCov","hits":"1","order":"1163","possible_hits":"1",},
{"lineNum":"   68","line":"        .value = ClassType.new(\"MyClass\", \"SomeOtherClass\"),","class":"lineCov","hits":"1","order":"1147","possible_hits":"1",},
{"lineNum":"   69","line":"        .expected =","class":"lineCov","hits":"1","order":"1156","possible_hits":"1",},
{"lineNum":"   70","line":"        \\\\ClassType \'MyClass\'"},
{"lineNum":"   71","line":"        \\\\  Extends \'SomeOtherClass\'"},
{"lineNum":"   72","line":"        \\\\"},
{"lineNum":"   73","line":"        ,"},
{"lineNum":"   74","line":"    }).run();","class":"lineCov","hits":"1","order":"1157","possible_hits":"1",},
{"lineNum":"   75","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2022-01-15 21:43:22", "instrumented" : 17, "covered" : 17,};
var merged_data = [];
